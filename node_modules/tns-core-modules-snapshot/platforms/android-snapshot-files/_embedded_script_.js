(function(modules) {
var installedModules = {};
function __webpack_require__(moduleId) {
if (installedModules[moduleId]) return installedModules[moduleId].exports;
var module = installedModules[moduleId] = {
exports: {},
id: moduleId,
loaded: false
};
modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
module.loaded = true;
return module.exports;
}
__webpack_require__.m = modules;
__webpack_require__.c = installedModules;
__webpack_require__.p = "";
return __webpack_require__(0);
})([ function(module, exports, __webpack_require__) {
__webpack_require__(1);
__webpack_require__(2);
module.exports = __webpack_require__(155);
}, function(module, exports) {
var global = Function("return this")();
global.global = global;
}, function(module, exports, __webpack_require__) {
__webpack_require__(3);
__webpack_require__(86);
__webpack_require__(24);
__webpack_require__(88);
__webpack_require__(85);
__webpack_require__(18);
__webpack_require__(44);
__webpack_require__(32);
__webpack_require__(73);
__webpack_require__(89);
__webpack_require__(82);
__webpack_require__(84);
__webpack_require__(19);
__webpack_require__(56);
__webpack_require__(90);
__webpack_require__(5);
__webpack_require__(80);
__webpack_require__(81);
__webpack_require__(92);
__webpack_require__(83);
__webpack_require__(59);
__webpack_require__(41);
__webpack_require__(40);
__webpack_require__(22);
__webpack_require__(21);
__webpack_require__(7);
__webpack_require__(15);
__webpack_require__(94);
__webpack_require__(96);
__webpack_require__(49);
__webpack_require__(98);
__webpack_require__(57);
__webpack_require__(60);
__webpack_require__(67);
__webpack_require__(99);
__webpack_require__(37);
__webpack_require__(100);
__webpack_require__(31);
__webpack_require__(12);
__webpack_require__(36);
__webpack_require__(38);
__webpack_require__(101);
__webpack_require__(8);
__webpack_require__(76);
__webpack_require__(103);
__webpack_require__(10);
__webpack_require__(54);
__webpack_require__(104);
__webpack_require__(106);
__webpack_require__(108);
__webpack_require__(78);
__webpack_require__(110);
__webpack_require__(112);
__webpack_require__(113);
__webpack_require__(115);
__webpack_require__(117);
__webpack_require__(119);
__webpack_require__(121);
__webpack_require__(123);
__webpack_require__(125);
__webpack_require__(127);
__webpack_require__(130);
__webpack_require__(132);
__webpack_require__(133);
__webpack_require__(129);
__webpack_require__(135);
__webpack_require__(136);
__webpack_require__(138);
__webpack_require__(140);
__webpack_require__(142);
__webpack_require__(33);
__webpack_require__(13);
__webpack_require__(53);
__webpack_require__(52);
__webpack_require__(29);
__webpack_require__(28);
__webpack_require__(33);
__webpack_require__(46);
__webpack_require__(144);
__webpack_require__(146);
__webpack_require__(69);
__webpack_require__(74);
__webpack_require__(148);
__webpack_require__(149);
__webpack_require__(62);
__webpack_require__(65);
__webpack_require__(64);
__webpack_require__(63);
__webpack_require__(151);
__webpack_require__(34);
__webpack_require__(51);
__webpack_require__(153);
__webpack_require__(154);
__webpack_require__(17);
__webpack_require__(14);
__webpack_require__(79);
__webpack_require__(58);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var application_common_1 = __webpack_require__(4);
__export(__webpack_require__(4));
var ActivityCreated = "activityCreated";
var ActivityDestroyed = "activityDestroyed";
var ActivityStarted = "activityStarted";
var ActivityPaused = "activityPaused";
var ActivityResumed = "activityResumed";
var ActivityStopped = "activityStopped";
var SaveActivityState = "saveActivityState";
var ActivityResult = "activityResult";
var ActivityBackPressed = "activityBackPressed";
var ActivityRequestPermissions = "activityRequestPermissions";
var AndroidApplication = function(_super) {
__extends(AndroidApplication, _super);
function AndroidApplication() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._registeredReceivers = {};
_this._pendingReceiverRegistrations = new Array();
return _this;
}
Object.defineProperty(AndroidApplication.prototype, "currentContext", {
get: function() {
return this.foregroundActivity;
},
enumerable: true,
configurable: true
});
AndroidApplication.prototype.init = function(nativeApp) {
if (this.nativeApp === nativeApp) {
return;
}
if (this.nativeApp) {
throw new Error("application.android already initialized.");
}
this.nativeApp = nativeApp;
this.packageName = nativeApp.getPackageName();
this.context = nativeApp.getApplicationContext();
var lifecycleCallbacks = initLifecycleCallbacks();
var componentCallbacks = initComponentCallbacks();
this.nativeApp.registerActivityLifecycleCallbacks(lifecycleCallbacks);
this.nativeApp.registerComponentCallbacks(componentCallbacks);
this._registerPendingReceivers();
};
AndroidApplication.prototype._registerPendingReceivers = function() {
var _this = this;
this._pendingReceiverRegistrations.forEach(function(func) {
return func(_this.context);
});
this._pendingReceiverRegistrations.length = 0;
};
AndroidApplication.prototype.registerBroadcastReceiver = function(intentFilter, onReceiveCallback) {
ensureBroadCastReceiverClass();
var that = this;
var registerFunc = function(context) {
var receiver = new BroadcastReceiverClass(onReceiveCallback);
context.registerReceiver(receiver, new android.content.IntentFilter(intentFilter));
that._registeredReceivers[intentFilter] = receiver;
};
if (this.context) {
registerFunc(this.context);
} else {
this._pendingReceiverRegistrations.push(registerFunc);
}
};
AndroidApplication.prototype.unregisterBroadcastReceiver = function(intentFilter) {
var receiver = this._registeredReceivers[intentFilter];
if (receiver) {
this.context.unregisterReceiver(receiver);
this._registeredReceivers[intentFilter] = undefined;
delete this._registeredReceivers[intentFilter];
}
};
return AndroidApplication;
}(application_common_1.Observable);
AndroidApplication.activityCreatedEvent = ActivityCreated;
AndroidApplication.activityDestroyedEvent = ActivityDestroyed;
AndroidApplication.activityStartedEvent = ActivityStarted;
AndroidApplication.activityPausedEvent = ActivityPaused;
AndroidApplication.activityResumedEvent = ActivityResumed;
AndroidApplication.activityStoppedEvent = ActivityStopped;
AndroidApplication.saveActivityStateEvent = SaveActivityState;
AndroidApplication.activityResultEvent = ActivityResult;
AndroidApplication.activityBackPressedEvent = ActivityBackPressed;
AndroidApplication.activityRequestPermissionsEvent = ActivityRequestPermissions;
exports.AndroidApplication = AndroidApplication;
var androidApp = new AndroidApplication();
exports.android = androidApp;
application_common_1.setApplication(androidApp);
var mainEntry;
var started = false;
function start(entry) {
if (started) {
throw new Error("Application is already started.");
}
started = true;
mainEntry = typeof entry === "string" ? {
moduleName: entry
} : entry;
if (!androidApp.nativeApp) {
var nativeApp = getNativeApplication();
androidApp.init(nativeApp);
}
}
exports.start = start;
function getMainEntry() {
return mainEntry;
}
exports.getMainEntry = getMainEntry;
function getNativeApplication() {
var nativeApp = androidApp.nativeApp;
if (!nativeApp) {
if (!nativeApp && com.tns.NativeScriptApplication) {
nativeApp = com.tns.NativeScriptApplication.getInstance();
}
if (!nativeApp) {
var clazz = java.lang.Class.forName("android.app.ActivityThread");
if (clazz) {
var method = clazz.getMethod("currentApplication", null);
if (method) {
nativeApp = method.invoke(null, null);
}
}
}
if (!nativeApp) {
throw new Error("Failed to retrieve native Android Application object. If you have a custom android.app.Application type implemented make sure that you've called the '<application-module>.android.init' method.");
}
}
return nativeApp;
}
exports.getNativeApplication = getNativeApplication;
global.__onLiveSync = function() {
if (androidApp && androidApp.paused) {
return;
}
application_common_1.livesync();
};
function initLifecycleCallbacks() {
var lifecycleCallbacks = new android.app.Application.ActivityLifecycleCallbacks({
onActivityCreated: function(activity, savedInstanceState) {
var activityInfo = activity.getPackageManager().getActivityInfo(activity.getComponentName(), android.content.pm.PackageManager.GET_META_DATA);
if (activityInfo.metaData) {
var setThemeOnLaunch = activityInfo.metaData.getInt("SET_THEME_ON_LAUNCH", -1);
if (setThemeOnLaunch !== -1) {
activity.setTheme(setThemeOnLaunch);
}
}
if (!androidApp.startActivity) {
androidApp.startActivity = activity;
}
androidApp.notify({
eventName: ActivityCreated,
object: androidApp,
activity: activity,
bundle: savedInstanceState
});
if (application_common_1.hasListeners(application_common_1.displayedEvent)) {
var rootView_1 = activity.findViewById(android.R.id.content);
var onGlobalLayoutListener_1 = new android.view.ViewTreeObserver.OnGlobalLayoutListener({
onGlobalLayout: function() {
application_common_1.notify({
eventName: application_common_1.displayedEvent,
object: androidApp,
activity: activity
});
var viewTreeObserver = rootView_1.getViewTreeObserver();
viewTreeObserver.removeOnGlobalLayoutListener(onGlobalLayoutListener_1);
}
});
rootView_1.getViewTreeObserver().addOnGlobalLayoutListener(onGlobalLayoutListener_1);
}
},
onActivityDestroyed: function(activity) {
if (activity === androidApp.foregroundActivity) {
androidApp.foregroundActivity = undefined;
}
if (activity === androidApp.startActivity) {
androidApp.startActivity = undefined;
}
androidApp.notify({
eventName: ActivityDestroyed,
object: androidApp,
activity: activity
});
gc();
},
onActivityPaused: function(activity) {
if (activity.isNativeScriptActivity) {
androidApp.paused = true;
application_common_1.notify({
eventName: application_common_1.suspendEvent,
object: androidApp,
android: activity
});
}
androidApp.notify({
eventName: ActivityPaused,
object: androidApp,
activity: activity
});
},
onActivityResumed: function(activity) {
androidApp.foregroundActivity = activity;
if (activity.isNativeScriptActivity) {
application_common_1.notify({
eventName: application_common_1.resumeEvent,
object: androidApp,
android: activity
});
androidApp.paused = false;
}
androidApp.notify({
eventName: ActivityResumed,
object: androidApp,
activity: activity
});
},
onActivitySaveInstanceState: function(activity, outState) {
androidApp.notify({
eventName: SaveActivityState,
object: androidApp,
activity: activity,
bundle: outState
});
},
onActivityStarted: function(activity) {
androidApp.notify({
eventName: ActivityStarted,
object: androidApp,
activity: activity
});
},
onActivityStopped: function(activity) {
androidApp.notify({
eventName: ActivityStopped,
object: androidApp,
activity: activity
});
}
});
return lifecycleCallbacks;
}
var currentOrientation;
function initComponentCallbacks() {
var componentCallbacks = new android.content.ComponentCallbacks2({
onLowMemory: function() {
gc();
java.lang.System.gc();
application_common_1.notify({
eventName: application_common_1.lowMemoryEvent,
object: this,
android: this
});
},
onTrimMemory: function(level) {},
onConfigurationChanged: function(newConfig) {
var newOrientation = newConfig.orientation;
if (newOrientation === currentOrientation) {
return;
}
currentOrientation = newOrientation;
var newValue;
switch (newOrientation) {
case android.content.res.Configuration.ORIENTATION_LANDSCAPE:
newValue = "landscape";
break;

case android.content.res.Configuration.ORIENTATION_PORTRAIT:
newValue = "portrait";
break;

default:
newValue = "unknown";
break;
}
application_common_1.notify({
eventName: application_common_1.orientationChangedEvent,
android: androidApp.nativeApp,
newValue: newValue,
object: androidApp
});
}
});
return componentCallbacks;
}
var BroadcastReceiverClass;
function ensureBroadCastReceiverClass() {
if (BroadcastReceiverClass) {
return;
}
var BroadcastReceiver = function(_super) {
__extends(BroadcastReceiver, _super);
function BroadcastReceiver(onReceiveCallback) {
var _this = _super.call(this) || this;
_this._onReceiveCallback = onReceiveCallback;
return global.__native(_this);
}
BroadcastReceiver.prototype.onReceive = function(context, intent) {
if (this._onReceiveCallback) {
this._onReceiveCallback(context, intent);
}
};
return BroadcastReceiver;
}(android.content.BroadcastReceiver);
BroadcastReceiverClass = BroadcastReceiver;
}
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
__webpack_require__(5);
var observable_1 = __webpack_require__(32);
exports.Observable = observable_1.Observable;
var events = new observable_1.Observable();
var launched = false;
function setLaunched() {
launched = true;
events.off("launch", setLaunched);
}
events.on("launch", setLaunched);
function hasLaunched() {
return launched;
}
exports.hasLaunched = hasLaunched;
exports.launchEvent = "launch";
exports.suspendEvent = "suspend";
exports.displayedEvent = "displayed";
exports.resumeEvent = "resume";
exports.exitEvent = "exit";
exports.lowMemoryEvent = "lowMemory";
exports.uncaughtErrorEvent = "uncaughtError";
exports.orientationChangedEvent = "orientationChanged";
var cssFile = "app.css";
var resources = {};
function getResources() {
return resources;
}
exports.getResources = getResources;
function setResources(res) {
resources = res;
}
exports.setResources = setResources;
exports.android = undefined;
exports.ios = undefined;
exports.on = events.on.bind(events);
exports.off = events.off.bind(events);
exports.notify = events.notify.bind(events);
exports.hasListeners = events.hasListeners.bind(events);
var app;
function setApplication(instance) {
app = instance;
}
exports.setApplication = setApplication;
function livesync() {
events.notify({
eventName: "livesync",
object: app
});
}
exports.livesync = livesync;
function setCssFileName(cssFileName) {
cssFile = cssFileName;
events.notify({
eventName: "cssChanged",
object: app,
cssFile: cssFileName
});
}
exports.setCssFileName = setCssFileName;
function getCssFileName() {
return cssFile;
}
exports.getCssFileName = getCssFileName;
function addCss(cssText) {
events.notify({
eventName: "cssChanged",
object: app,
cssText: cssText
});
}
exports.addCss = addCss;
global.__onUncaughtError = function(error) {
events.notify({
eventName: exports.uncaughtErrorEvent,
object: app,
android: error,
ios: error,
error: error
});
};
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
__webpack_require__(6);
global.__extends = global.__extends || function(d, b) {
for (var p in b) {
if (b.hasOwnProperty(p)) {
d[p] = b[p];
}
}
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
global.moduleMerge = function(sourceExports, destExports) {
for (var key in sourceExports) {
destExports[key] = sourceExports[key];
}
};
var modules = new Map();
global.registerModule = function(name, loader) {
modules.set(name, loader);
};
global.moduleExists = function(name) {
return modules.has(name);
};
global.loadModule = function(name) {
var loader = modules.get(name);
if (loader) {
return loader();
} else {
var result_1 = global.require(name);
modules.set(name, function() {
return result_1;
});
return result_1;
}
};
global.zonedCallback = function(callback) {
if (global.zone) {
return global.zone.bind(callback);
}
if (global.Zone) {
return global.Zone.current.wrap(callback);
} else {
return callback;
}
};
global.registerModule("timer", function() {
return __webpack_require__(7);
});
global.registerModule("ui/dialogs", function() {
return __webpack_require__(8);
});
global.registerModule("xhr", function() {
return __webpack_require__(79);
});
global.registerModule("fetch", function() {
return __webpack_require__(84);
});
var __tnsGlobalMergedModules = new Map();
function registerOnGlobalContext(name, module) {
Object.defineProperty(global, name, {
get: function() {
var m = global.loadModule(module);
if (!__tnsGlobalMergedModules.has(module)) {
__tnsGlobalMergedModules.set(module, true);
global.moduleMerge(m, global);
}
var resolvedValue = m[name];
Object.defineProperty(this, name, {
value: resolvedValue,
configurable: true,
writable: true
});
return resolvedValue;
},
configurable: true
});
}
if (true) {
var timer = __webpack_require__(7);
global.setTimeout = timer.setTimeout;
global.clearTimeout = timer.clearTimeout;
global.setInterval = timer.setInterval;
global.clearInterval = timer.clearInterval;
var dialogs = __webpack_require__(8);
global.alert = dialogs.alert;
global.confirm = dialogs.confirm;
global.prompt = dialogs.prompt;
var xhr = __webpack_require__(79);
global.XMLHttpRequest = xhr.XMLHttpRequest;
global.FormData = xhr.FormData;
var fetch = __webpack_require__(84);
global.fetch = fetch.fetch;
global.Headers = fetch.Headers;
global.Request = fetch.Request;
global.Response = fetch.Response;
} else {
registerOnGlobalContext("setTimeout", "timer");
registerOnGlobalContext("clearTimeout", "timer");
registerOnGlobalContext("setInterval", "timer");
registerOnGlobalContext("clearInterval", "timer");
registerOnGlobalContext("alert", "ui/dialogs");
registerOnGlobalContext("confirm", "ui/dialogs");
registerOnGlobalContext("prompt", "ui/dialogs");
registerOnGlobalContext("XMLHttpRequest", "xhr");
registerOnGlobalContext("FormData", "xhr");
registerOnGlobalContext("fetch", "fetch");
}
if (global.android || true) {
var consoleModule = __webpack_require__(85);
global.console = new consoleModule.Console();
}
function Deprecated(target, key, descriptor) {
if (descriptor) {
var originalMethod = descriptor.value;
descriptor.value = function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i] = arguments[_i];
}
console.log(key + " is deprecated");
return originalMethod.apply(this, args);
};
return descriptor;
} else {
console.log((target && target.name || target) + " is deprecated");
return target;
}
}
exports.Deprecated = Deprecated;
global.Deprecated = Deprecated;
function Experimental(target, key, descriptor) {
if (descriptor) {
var originalMethod = descriptor.value;
descriptor.value = function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i] = arguments[_i];
}
console.log(key + " is experimental");
return originalMethod.apply(this, args);
};
return descriptor;
} else {
console.log((target && target.name || target) + " is experimental");
return target;
}
}
exports.Experimental = Experimental;
global.Experimental = Experimental;
}, function(module, exports) {
if (typeof global.__decorate !== "function") {
global.__decorate = function(decorators, target, key, desc) {
var c = arguments.length;
var r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof global.Reflect === "object" && typeof global.Reflect.decorate === "function") {
r = global.Reflect.decorate(decorators, target, key, desc);
} else {
for (var i = decorators.length - 1; i >= 0; i--) {
if (d = decorators[i]) {
r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
}
}
}
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
}
if (typeof global.__metadata !== "function") {
global.__metadata = function(k, v) {
if (typeof global.Reflect === "object" && typeof global.Reflect.metadata === "function") {
return global.Reflect.metadata(k, v);
}
};
}
if (typeof global.__param !== "function") {
global.__param = global && global.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
}
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var timeoutHandler;
var timeoutCallbacks = {};
var timerId = 0;
function createHandlerAndGetId() {
if (!timeoutHandler) {
timeoutHandler = new android.os.Handler(android.os.Looper.myLooper());
}
timerId++;
return timerId;
}
function setTimeout(callback, milliseconds) {
if (milliseconds === void 0) {
milliseconds = 0;
}
var id = createHandlerAndGetId();
var zoneBound = zonedCallback(callback);
var runnable = new java.lang.Runnable({
run: function() {
zoneBound();
if (timeoutCallbacks[id]) {
delete timeoutCallbacks[id];
}
}
});
if (!timeoutCallbacks[id]) {
timeoutCallbacks[id] = runnable;
}
timeoutHandler.postDelayed(runnable, long(milliseconds));
return id;
}
exports.setTimeout = setTimeout;
function clearTimeout(id) {
var index = id;
if (timeoutCallbacks[index]) {
timeoutHandler.removeCallbacks(timeoutCallbacks[index]);
delete timeoutCallbacks[index];
}
}
exports.clearTimeout = clearTimeout;
function setInterval(callback, milliseconds) {
if (milliseconds === void 0) {
milliseconds = 0;
}
var id = createHandlerAndGetId();
var handler = timeoutHandler;
var zoneBound = zonedCallback(callback);
var runnable = new java.lang.Runnable({
run: function() {
zoneBound();
if (timeoutCallbacks[id]) {
handler.postDelayed(runnable, long(milliseconds));
}
}
});
if (!timeoutCallbacks[id]) {
timeoutCallbacks[id] = runnable;
}
timeoutHandler.postDelayed(runnable, long(milliseconds));
return id;
}
exports.setInterval = setInterval;
exports.clearInterval = clearTimeout;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var dialogs_common_1 = __webpack_require__(9);
var application_1 = __webpack_require__(3);
__export(__webpack_require__(9));
function isString(value) {
return typeof value === "string";
}
function createAlertDialog(options) {
var alert = new android.app.AlertDialog.Builder(application_1.android.foregroundActivity);
alert.setTitle(options && isString(options.title) ? options.title : "");
alert.setMessage(options && isString(options.message) ? options.message : "");
if (options && options.cancelable === false) {
alert.setCancelable(false);
}
return alert;
}
function showDialog(builder) {
var dlg = builder.show();
var labelColor = dialogs_common_1.getLabelColor();
if (labelColor) {
var textViewId = dlg.getContext().getResources().getIdentifier("android:id/alertTitle", null, null);
if (textViewId) {
var tv = dlg.findViewById(textViewId);
if (tv) {
tv.setTextColor(labelColor.android);
}
}
var messageTextViewId = dlg.getContext().getResources().getIdentifier("android:id/message", null, null);
if (messageTextViewId) {
var messageTextView = dlg.findViewById(messageTextViewId);
if (messageTextView) {
messageTextView.setTextColor(labelColor.android);
}
}
}
var buttonColor = dialogs_common_1.getButtonColor();
var buttonBackgroundColor = dialogs_common_1.getButtonBackgroundColor();
if (buttonColor) {
var buttons = [];
for (var i = 0; i < 3; i++) {
var id = dlg.getContext().getResources().getIdentifier("android:id/button" + i, null, null);
buttons[i] = dlg.findViewById(id);
}
buttons.forEach(function(button) {
if (button) {
if (buttonColor) {
button.setTextColor(buttonColor.android);
}
if (buttonBackgroundColor) {
button.setBackgroundColor(buttonBackgroundColor.android);
}
}
});
}
}
function addButtonsToAlertDialog(alert, options, callback) {
if (!options) {
return;
}
if (options.okButtonText) {
alert.setPositiveButton(options.okButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
callback(true);
}
}));
}
if (options.cancelButtonText) {
alert.setNegativeButton(options.cancelButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
callback(false);
}
}));
}
if (options.neutralButtonText) {
alert.setNeutralButton(options.neutralButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
callback(undefined);
}
}));
}
alert.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
onDismiss: function() {
callback(false);
}
}));
}
function alert(arg) {
return new Promise(function(resolve, reject) {
try {
var options = !dialogs_common_1.isDialogOptions(arg) ? {
title: dialogs_common_1.ALERT,
okButtonText: dialogs_common_1.OK,
message: arg + ""
} : arg;
var alert_1 = createAlertDialog(options);
alert_1.setPositiveButton(options.okButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
resolve();
}
}));
alert_1.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
onDismiss: function() {
resolve();
}
}));
showDialog(alert_1);
} catch (ex) {
reject(ex);
}
});
}
exports.alert = alert;
function confirm(arg) {
return new Promise(function(resolve, reject) {
try {
var options = !dialogs_common_1.isDialogOptions(arg) ? {
title: dialogs_common_1.CONFIRM,
okButtonText: dialogs_common_1.OK,
cancelButtonText: dialogs_common_1.CANCEL,
message: arg + ""
} : arg;
var alert_2 = createAlertDialog(options);
addButtonsToAlertDialog(alert_2, options, function(result) {
resolve(result);
});
showDialog(alert_2);
} catch (ex) {
reject(ex);
}
});
}
exports.confirm = confirm;
function prompt(arg) {
var options;
var defaultOptions = {
title: dialogs_common_1.PROMPT,
okButtonText: dialogs_common_1.OK,
cancelButtonText: dialogs_common_1.CANCEL,
inputType: dialogs_common_1.inputType.text
};
if (arguments.length === 1) {
if (isString(arg)) {
options = defaultOptions;
options.message = arg;
} else {
options = arg;
}
} else if (arguments.length === 2) {
if (isString(arguments[0]) && isString(arguments[1])) {
options = defaultOptions;
options.message = arguments[0];
options.defaultText = arguments[1];
}
}
return new Promise(function(resolve, reject) {
try {
var alert_3 = createAlertDialog(options);
var input_1 = new android.widget.EditText(application_1.android.foregroundActivity);
if (options) {
if (options.inputType === dialogs_common_1.inputType.password) {
input_1.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
} else if (options.inputType === dialogs_common_1.inputType.email) {
input_1.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);
}
}
input_1.setText(options && options.defaultText || "");
alert_3.setView(input_1);
var getText_1 = function() {
return input_1.getText().toString();
};
addButtonsToAlertDialog(alert_3, options, function(r) {
resolve({
result: r,
text: getText_1()
});
});
showDialog(alert_3);
} catch (ex) {
reject(ex);
}
});
}
exports.prompt = prompt;
function login(arg) {
var options;
var defaultOptions = {
title: dialogs_common_1.LOGIN,
okButtonText: dialogs_common_1.OK,
cancelButtonText: dialogs_common_1.CANCEL
};
if (arguments.length === 1) {
if (isString(arguments[0])) {
options = defaultOptions;
options.message = arguments[0];
} else {
options = arguments[0];
}
} else if (arguments.length === 2) {
if (isString(arguments[0]) && isString(arguments[1])) {
options = defaultOptions;
options.message = arguments[0];
options.userName = arguments[1];
}
} else if (arguments.length === 3) {
if (isString(arguments[0]) && isString(arguments[1]) && isString(arguments[2])) {
options = defaultOptions;
options.message = arguments[0];
options.userName = arguments[1];
options.password = arguments[2];
}
}
return new Promise(function(resolve, reject) {
try {
var context = application_1.android.foregroundActivity;
var alert_4 = createAlertDialog(options);
var userNameInput_1 = new android.widget.EditText(context);
userNameInput_1.setText(options.userName ? options.userName : "");
var passwordInput_1 = new android.widget.EditText(context);
passwordInput_1.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
passwordInput_1.setText(options.password ? options.password : "");
var layout = new android.widget.LinearLayout(context);
layout.setOrientation(1);
layout.addView(userNameInput_1);
layout.addView(passwordInput_1);
alert_4.setView(layout);
addButtonsToAlertDialog(alert_4, options, function(r) {
resolve({
result: r,
userName: userNameInput_1.getText().toString(),
password: passwordInput_1.getText().toString()
});
});
showDialog(alert_4);
} catch (ex) {
reject(ex);
}
});
}
exports.login = login;
function action(arg) {
var options;
var defaultOptions = {
title: null,
cancelButtonText: dialogs_common_1.CANCEL
};
if (arguments.length === 1) {
if (isString(arguments[0])) {
options = defaultOptions;
options.message = arguments[0];
} else {
options = arguments[0];
}
} else if (arguments.length === 2) {
if (isString(arguments[0]) && isString(arguments[1])) {
options = defaultOptions;
options.message = arguments[0];
options.cancelButtonText = arguments[1];
}
} else if (arguments.length === 3) {
if (isString(arguments[0]) && isString(arguments[1]) && typeof arguments[2] !== "undefined") {
options = defaultOptions;
options.message = arguments[0];
options.cancelButtonText = arguments[1];
options.actions = arguments[2];
}
}
return new Promise(function(resolve, reject) {
try {
var activity = application_1.android.foregroundActivity || application_1.android.startActivity;
var alert_5 = new android.app.AlertDialog.Builder(activity);
var message = options && isString(options.message) ? options.message : "";
var title = options && isString(options.title) ? options.title : "";
if (options && options.cancelable === false) {
alert_5.setCancelable(false);
}
if (title) {
alert_5.setTitle(title);
if (!options.actions) {
alert_5.setMessage(message);
}
} else {
alert_5.setTitle(message);
}
if (options.actions) {
alert_5.setItems(options.actions, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, which) {
resolve(options.actions[which]);
}
}));
}
if (isString(options.cancelButtonText)) {
alert_5.setNegativeButton(options.cancelButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
resolve(options.cancelButtonText);
}
}));
}
alert_5.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
onDismiss: function() {
if (isString(options.cancelButtonText)) {
resolve(options.cancelButtonText);
} else {
resolve("");
}
}
}));
showDialog(alert_5);
} catch (ex) {
reject(ex);
}
});
}
exports.action = action;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
exports.STRING = "string";
exports.PROMPT = "Prompt";
exports.CONFIRM = "Confirm";
exports.ALERT = "Alert";
exports.LOGIN = "Login";
exports.OK = "OK";
exports.CANCEL = "Cancel";
var inputType;
(function(inputType) {
inputType.text = "text";
inputType.password = "password";
inputType.email = "email";
})(inputType = exports.inputType || (exports.inputType = {}));
var frame;
function getCurrentPage() {
if (!frame) {
frame = __webpack_require__(10);
}
var topmostFrame = frame.topmost();
if (topmostFrame) {
return topmostFrame.currentPage;
}
return undefined;
}
exports.getCurrentPage = getCurrentPage;
function applySelectors(view) {
var currentPage = getCurrentPage();
if (currentPage) {
var styleScope = currentPage._getStyleScope();
if (styleScope) {
styleScope.applySelectors(view);
}
}
}
var buttonColor;
var buttonBackgroundColor;
function getButtonColors() {
var Button = __webpack_require__(67).Button;
var btn = new Button();
applySelectors(btn);
buttonColor = btn.color;
buttonBackgroundColor = btn.backgroundColor;
btn.onUnloaded();
}
function getButtonColor() {
if (!buttonColor) {
getButtonColors();
}
return buttonColor;
}
exports.getButtonColor = getButtonColor;
function getButtonBackgroundColor() {
if (!buttonBackgroundColor) {
getButtonColors();
}
return buttonBackgroundColor;
}
exports.getButtonBackgroundColor = getButtonBackgroundColor;
var textFieldColor;
function getTextFieldColor() {
if (!textFieldColor) {
var TextField = __webpack_require__(74).TextField;
var tf = new TextField();
applySelectors(tf);
textFieldColor = tf.color;
tf.onUnloaded();
}
return textFieldColor;
}
exports.getTextFieldColor = getTextFieldColor;
var labelColor;
function getLabelColor() {
if (!labelColor) {
var Label = __webpack_require__(78).Label;
var lbl = new Label();
applySelectors(lbl);
labelColor = lbl.color;
lbl.onUnloaded();
}
return labelColor;
}
exports.getLabelColor = getLabelColor;
function isDialogOptions(arg) {
return arg && (arg.message || arg.title);
}
exports.isDialogOptions = isDialogOptions;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var frame_common_1 = __webpack_require__(11);
var constants_1 = __webpack_require__(61);
var transitionModule = __webpack_require__(62);
__export(__webpack_require__(11));
var HIDDEN = "_hidden";
var INTENT_EXTRA = "com.tns.activity";
var FRAMEID = "_frameId";
var CALLBACKS = "_callbacks";
var navDepth = -1;
var fragmentId = -1;
var activityInitialized = false;
function onFragmentShown(fragment) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("SHOWN " + fragment, frame_common_1.traceCategories.NativeLifecycle);
}
var callbacks = fragment[CALLBACKS];
if (callbacks.clearHistory) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite(fragment + " has been shown, but it is being cleared from history. Returning.", frame_common_1.traceCategories.NativeLifecycle);
}
return null;
}
var frame = callbacks.frame;
var entry = callbacks.entry;
var page = entry.resolvedPage;
page._fragmentTag = entry.fragmentTag;
var currentNavigationContext;
var navigationQueue = frame._navigationQueue;
for (var i = 0; i < navigationQueue.length; i++) {
if (navigationQueue[i].entry === entry) {
currentNavigationContext = navigationQueue[i];
break;
}
}
var isBack = currentNavigationContext ? currentNavigationContext.isBackNavigation : false;
if (page.parent !== frame) {
frame._addView(page);
}
if (!frame.isLoaded) {
frame._currentEntry = entry;
frame.onLoaded();
}
transitionModule._onFragmentShown(fragment, isBack);
}
function onFragmentHidden(fragment, destroyed) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("HIDDEN " + fragment + "; destroyed: " + destroyed, frame_common_1.traceCategories.NativeLifecycle);
}
var callbacks = fragment[CALLBACKS];
var isBack = callbacks.entry.isBack;
callbacks.entry.isBack = undefined;
callbacks.entry.resolvedPage._fragmentTag = undefined;
transitionModule._onFragmentHidden(fragment, isBack, destroyed);
}
var Frame = function(_super) {
__extends(Frame, _super);
function Frame() {
var _this = _super.call(this) || this;
_this._containerViewId = -1;
_this._android = new AndroidFrame(_this);
return _this;
}
Object.defineProperty(Frame, "defaultAnimatedNavigation", {
get: function() {
return frame_common_1.FrameBase.defaultAnimatedNavigation;
},
set: function(value) {
frame_common_1.FrameBase.defaultAnimatedNavigation = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame, "defaultTransition", {
get: function() {
return frame_common_1.FrameBase.defaultTransition;
},
set: function(value) {
frame_common_1.FrameBase.defaultTransition = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "containerViewId", {
get: function() {
return this._containerViewId;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Frame.prototype._navigateCore = function(backstackEntry) {
_super.prototype._navigateCore.call(this, backstackEntry);
var activity = this._android.activity;
if (!activity) {
var currentActivity = this._android.currentActivity;
if (currentActivity) {
startActivity(currentActivity, this._android.frameId);
}
this._delayedNavigationEntry = backstackEntry;
return;
}
var manager = activity.getFragmentManager();
var currentFragment;
if (this._currentEntry) {
this._currentEntry.isNavigation = true;
currentFragment = manager.findFragmentByTag(this._currentEntry.fragmentTag);
}
var clearHistory = backstackEntry.entry.clearHistory;
if (clearHistory) {
navDepth = -1;
}
navDepth++;
fragmentId++;
var newFragmentTag = "fragment" + fragmentId + "[" + navDepth + "]";
ensureFragmentClass();
var newFragment = new fragmentClass();
var args = new android.os.Bundle();
args.putInt(FRAMEID, this._android.frameId);
newFragment.setArguments(args);
setFragmentCallbacks(newFragment);
var callbacks = newFragment[CALLBACKS];
callbacks.frame = this;
callbacks.entry = backstackEntry;
backstackEntry.isNavigation = true;
backstackEntry.fragmentTag = newFragmentTag;
backstackEntry.navDepth = navDepth;
var fragmentTransaction = manager.beginTransaction();
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("BEGIN TRANSACTION " + fragmentTransaction, frame_common_1.traceCategories.Navigation);
}
var animated = this._getIsAnimatedNavigation(backstackEntry.entry);
var navigationTransition = this._getNavigationTransition(backstackEntry.entry);
if (currentFragment) {
transitionModule._clearForwardTransitions(currentFragment);
if (animated && navigationTransition) {
transitionModule._setAndroidFragmentTransitions(this.android.cachePagesOnNavigate, navigationTransition, currentFragment, newFragment, fragmentTransaction);
}
}
var length = manager.getBackStackEntryCount();
var emptyNativeBackStack = clearHistory && length > 0;
if (emptyNativeBackStack) {
for (var i = 0; i < length; i++) {
var fragmentToRemove = manager.findFragmentByTag(manager.getBackStackEntryAt(i).getName());
Frame._clearHistory(fragmentToRemove);
}
if (currentFragment) {
transitionModule._prepareCurrentFragmentForClearHistory(currentFragment);
}
var firstEntryName = manager.getBackStackEntryAt(0).getName();
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("POP BACK STACK " + firstEntryName, frame_common_1.traceCategories.Navigation);
}
manager.popBackStackImmediate(firstEntryName, android.app.FragmentManager.POP_BACK_STACK_INCLUSIVE);
}
if (currentFragment && !emptyNativeBackStack) {
if (this.android.cachePagesOnNavigate && !clearHistory) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("\tHIDE " + currentFragment, frame_common_1.traceCategories.Navigation);
}
fragmentTransaction.hide(currentFragment);
} else {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("\tREMOVE " + currentFragment, frame_common_1.traceCategories.Navigation);
}
fragmentTransaction.remove(currentFragment);
}
}
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("\tADD " + newFragmentTag + "<" + callbacks.entry.resolvedPage + ">", frame_common_1.traceCategories.Navigation);
}
fragmentTransaction.add(this.containerViewId, newFragment, newFragmentTag);
if (this.backStack.length > 0 && currentFragment && !clearHistory) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("\tADD TO BACK STACK " + currentFragment, frame_common_1.traceCategories.Navigation);
}
fragmentTransaction.addToBackStack(this._currentEntry.fragmentTag);
}
if (currentFragment) {
ensureAnimationFixed();
var trans = void 0;
if (this.android.cachePagesOnNavigate && animationFixed < 0 && !navigationTransition) {
trans = android.app.FragmentTransaction.TRANSIT_NONE;
} else {
trans = animated ? android.app.FragmentTransaction.TRANSIT_FRAGMENT_OPEN : android.app.FragmentTransaction.TRANSIT_NONE;
}
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("\tSET TRANSITION " + (trans === 0 ? "NONE" : "OPEN"), frame_common_1.traceCategories.Navigation);
}
fragmentTransaction.setTransition(trans);
}
fragmentTransaction.commit();
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("END TRANSACTION " + fragmentTransaction, frame_common_1.traceCategories.Navigation);
}
};
Frame._clearHistory = function(fragment) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("CLEAR HISTORY FOR " + fragment, frame_common_1.traceCategories.Navigation);
}
var callbacks = fragment[CALLBACKS];
callbacks.clearHistory = true;
transitionModule._clearBackwardTransitions(fragment);
transitionModule._clearForwardTransitions(fragment);
transitionModule._removePageNativeViewFromAndroidParent(callbacks.entry.resolvedPage);
};
Frame.prototype._goBackCore = function(backstackEntry) {
_super.prototype._goBackCore.call(this, backstackEntry);
navDepth = backstackEntry.navDepth;
backstackEntry.isNavigation = true;
if (this._currentEntry) {
this._currentEntry.isBack = true;
this._currentEntry.isNavigation = true;
}
var manager = this._android.activity.getFragmentManager();
if (manager.getBackStackEntryCount() > 0) {
manager.popBackStack(backstackEntry.fragmentTag, android.app.FragmentManager.POP_BACK_STACK_INCLUSIVE);
}
};
Frame.prototype.createNativeView = function() {
var root = new org.nativescript.widgets.ContentLayout(this._context);
if (this._containerViewId < 0) {
this._containerViewId = android.view.View.generateViewId();
}
return root;
};
Frame.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
this._android.rootViewGroup = this.nativeView;
this._android.rootViewGroup.setId(this._containerViewId);
};
Frame.prototype.disposeNativeView = function() {
this._android.rootViewGroup = null;
_super.prototype.disposeNativeView.call(this);
};
Frame.prototype._popFromFrameStack = function() {
if (!this._isInFrameStack) {
return;
}
_super.prototype._popFromFrameStack.call(this);
if (this._android.hasOwnActivity) {
this._android.activity.finish();
}
};
Frame.prototype._printNativeBackStack = function() {
if (!this._android.activity) {
return;
}
var manager = this._android.activity.getFragmentManager();
var length = manager.getBackStackEntryCount();
var i = length - 1;
console.log("Fragment Manager Back Stack: ");
while (i >= 0) {
var fragment = manager.findFragmentByTag(manager.getBackStackEntryAt(i--).getName());
console.log("\t" + fragment);
}
};
Frame.prototype._getNavBarVisible = function(page) {
if (page.actionBarHidden !== undefined) {
return !page.actionBarHidden;
}
if (this._android && this._android.showActionBar !== undefined) {
return this._android.showActionBar;
}
return true;
};
Frame.prototype._processNavigationContext = function(navigationContext) {
var _this = this;
var activity = this._android.activity;
if (activity) {
var isForegroundActivity = activity === frame_common_1.application.android.foregroundActivity;
var isPaused = frame_common_1.application.android.paused;
if (activity && !isForegroundActivity || isForegroundActivity && isPaused) {
var weakActivity_1 = new WeakRef(activity);
var resume_1 = function(args) {
var weakActivityInstance = weakActivity_1.get();
var isCurrent = args.activity === weakActivityInstance;
if (!weakActivityInstance) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("Frame _processNavigationContext: Drop For Activity GC-ed", frame_common_1.traceCategories.Navigation);
}
unsubscribe_1();
return;
}
if (isCurrent) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("Frame _processNavigationContext: Activity.Resumed, Continue", frame_common_1.traceCategories.Navigation);
}
_super.prototype._processNavigationContext.call(_this, navigationContext);
unsubscribe_1();
}
};
var unsubscribe_1 = function() {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("Frame _processNavigationContext: Unsubscribe from Activity.Resumed", frame_common_1.traceCategories.Navigation);
}
frame_common_1.application.android.off(frame_common_1.application.AndroidApplication.activityResumedEvent, resume_1);
frame_common_1.application.android.off(frame_common_1.application.AndroidApplication.activityStoppedEvent, unsubscribe_1);
frame_common_1.application.android.off(frame_common_1.application.AndroidApplication.activityDestroyedEvent, unsubscribe_1);
};
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("Frame._processNavigationContext: Subscribe for Activity.Resumed", frame_common_1.traceCategories.Navigation);
}
frame_common_1.application.android.on(frame_common_1.application.AndroidApplication.activityResumedEvent, resume_1);
frame_common_1.application.android.on(frame_common_1.application.AndroidApplication.activityStoppedEvent, unsubscribe_1);
frame_common_1.application.android.on(frame_common_1.application.AndroidApplication.activityDestroyedEvent, unsubscribe_1);
return;
}
}
_super.prototype._processNavigationContext.call(this, navigationContext);
};
return Frame;
}(frame_common_1.FrameBase);
exports.Frame = Frame;
var framesCounter = 0;
var framesCache = new Array();
var AndroidFrame = function(_super) {
__extends(AndroidFrame, _super);
function AndroidFrame(owner) {
var _this = _super.call(this) || this;
_this.hasOwnActivity = false;
_this._showActionBar = true;
_this._owner = owner;
_this.frameId = framesCounter++;
framesCache.push(new WeakRef(_this));
return _this;
}
Object.defineProperty(AndroidFrame.prototype, "showActionBar", {
get: function() {
return this._showActionBar;
},
set: function(value) {
if (this._showActionBar !== value) {
this._showActionBar = value;
if (this.owner.currentPage) {
this.owner.currentPage.actionBar.update();
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "activity", {
get: function() {
var activity = this.owner._context;
if (activity) {
return activity;
}
var currView = this._owner.parent;
while (currView) {
if (currView instanceof Frame) {
return currView.android.activity;
}
currView = currView.parent;
}
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "actionBar", {
get: function() {
var activity = this.currentActivity;
if (!activity) {
return undefined;
}
var bar = activity.getActionBar();
if (!bar) {
return undefined;
}
return bar;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "currentActivity", {
get: function() {
var activity = this.activity;
if (activity) {
return activity;
}
var frames = frame_common_1.stack();
for (var length_1 = frames.length, i = length_1 - 1; i >= 0; i--) {
activity = frames[i].android.activity;
if (activity) {
return activity;
}
}
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "owner", {
get: function() {
return this._owner;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "cachePagesOnNavigate", {
get: function() {
return this._cachePagesOnNavigate;
},
set: function(value) {
if (this._cachePagesOnNavigate !== value) {
if (this._owner.backStack.length > 0) {
this._owner._printFrameBackStack();
this._owner._printNativeBackStack();
console.log("currentPage: " + this._owner.currentPage);
throw new Error("Cannot set cachePagesOnNavigate if there are items in the back stack.");
}
this._cachePagesOnNavigate = value;
}
},
enumerable: true,
configurable: true
});
AndroidFrame.prototype.canGoBack = function() {
if (!this.activity) {
return false;
}
return this.activity.getIntent().getAction() !== android.content.Intent.ACTION_MAIN;
};
AndroidFrame.prototype.fragmentForPage = function(page) {
if (!page) {
return undefined;
}
var tag = page._fragmentTag;
if (tag) {
var manager = this.activity.getFragmentManager();
return manager.findFragmentByTag(tag);
}
return undefined;
};
return AndroidFrame;
}(frame_common_1.Observable);
function findPageForFragment(fragment, frame) {
var fragmentTag = fragment.getTag();
var page;
var entry;
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("Finding page for " + fragmentTag + ".", frame_common_1.traceCategories.NativeLifecycle);
}
if (fragmentTag === constants_1.DIALOG_FRAGMENT_TAG) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("No need to find page for dialog fragment.", frame_common_1.traceCategories.NativeLifecycle);
}
return;
}
if (frame._currentEntry && frame._currentEntry.fragmentTag === fragmentTag) {
page = frame.currentPage;
entry = frame._currentEntry;
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("Current page matches fragment " + fragmentTag + ".", frame_common_1.traceCategories.NativeLifecycle);
}
} else {
var backStack = frame.backStack;
for (var i = 0; i < backStack.length; i++) {
if (backStack[i].fragmentTag === fragmentTag) {
entry = backStack[i];
break;
}
}
if (entry) {
page = entry.resolvedPage;
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("Found " + page + " for " + fragmentTag, frame_common_1.traceCategories.NativeLifecycle);
}
}
}
if (page) {
var callbacks = fragment[CALLBACKS];
callbacks.frame = frame;
callbacks.entry = entry;
} else {
throw new Error("Could not find a page for " + fragmentTag + ".");
}
}
function startActivity(activity, frameId) {
var intent = new android.content.Intent(activity, activity.getClass());
intent.setAction(android.content.Intent.ACTION_DEFAULT);
intent.putExtra(INTENT_EXTRA, frameId);
activity.startActivity(intent);
}
function getFrameById(frameId) {
for (var i = 0; i < framesCache.length; i++) {
var aliveFrame = framesCache[i].get();
if (aliveFrame && aliveFrame.frameId === frameId) {
return aliveFrame.owner;
}
}
return null;
}
var animationFixed;
function ensureAnimationFixed() {
if (!animationFixed) {
animationFixed = android.os.Build.VERSION.SDK_INT >= 19 ? 1 : -1;
}
}
function ensureFragmentClass() {
if (fragmentClass) {
return;
}
__webpack_require__(66);
if (!fragmentClass) {
throw new Error("Failed to initialize the extended android.app.Fragment class");
}
}
var fragmentClass;
function setFragmentClass(clazz) {
if (fragmentClass) {
throw new Error("Fragment class already initialized");
}
fragmentClass = clazz;
}
exports.setFragmentClass = setFragmentClass;
var FragmentCallbacksImplementation = function() {
function FragmentCallbacksImplementation() {}
FragmentCallbacksImplementation.prototype.onHiddenChanged = function(fragment, hidden, superFunc) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite(fragment + ".onHiddenChanged(" + hidden + ")", frame_common_1.traceCategories.NativeLifecycle);
}
superFunc.call(fragment, hidden);
if (hidden) {
onFragmentHidden(fragment, false);
} else {
onFragmentShown(fragment);
}
};
FragmentCallbacksImplementation.prototype.onCreateAnimator = function(fragment, transit, enter, nextAnim, superFunc) {
var nextAnimString;
switch (nextAnim) {
case -10:
nextAnimString = "enter";
break;

case -20:
nextAnimString = "exit";
break;

case -30:
nextAnimString = "popEnter";
break;

case -40:
nextAnimString = "popExit";
break;
}
var animator = transitionModule._onFragmentCreateAnimator(fragment, nextAnim);
if (!animator) {
animator = superFunc.call(fragment, transit, enter, nextAnim);
}
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite(fragment + ".onCreateAnimator(" + transit + ", " + (enter ? "enter" : "exit") + ", " + nextAnimString + "): " + animator, frame_common_1.traceCategories.NativeLifecycle);
}
return animator;
};
FragmentCallbacksImplementation.prototype.onCreate = function(fragment, savedInstanceState, superFunc) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite(fragment + ".onCreate(" + savedInstanceState + ")", frame_common_1.traceCategories.NativeLifecycle);
}
superFunc.call(fragment, savedInstanceState);
if (!this.entry) {
var frameId = fragment.getArguments().getInt(FRAMEID);
var frame = getFrameById(frameId);
if (frame) {
this.frame = frame;
} else {
throw new Error("Cannot find Frame for " + fragment);
}
findPageForFragment(fragment, this.frame);
}
};
FragmentCallbacksImplementation.prototype.onCreateView = function(fragment, inflater, container, savedInstanceState, superFunc) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite(fragment + ".onCreateView(inflater, container, " + savedInstanceState + ")", frame_common_1.traceCategories.NativeLifecycle);
}
var entry = this.entry;
var page = entry.resolvedPage;
try {
if (savedInstanceState && savedInstanceState.getBoolean(HIDDEN, false)) {
fragment.getFragmentManager().beginTransaction().hide(fragment).commit();
this.frame._addView(page);
} else {
onFragmentShown(fragment);
}
} catch (ex) {
var label = new android.widget.TextView(container.getContext());
label.setText(ex.message + ", " + ex.stackTrace);
return label;
}
return page.nativeView;
};
FragmentCallbacksImplementation.prototype.onSaveInstanceState = function(fragment, outState, superFunc) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite(fragment + ".onSaveInstanceState(" + outState + ")", frame_common_1.traceCategories.NativeLifecycle);
}
superFunc.call(fragment, outState);
if (fragment.isHidden()) {
outState.putBoolean(HIDDEN, true);
}
};
FragmentCallbacksImplementation.prototype.onDestroyView = function(fragment, superFunc) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite(fragment + ".onDestroyView()", frame_common_1.traceCategories.NativeLifecycle);
}
superFunc.call(fragment);
onFragmentHidden(fragment, true);
};
FragmentCallbacksImplementation.prototype.onDestroy = function(fragment, superFunc) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite(fragment + ".onDestroy()", frame_common_1.traceCategories.NativeLifecycle);
}
superFunc.call(fragment);
};
FragmentCallbacksImplementation.prototype.toStringOverride = function(fragment, superFunc) {
return fragment.getTag() + "<" + (this.entry ? this.entry.resolvedPage : "") + ">";
};
return FragmentCallbacksImplementation;
}();
var ActivityCallbacksImplementation = function() {
function ActivityCallbacksImplementation() {}
ActivityCallbacksImplementation.prototype.onCreate = function(activity, savedInstanceState, superFunc) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("Activity.onCreate(" + savedInstanceState + ")", frame_common_1.traceCategories.NativeLifecycle);
}
var app = frame_common_1.application.android;
var intent = activity.getIntent();
var launchArgs = {
eventName: frame_common_1.application.launchEvent,
object: app,
android: intent
};
frame_common_1.application.notify(launchArgs);
var frameId = -1;
var rootView = launchArgs.root;
var extras = intent.getExtras();
if (extras) {
frameId = extras.getInt(INTENT_EXTRA, -1);
}
if (savedInstanceState && frameId < 0) {
frameId = savedInstanceState.getInt(INTENT_EXTRA, -1);
}
var frame;
var navParam;
if (frameId >= 0) {
rootView = getFrameById(frameId);
}
if (!rootView) {
navParam = frame_common_1.application.getMainEntry();
if (navParam) {
frame = new Frame();
} else {
throw new Error("A Frame must be used to navigate to a Page.");
}
rootView = frame;
}
var isRestart = !!savedInstanceState && activityInitialized;
superFunc.call(activity, isRestart ? savedInstanceState : null);
this._rootView = rootView;
rootView._setupUI(activity);
activity.setContentView(rootView.nativeView, new org.nativescript.widgets.CommonLayoutParams());
if (frame) {
frame.navigate(navParam);
}
activityInitialized = true;
};
ActivityCallbacksImplementation.prototype.onSaveInstanceState = function(activity, outState, superFunc) {
superFunc.call(activity, outState);
var view = this._rootView;
if (view instanceof Frame) {
outState.putInt(INTENT_EXTRA, view.android.frameId);
}
};
ActivityCallbacksImplementation.prototype.onStart = function(activity, superFunc) {
superFunc.call(activity);
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("NativeScriptActivity.onStart();", frame_common_1.traceCategories.NativeLifecycle);
}
var rootView = this._rootView;
if (rootView && !rootView.isLoaded) {
rootView.onLoaded();
}
};
ActivityCallbacksImplementation.prototype.onStop = function(activity, superFunc) {
superFunc.call(activity);
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("NativeScriptActivity.onStop();", frame_common_1.traceCategories.NativeLifecycle);
}
var rootView = this._rootView;
if (rootView && rootView.isLoaded) {
rootView.onUnloaded();
}
};
ActivityCallbacksImplementation.prototype.onDestroy = function(activity, superFunc) {
var rootView = this._rootView;
if (rootView && rootView._context) {
rootView._tearDownUI(true);
}
superFunc.call(activity);
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("NativeScriptActivity.onDestroy();", frame_common_1.traceCategories.NativeLifecycle);
}
var exitArgs = {
eventName: frame_common_1.application.exitEvent,
object: frame_common_1.application.android,
android: activity
};
frame_common_1.application.notify(exitArgs);
};
ActivityCallbacksImplementation.prototype.onBackPressed = function(activity, superFunc) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("NativeScriptActivity.onBackPressed;", frame_common_1.traceCategories.NativeLifecycle);
}
var args = {
eventName: "activityBackPressed",
object: frame_common_1.application.android,
activity: activity,
cancel: false
};
frame_common_1.application.android.notify(args);
if (args.cancel) {
return;
}
if (!frame_common_1.goBack()) {
superFunc.call(activity);
}
};
ActivityCallbacksImplementation.prototype.onRequestPermissionsResult = function(activity, requestCode, permissions, grantResults, superFunc) {
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("NativeScriptActivity.onRequestPermissionsResult;", frame_common_1.traceCategories.NativeLifecycle);
}
frame_common_1.application.android.notify({
eventName: "activityRequestPermissions",
object: frame_common_1.application.android,
activity: activity,
requestCode: requestCode,
permissions: permissions,
grantResults: grantResults
});
};
ActivityCallbacksImplementation.prototype.onActivityResult = function(activity, requestCode, resultCode, data, superFunc) {
superFunc.call(activity, requestCode, resultCode, data);
if (frame_common_1.traceEnabled()) {
frame_common_1.traceWrite("NativeScriptActivity.onActivityResult(" + requestCode + ", " + resultCode + ", " + data + ")", frame_common_1.traceCategories.NativeLifecycle);
}
frame_common_1.application.android.notify({
eventName: "activityResult",
object: frame_common_1.application.android,
activity: activity,
requestCode: requestCode,
resultCode: resultCode,
intent: data
});
};
return ActivityCallbacksImplementation;
}();
function setActivityCallbacks(activity) {
activity[CALLBACKS] = new ActivityCallbacksImplementation();
}
exports.setActivityCallbacks = setActivityCallbacks;
function setFragmentCallbacks(fragment) {
fragment[CALLBACKS] = new FragmentCallbacksImplementation();
}
exports.setFragmentCallbacks = setFragmentCallbacks;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
var file_name_resolver_1 = __webpack_require__(56);
var file_system_1 = __webpack_require__(19);
var builder_1 = __webpack_require__(57);
var application = __webpack_require__(3);
exports.application = application;
__export(__webpack_require__(12));
function onLivesync(args) {
setTimeout(function() {
var g = global;
if (g.errorPage) {
g.errorPage.closeModal();
g.errorPage = undefined;
}
try {
g.__onLiveSyncCore();
} catch (ex) {
g.errorPage = builder_1.parse('<Page><ScrollView><Label text="' + ex + '" textWrap="true" style="color: red;" /></ScrollView></Page>');
g.errorPage.showModal();
}
});
}
application.on("livesync", onLivesync);
var frameStack = [];
function buildEntryFromArgs(arg) {
var entry;
if (typeof arg === "string") {
entry = {
moduleName: arg
};
} else if (typeof arg === "function") {
entry = {
create: arg
};
} else {
entry = arg;
}
return entry;
}
function reloadPage() {
var frame = topmost();
if (frame) {
if (frame.currentPage && frame.currentPage.modal) {
frame.currentPage.modal.closeModal();
}
var currentEntry = frame._currentEntry.entry;
var newEntry = {
animated: false,
clearHistory: true,
context: currentEntry.context,
create: currentEntry.create,
moduleName: currentEntry.moduleName,
backstackVisible: currentEntry.backstackVisible
};
frame.navigate(newEntry);
}
}
exports.reloadPage = reloadPage;
global.__onLiveSyncCore = reloadPage;
function resolvePageFromEntry(entry) {
var page;
if (entry.create) {
page = entry.create();
if (!page) {
throw new Error("Failed to create Page with entry.create() function.");
}
page._refreshCss();
} else if (entry.moduleName) {
var currentAppPath = file_system_1.knownFolders.currentApp().path;
var moduleNamePath = file_system_1.path.join(currentAppPath, entry.moduleName);
view_1.traceWrite("frame module path: " + moduleNamePath, view_1.traceCategories.Navigation);
view_1.traceWrite("frame module module: " + entry.moduleName, view_1.traceCategories.Navigation);
var moduleExports = void 0;
if (global.moduleExists(entry.moduleName)) {
if (view_1.traceEnabled()) {
view_1.traceWrite("Loading pre-registered JS module: " + entry.moduleName, view_1.traceCategories.Navigation);
}
moduleExports = global.loadModule(entry.moduleName);
} else {
var moduleExportsResolvedPath = file_name_resolver_1.resolveFileName(moduleNamePath, "js");
if (moduleExportsResolvedPath) {
if (view_1.traceEnabled()) {
view_1.traceWrite("Loading JS file: " + moduleExportsResolvedPath, view_1.traceCategories.Navigation);
}
moduleExportsResolvedPath = moduleExportsResolvedPath.substr(0, moduleExportsResolvedPath.length - 3);
moduleExports = global.loadModule(moduleExportsResolvedPath);
}
}
if (moduleExports && moduleExports.createPage) {
if (view_1.traceEnabled()) {
view_1.traceWrite("Calling createPage()", view_1.traceCategories.Navigation);
}
page = moduleExports.createPage();
var cssFileName = file_name_resolver_1.resolveFileName(moduleNamePath, "css");
if (cssFileName) {
page.addCssFile(cssFileName);
}
} else {
page = pageFromBuilder(moduleNamePath, moduleExports);
}
if (!page) {
throw new Error("Failed to load Page from entry.moduleName: " + entry.moduleName);
}
}
return page;
}
exports.resolvePageFromEntry = resolvePageFromEntry;
function pageFromBuilder(moduleNamePath, moduleExports) {
var page;
var fileName = file_name_resolver_1.resolveFileName(moduleNamePath, "xml");
if (fileName) {
if (view_1.traceEnabled()) {
view_1.traceWrite("Loading XML file: " + fileName, view_1.traceCategories.Navigation);
}
page = builder_1.loadPage(moduleNamePath, fileName, moduleExports);
}
return page;
}
var FrameBase = function(_super) {
__extends(FrameBase, _super);
function FrameBase() {
var _this = _super.call(this) || this;
_this._isInFrameStack = false;
_this._backStack = new Array();
_this._navigationQueue = new Array();
return _this;
}
FrameBase.prototype.canGoBack = function() {
return this._backStack.length > 0;
};
FrameBase.prototype.goBack = function(backstackEntry) {
if (view_1.traceEnabled()) {
view_1.traceWrite("GO BACK", view_1.traceCategories.Navigation);
}
if (!this.canGoBack()) {
return;
}
if (!backstackEntry) {
backstackEntry = this._backStack.pop();
} else {
var backIndex = this._backStack.indexOf(backstackEntry);
if (backIndex < 0) {
return;
}
this._backStack.splice(backIndex);
}
var navigationContext = {
entry: backstackEntry,
isBackNavigation: true
};
this._navigationQueue.push(navigationContext);
if (this._navigationQueue.length === 1) {
this._processNavigationContext(navigationContext);
} else {
if (view_1.traceEnabled()) {
view_1.traceWrite("Going back scheduled", view_1.traceCategories.Navigation);
}
}
};
FrameBase.prototype.navigate = function(param) {
if (view_1.traceEnabled()) {
view_1.traceWrite("NAVIGATE", view_1.traceCategories.Navigation);
}
var entry = buildEntryFromArgs(param);
var page = resolvePageFromEntry(entry);
this._pushInFrameStack();
var backstackEntry = {
entry: entry,
resolvedPage: page,
navDepth: undefined,
fragmentTag: undefined,
isBack: undefined,
isNavigation: true
};
var navigationContext = {
entry: backstackEntry,
isBackNavigation: false
};
this._navigationQueue.push(navigationContext);
if (this._navigationQueue.length === 1) {
this._processNavigationContext(navigationContext);
} else {
if (view_1.traceEnabled()) {
view_1.traceWrite("Navigation scheduled", view_1.traceCategories.Navigation);
}
}
};
FrameBase.prototype._processNavigationQueue = function(page) {
if (this._navigationQueue.length === 0) {
return;
}
var entry = this._navigationQueue[0].entry;
var currentNavigationPage = entry.resolvedPage;
if (page !== currentNavigationPage) {
throw new Error("Corrupted navigation stack; page: " + page + "; currentNavigationPage: " + currentNavigationPage);
}
this._navigationQueue.shift();
if (this._navigationQueue.length > 0) {
var navigationContext = this._navigationQueue[0];
this._processNavigationContext(navigationContext);
}
this._updateActionBar();
};
FrameBase.prototype.navigationQueueIsEmpty = function() {
return this._navigationQueue.length === 0;
};
FrameBase._isEntryBackstackVisible = function(entry) {
if (!entry) {
return false;
}
var backstackVisibleValue = entry.entry.backstackVisible;
var backstackHidden = backstackVisibleValue !== undefined && !backstackVisibleValue;
return !backstackHidden;
};
FrameBase.prototype._updateActionBar = function(page, disableNavBarAnimation) {};
FrameBase.prototype._processNavigationContext = function(navigationContext) {
if (navigationContext.isBackNavigation) {
this.performGoBack(navigationContext);
} else {
this.performNavigation(navigationContext);
}
};
FrameBase.prototype.performNavigation = function(navigationContext) {
var navContext = navigationContext.entry;
if (navigationContext.entry.entry.clearHistory) {
this._backStack.length = 0;
} else if (FrameBase._isEntryBackstackVisible(this._currentEntry)) {
this._backStack.push(this._currentEntry);
}
this._onNavigatingTo(navContext, navigationContext.isBackNavigation);
this._navigateCore(navContext);
};
FrameBase.prototype.performGoBack = function(navigationContext) {
var navContext = navigationContext.entry;
this._onNavigatingTo(navContext, navigationContext.isBackNavigation);
this._goBackCore(navContext);
};
FrameBase.prototype._goBackCore = function(backstackEntry) {
if (view_1.traceEnabled()) {
view_1.traceWrite("GO BACK CORE(" + this._backstackEntryTrace(backstackEntry) + "); currentPage: " + this.currentPage, view_1.traceCategories.Navigation);
}
};
FrameBase.prototype._navigateCore = function(backstackEntry) {
if (view_1.traceEnabled()) {
view_1.traceWrite("NAVIGATE CORE(" + this._backstackEntryTrace(backstackEntry) + "); currentPage: " + this.currentPage, view_1.traceCategories.Navigation);
}
};
FrameBase.prototype._onNavigatingTo = function(backstackEntry, isBack) {
if (this.currentPage) {
this.currentPage.onNavigatingFrom(isBack);
}
backstackEntry.resolvedPage.onNavigatingTo(backstackEntry.entry.context, isBack, backstackEntry.entry.bindingContext);
};
Object.defineProperty(FrameBase.prototype, "animated", {
get: function() {
return this._animated;
},
set: function(value) {
this._animated = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FrameBase.prototype, "transition", {
get: function() {
return this._transition;
},
set: function(value) {
this._transition = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FrameBase.prototype, "backStack", {
get: function() {
return this._backStack.slice();
},
enumerable: true,
configurable: true
});
Object.defineProperty(FrameBase.prototype, "currentPage", {
get: function() {
if (this._currentEntry) {
return this._currentEntry.resolvedPage;
}
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FrameBase.prototype, "currentEntry", {
get: function() {
if (this._currentEntry) {
return this._currentEntry.entry;
}
return null;
},
enumerable: true,
configurable: true
});
FrameBase.prototype._pushInFrameStack = function() {
if (this._isInFrameStack) {
return;
}
frameStack.push(this);
this._isInFrameStack = true;
};
FrameBase.prototype._popFromFrameStack = function() {
if (!this._isInFrameStack) {
return;
}
var top = topmost();
if (top !== this) {
throw new Error("Cannot pop a Frame which is not at the top of the navigation stack.");
}
frameStack.pop();
this._isInFrameStack = false;
};
Object.defineProperty(FrameBase.prototype, "_childrenCount", {
get: function() {
if (this.currentPage) {
return 1;
}
return 0;
},
enumerable: true,
configurable: true
});
FrameBase.prototype.eachChildView = function(callback) {
if (this.currentPage) {
callback(this.currentPage);
}
};
FrameBase.prototype._getIsAnimatedNavigation = function(entry) {
if (entry && entry.animated !== undefined) {
return entry.animated;
}
if (this.animated !== undefined) {
return this.animated;
}
return FrameBase.defaultAnimatedNavigation;
};
FrameBase.prototype._getNavigationTransition = function(entry) {
if (entry) {
if (view_1.isIOS && entry.transitioniOS !== undefined) {
return entry.transitioniOS;
}
if (view_1.isAndroid && entry.transitionAndroid !== undefined) {
return entry.transitionAndroid;
}
if (entry.transition !== undefined) {
return entry.transition;
}
}
if (this.transition !== undefined) {
return this.transition;
}
return FrameBase.defaultTransition;
};
Object.defineProperty(FrameBase.prototype, "navigationBarHeight", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
FrameBase.prototype._getNavBarVisible = function(page) {
throw new Error();
};
FrameBase.prototype._addViewToNativeVisualTree = function(child) {
return true;
};
FrameBase.prototype._removeViewFromNativeVisualTree = function(child) {
child._isAddedToNativeVisualTree = false;
};
FrameBase.prototype._printFrameBackStack = function() {
var length = this.backStack.length;
var i = length - 1;
console.log("Frame Back Stack: ");
while (i >= 0) {
var backstackEntry = this.backStack[i--];
console.log("\t" + backstackEntry.resolvedPage);
}
};
FrameBase.prototype._backstackEntryTrace = function(b) {
var result = "" + b.resolvedPage;
var backstackVisible = FrameBase._isEntryBackstackVisible(b);
if (!backstackVisible) {
result += " | INVISIBLE";
}
if (b.entry.clearHistory) {
result += " | CLEAR HISTORY";
}
var animated = this._getIsAnimatedNavigation(b.entry);
if (!animated) {
result += " | NOT ANIMATED";
}
var t = this._getNavigationTransition(b.entry);
if (t) {
result += " | Transition[" + JSON.stringify(t) + "]";
}
return result;
};
return FrameBase;
}(view_1.CustomLayoutView);
FrameBase.androidOptionSelectedEvent = "optionSelected";
FrameBase.defaultAnimatedNavigation = true;
exports.FrameBase = FrameBase;
function topmost() {
if (frameStack.length > 0) {
return frameStack[frameStack.length - 1];
}
return undefined;
}
exports.topmost = topmost;
function goBack() {
var top = topmost();
if (top.canGoBack()) {
top.goBack();
return true;
}
if (frameStack.length > 1) {
top._popFromFrameStack();
}
return false;
}
exports.goBack = goBack;
function stack() {
return frameStack;
}
exports.stack = stack;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var background_1 = __webpack_require__(13);
var view_common_1 = __webpack_require__(27);
var style_properties_1 = __webpack_require__(28);
__export(__webpack_require__(27));
var TouchListener;
var disableUserInteractionListener;
function initializeDisabledListener() {
if (disableUserInteractionListener) {
return;
}
disableUserInteractionListener = new org.nativescript.widgets.DisableUserInteractionListener();
}
function initializeTouchListener() {
if (TouchListener) {
return;
}
var TouchListenerImpl = function(_super) {
__extends(TouchListenerImpl, _super);
function TouchListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
TouchListenerImpl.prototype.onTouch = function(view, event) {
var owner = this.owner;
for (var type in owner._gestureObservers) {
var list = owner._gestureObservers[type];
list.forEach(function(element) {
element.androidOnTouchEvent(event);
});
}
var nativeView = owner.nativeView;
if (!nativeView || !nativeView.onTouchEvent) {
return false;
}
return nativeView.onTouchEvent(event);
};
return TouchListenerImpl;
}(java.lang.Object);
TouchListenerImpl = __decorate([ Interfaces([ android.view.View.OnTouchListener ]) ], TouchListenerImpl);
TouchListener = TouchListenerImpl;
}
var View = function(_super) {
__extends(View, _super);
function View() {
return _super !== null && _super.apply(this, arguments) || this;
}
View.prototype.observe = function(type, callback, thisArg) {
_super.prototype.observe.call(this, type, callback, thisArg);
if (this.isLoaded && !this.touchListenerIsSet) {
this.setOnTouchListener();
}
};
View.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
this.setOnTouchListener();
};
View.prototype.onUnloaded = function() {
if (this.touchListenerIsSet) {
this.nativeView.setOnTouchListener(null);
this.touchListenerIsSet = false;
}
this._cancelAllAnimations();
_super.prototype.onUnloaded.call(this);
};
View.prototype.hasGestureObservers = function() {
return this._gestureObservers && Object.keys(this._gestureObservers).length > 0;
};
View.prototype.setOnTouchListener = function() {
if (this.nativeView && this.hasGestureObservers()) {
this.touchListenerIsSet = true;
if (this.nativeView.setClickable) {
this.nativeView.setClickable(true);
}
initializeTouchListener();
this.touchListener = this.touchListener || new TouchListener(this);
this.nativeView.setOnTouchListener(this.touchListener);
}
};
Object.defineProperty(View.prototype, "isLayoutRequired", {
get: function() {
return !this.isLayoutValid;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isLayoutValid", {
get: function() {
if (this.nativeView) {
return !this.nativeView.isLayoutRequested();
}
return false;
},
enumerable: true,
configurable: true
});
View.prototype.layoutNativeView = function(left, top, right, bottom) {
if (this.nativeView) {
this.nativeView.layout(left, top, right, bottom);
}
};
View.prototype.requestLayout = function() {
_super.prototype.requestLayout.call(this);
if (this.nativeView) {
return this.nativeView.requestLayout();
}
};
View.prototype.measure = function(widthMeasureSpec, heightMeasureSpec) {
_super.prototype.measure.call(this, widthMeasureSpec, heightMeasureSpec);
this.onMeasure(widthMeasureSpec, heightMeasureSpec);
};
View.prototype.layout = function(left, top, right, bottom) {
_super.prototype.layout.call(this, left, top, right, bottom);
this.onLayout(left, top, right, bottom);
};
View.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var view = this.nativeView;
if (view) {
view.measure(widthMeasureSpec, heightMeasureSpec);
this.setMeasuredDimension(view.getMeasuredWidth(), view.getMeasuredHeight());
}
};
View.prototype.onLayout = function(left, top, right, bottom) {
var view = this.nativeView;
if (view) {
this.layoutNativeView(left, top, right, bottom);
}
};
View.prototype._getCurrentLayoutBounds = function() {
if (this.nativeView && !this.isCollapsed) {
return {
left: this.nativeView.getLeft(),
top: this.nativeView.getTop(),
right: this.nativeView.getRight(),
bottom: this.nativeView.getBottom()
};
} else {
return {
left: 0,
top: 0,
right: 0,
bottom: 0
};
}
};
View.prototype.getMeasuredWidth = function() {
if (this.nativeView) {
return this.nativeView.getMeasuredWidth();
}
return _super.prototype.getMeasuredWidth.call(this);
};
View.prototype.getMeasuredHeight = function() {
if (this.nativeView) {
return this.nativeView.getMeasuredHeight();
}
return _super.prototype.getMeasuredHeight.call(this);
};
View.prototype.focus = function() {
if (this.nativeView) {
return this.nativeView.requestFocus();
}
return false;
};
View.prototype.getLocationInWindow = function() {
if (!this.nativeView || !this.nativeView.getWindowToken()) {
return undefined;
}
var nativeArray = Array.create("int", 2);
this.nativeView.getLocationInWindow(nativeArray);
return {
x: view_common_1.layout.toDeviceIndependentPixels(nativeArray[0]),
y: view_common_1.layout.toDeviceIndependentPixels(nativeArray[1])
};
};
View.prototype.getLocationOnScreen = function() {
if (!this.nativeView || !this.nativeView.getWindowToken()) {
return undefined;
}
var nativeArray = Array.create("int", 2);
this.nativeView.getLocationOnScreen(nativeArray);
return {
x: view_common_1.layout.toDeviceIndependentPixels(nativeArray[0]),
y: view_common_1.layout.toDeviceIndependentPixels(nativeArray[1])
};
};
View.prototype.getLocationRelativeTo = function(otherView) {
if (!this.nativeView || !this.nativeView.getWindowToken() || !otherView.nativeView || !otherView.nativeView.getWindowToken() || this.nativeView.getWindowToken() !== otherView.nativeView.getWindowToken()) {
return undefined;
}
var myArray = Array.create("int", 2);
this.nativeView.getLocationOnScreen(myArray);
var otherArray = Array.create("int", 2);
otherView.nativeView.getLocationOnScreen(otherArray);
return {
x: view_common_1.layout.toDeviceIndependentPixels(myArray[0] - otherArray[0]),
y: view_common_1.layout.toDeviceIndependentPixels(myArray[1] - otherArray[1])
};
};
View.resolveSizeAndState = function(size, specSize, specMode, childMeasuredState) {
var result = size;
switch (specMode) {
case view_common_1.layout.UNSPECIFIED:
result = size;
break;

case view_common_1.layout.AT_MOST:
if (specSize < size) {
result = specSize | view_common_1.layout.MEASURED_STATE_TOO_SMALL;
}
break;

case view_common_1.layout.EXACTLY:
result = specSize;
break;
}
return result | childMeasuredState & view_common_1.layout.MEASURED_STATE_MASK;
};
View.prototype[view_common_1.isEnabledProperty.getDefault] = function() {
return this.nativeView.isEnabled();
};
View.prototype[view_common_1.isEnabledProperty.setNative] = function(value) {
this.nativeView.setEnabled(value);
};
View.prototype[view_common_1.originXProperty.getDefault] = function() {
return this.nativeView.getPivotX();
};
View.prototype[view_common_1.originXProperty.setNative] = function(value) {
org.nativescript.widgets.OriginPoint.setX(this.nativeView, value);
};
View.prototype[view_common_1.originYProperty.getDefault] = function() {
return this.nativeView.getPivotY();
};
View.prototype[view_common_1.originYProperty.setNative] = function(value) {
org.nativescript.widgets.OriginPoint.setY(this.nativeView, value);
};
View.prototype[view_common_1.automationTextProperty.getDefault] = function() {
return this.nativeView.getContentDescription();
};
View.prototype[view_common_1.automationTextProperty.setNative] = function(value) {
this.nativeView.setContentDescription(value);
};
View.prototype[view_common_1.isUserInteractionEnabledProperty.getDefault] = function() {
return true;
};
View.prototype[view_common_1.isUserInteractionEnabledProperty.setNative] = function(value) {
if (!value) {
initializeDisabledListener();
this.nativeView.setOnTouchListener(disableUserInteractionListener);
} else {
this.setOnTouchListener();
}
};
View.prototype[style_properties_1.visibilityProperty.getDefault] = function() {
var nativeVisibility = this.nativeView.getVisibility();
switch (nativeVisibility) {
case android.view.View.VISIBLE:
return "visible";

case android.view.View.INVISIBLE:
return "hidden";

case android.view.View.GONE:
return "collapse";

default:
throw new Error("Unsupported android.view.View visibility: " + nativeVisibility + ". Currently supported values are android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE.");
}
};
View.prototype[style_properties_1.visibilityProperty.setNative] = function(value) {
switch (value) {
case "visible":
this.nativeView.setVisibility(android.view.View.VISIBLE);
break;

case "hidden":
this.nativeView.setVisibility(android.view.View.INVISIBLE);
break;

case "collapse":
this.nativeView.setVisibility(android.view.View.GONE);
break;

default:
throw new Error("Invalid visibility value: " + value + ". Valid values are: visible, hidden, collapse.");
}
};
View.prototype[style_properties_1.opacityProperty.getDefault] = function() {
return this.nativeView.getAlpha();
};
View.prototype[style_properties_1.opacityProperty.setNative] = function(value) {
this.nativeView.setAlpha(float(value));
};
View.prototype[style_properties_1.horizontalAlignmentProperty.getDefault] = function() {
return org.nativescript.widgets.ViewHelper.getHorizontalAlignment(this.nativeView);
};
View.prototype[style_properties_1.horizontalAlignmentProperty.setNative] = function(value) {
var nativeView = this.nativeView;
var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();
if (lp.gravity !== undefined) {
switch (value) {
case "left":
lp.gravity = android.view.Gravity.LEFT | lp.gravity & android.view.Gravity.VERTICAL_GRAVITY_MASK;
break;

case "center":
lp.gravity = android.view.Gravity.CENTER_HORIZONTAL | lp.gravity & android.view.Gravity.VERTICAL_GRAVITY_MASK;
break;

case "right":
lp.gravity = android.view.Gravity.RIGHT | lp.gravity & android.view.Gravity.VERTICAL_GRAVITY_MASK;
break;

case "stretch":
lp.gravity = android.view.Gravity.FILL_HORIZONTAL | lp.gravity & android.view.Gravity.VERTICAL_GRAVITY_MASK;
break;
}
nativeView.setLayoutParams(lp);
}
};
View.prototype[style_properties_1.verticalAlignmentProperty.getDefault] = function() {
return org.nativescript.widgets.ViewHelper.getVerticalAlignment(this.nativeView);
};
View.prototype[style_properties_1.verticalAlignmentProperty.setNative] = function(value) {
var nativeView = this.nativeView;
var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();
if (lp.gravity !== undefined) {
switch (value) {
case "top":
lp.gravity = android.view.Gravity.TOP | lp.gravity & android.view.Gravity.HORIZONTAL_GRAVITY_MASK;
break;

case "middle":
lp.gravity = android.view.Gravity.CENTER_VERTICAL | lp.gravity & android.view.Gravity.HORIZONTAL_GRAVITY_MASK;
break;

case "bottom":
lp.gravity = android.view.Gravity.BOTTOM | lp.gravity & android.view.Gravity.HORIZONTAL_GRAVITY_MASK;
break;

case "stretch":
lp.gravity = android.view.Gravity.FILL_VERTICAL | lp.gravity & android.view.Gravity.HORIZONTAL_GRAVITY_MASK;
break;
}
nativeView.setLayoutParams(lp);
}
};
View.prototype[style_properties_1.rotateProperty.getDefault] = function() {
return org.nativescript.widgets.ViewHelper.getRotate(this.nativeView);
};
View.prototype[style_properties_1.rotateProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setRotate(this.nativeView, float(value));
};
View.prototype[style_properties_1.scaleXProperty.getDefault] = function() {
return org.nativescript.widgets.ViewHelper.getScaleX(this.nativeView);
};
View.prototype[style_properties_1.scaleXProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setScaleX(this.nativeView, float(value));
};
View.prototype[style_properties_1.scaleYProperty.getDefault] = function() {
return org.nativescript.widgets.ViewHelper.getScaleY(this.nativeView);
};
View.prototype[style_properties_1.scaleYProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setScaleY(this.nativeView, float(value));
};
View.prototype[style_properties_1.translateXProperty.getDefault] = function() {
return view_common_1.layout.toDeviceIndependentPixels(org.nativescript.widgets.ViewHelper.getTranslateX(this.nativeView));
};
View.prototype[style_properties_1.translateXProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setTranslateX(this.nativeView, view_common_1.layout.toDevicePixels(value));
};
View.prototype[style_properties_1.translateYProperty.getDefault] = function() {
return view_common_1.layout.toDeviceIndependentPixels(org.nativescript.widgets.ViewHelper.getTranslateY(this.nativeView));
};
View.prototype[style_properties_1.translateYProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setTranslateY(this.nativeView, view_common_1.layout.toDevicePixels(value));
};
View.prototype[style_properties_1.zIndexProperty.getDefault] = function() {
return org.nativescript.widgets.ViewHelper.getZIndex(this.nativeView);
};
View.prototype[style_properties_1.zIndexProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setZIndex(this.nativeView, value);
};
View.prototype[style_properties_1.backgroundInternalProperty.getDefault] = function() {
return this.nativeView.getBackground();
};
View.prototype[style_properties_1.backgroundInternalProperty.setNative] = function(value) {
if (value instanceof android.graphics.drawable.Drawable) {
this.nativeView.setBackground(value);
} else {
background_1.ad.onBackgroundOrBorderPropertyChanged(this);
}
};
View.prototype[style_properties_1.minWidthProperty.setNative] = function(value) {
if (this.parent instanceof CustomLayoutView && this.parent.nativeView) {
this.parent._setChildMinWidthNative(this);
} else {
this._setMinWidthNative(this.minWidth);
}
};
View.prototype[style_properties_1.minHeightProperty.setNative] = function(value) {
if (this.parent instanceof CustomLayoutView && this.parent.nativeView) {
this.parent._setChildMinHeightNative(this);
} else {
this._setMinHeightNative(this.minHeight);
}
};
return View;
}(view_common_1.ViewCommon);
exports.View = View;
var CustomLayoutView = function(_super) {
__extends(CustomLayoutView, _super);
function CustomLayoutView() {
return _super !== null && _super.apply(this, arguments) || this;
}
CustomLayoutView.prototype.createNativeView = function() {
return new org.nativescript.widgets.ContentLayout(this._context);
};
CustomLayoutView.prototype._addViewToNativeVisualTree = function(child, atIndex) {
if (atIndex === void 0) {
atIndex = -1;
}
_super.prototype._addViewToNativeVisualTree.call(this, child);
if (this.nativeView && child.nativeView) {
if (view_common_1.traceEnabled()) {
view_common_1.traceWrite(this + ".nativeView.addView(" + child + ".nativeView, " + atIndex + ")", view_common_1.traceCategories.VisualTreeEvents);
}
this.nativeView.addView(child.nativeView, atIndex);
if (child instanceof View) {
this._updateNativeLayoutParams(child);
}
return true;
}
return false;
};
CustomLayoutView.prototype._updateNativeLayoutParams = function(child) {
this._setChildMinWidthNative(child);
this._setChildMinHeightNative(child);
};
CustomLayoutView.prototype._setChildMinWidthNative = function(child) {
child._setMinWidthNative(child.minWidth);
};
CustomLayoutView.prototype._setChildMinHeightNative = function(child) {
child._setMinHeightNative(child.minHeight);
};
CustomLayoutView.prototype._removeViewFromNativeVisualTree = function(child) {
_super.prototype._removeViewFromNativeVisualTree.call(this, child);
if (this.nativeView && child.nativeView) {
this.nativeView.removeView(child.nativeView);
if (view_common_1.traceEnabled()) {
view_common_1.traceWrite(this + ".nativeView.removeView(" + child + ".nativeView)", view_common_1.traceCategories.VisualTreeEvents);
view_common_1.traceNotifyEvent(child, "childInLayoutRemovedFromNativeVisualTree");
}
}
};
return CustomLayoutView;
}(View);
exports.CustomLayoutView = CustomLayoutView;
var percentNotSupported = function(view, value) {
throw new Error("PercentLength is not supported.");
};
function createNativePercentLengthProperty(options) {
var getter = options.getter, setter = options.setter, _a = options.auto, auto = _a === void 0 ? 0 : _a;
var setPixels, getPixels, setPercent;
if (getter) {
View.prototype[getter] = function() {
if (options) {
setPixels = options.setPixels;
getPixels = options.getPixels;
setPercent = options.setPercent || percentNotSupported;
options = null;
}
var value = getPixels(this.nativeView);
if (value == auto) {
return "auto";
} else {
return {
value: value,
unit: "px"
};
}
};
}
if (setter) {
View.prototype[setter] = function(length) {
if (options) {
setPixels = options.setPixels;
getPixels = options.getPixels;
setPercent = options.setPercent || percentNotSupported;
options = null;
}
if (length == "auto") {
setPixels(this.nativeView, auto);
} else if (typeof length === "number") {
setPixels(this.nativeView, view_common_1.layout.round(view_common_1.layout.toDevicePixels(length)));
} else if (length.unit == "dip") {
setPixels(this.nativeView, view_common_1.layout.round(view_common_1.layout.toDevicePixels(length.value)));
} else if (length.unit == "px") {
setPixels(this.nativeView, view_common_1.layout.round(length.value));
} else if (length.unit == "%") {
setPercent(this.nativeView, length.value);
} else {
throw new Error("Unsupported PercentLength " + length);
}
};
}
}
createNativePercentLengthProperty({
getter: style_properties_1.marginTopProperty.getDefault,
setter: style_properties_1.marginTopProperty.setNative,
get getPixels() {
return org.nativescript.widgets.ViewHelper.getMarginTop;
},
get setPixels() {
return org.nativescript.widgets.ViewHelper.setMarginTop;
},
get setPercent() {
return org.nativescript.widgets.ViewHelper.setMarginTopPercent;
}
});
createNativePercentLengthProperty({
getter: style_properties_1.marginRightProperty.getDefault,
setter: style_properties_1.marginRightProperty.setNative,
get getPixels() {
return org.nativescript.widgets.ViewHelper.getMarginRight;
},
get setPixels() {
return org.nativescript.widgets.ViewHelper.setMarginRight;
},
get setPercent() {
return org.nativescript.widgets.ViewHelper.setMarginRightPercent;
}
});
createNativePercentLengthProperty({
getter: style_properties_1.marginBottomProperty.getDefault,
setter: style_properties_1.marginBottomProperty.setNative,
get getPixels() {
return org.nativescript.widgets.ViewHelper.getMarginBottom;
},
get setPixels() {
return org.nativescript.widgets.ViewHelper.setMarginBottom;
},
get setPercent() {
return org.nativescript.widgets.ViewHelper.setMarginBottomPercent;
}
});
createNativePercentLengthProperty({
getter: style_properties_1.marginLeftProperty.getDefault,
setter: style_properties_1.marginLeftProperty.setNative,
get getPixels() {
return org.nativescript.widgets.ViewHelper.getMarginLeft;
},
get setPixels() {
return org.nativescript.widgets.ViewHelper.setMarginLeft;
},
get setPercent() {
return org.nativescript.widgets.ViewHelper.setMarginLeftPercent;
}
});
createNativePercentLengthProperty({
getter: style_properties_1.widthProperty.getDefault,
setter: style_properties_1.widthProperty.setNative,
auto: -1,
get getPixels() {
return org.nativescript.widgets.ViewHelper.getWidth;
},
get setPixels() {
return org.nativescript.widgets.ViewHelper.setWidth;
},
get setPercent() {
return org.nativescript.widgets.ViewHelper.setWidthPercent;
}
});
createNativePercentLengthProperty({
getter: style_properties_1.heightProperty.getDefault,
setter: style_properties_1.heightProperty.setNative,
auto: -1,
get getPixels() {
return org.nativescript.widgets.ViewHelper.getHeight;
},
get setPixels() {
return org.nativescript.widgets.ViewHelper.setHeight;
},
get setPercent() {
return org.nativescript.widgets.ViewHelper.setHeightPercent;
}
});
createNativePercentLengthProperty({
setter: "_setMinWidthNative",
get setPixels() {
return org.nativescript.widgets.ViewHelper.setMinWidth;
}
});
createNativePercentLengthProperty({
setter: "_setMinHeightNative",
get setPixels() {
return org.nativescript.widgets.ViewHelper.setMinHeight;
}
});
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var utils_1 = __webpack_require__(14);
var css_value_1 = __webpack_require__(18);
var file_system_1 = __webpack_require__(19);
var application_1 = __webpack_require__(3);
__export(__webpack_require__(23));
var ad;
(function(ad) {
var SDK;
function getSDK() {
if (!SDK) {
SDK = android.os.Build.VERSION.SDK_INT;
}
return SDK;
}
function isSetColorFilterOnlyWidget(nativeView) {
return nativeView instanceof android.widget.Button || nativeView instanceof android.support.v7.widget.Toolbar && getSDK() >= 21;
}
function onBackgroundOrBorderPropertyChanged(view) {
var nativeView = view.nativeView;
if (!nativeView) {
return;
}
var background = view.style.backgroundInternal;
var cache = view.nativeView;
var drawable = nativeView.getBackground();
var androidView = view;
if (androidView.background === undefined && drawable) {
androidView.background = drawable.getConstantState();
}
if (isSetColorFilterOnlyWidget(nativeView) && drawable && !background.hasBorderWidth() && !background.hasBorderRadius() && !background.clipPath && !background.image && background.color) {
var backgroundColor = drawable.backgroundColor = background.color.android;
drawable.mutate();
drawable.setColorFilter(backgroundColor, android.graphics.PorterDuff.Mode.SRC_IN);
drawable.invalidateSelf();
drawable.backgroundColor = backgroundColor;
} else if (!background.isEmpty()) {
var backgroundDrawable = drawable;
if (!(drawable instanceof org.nativescript.widgets.BorderDrawable)) {
backgroundDrawable = new org.nativescript.widgets.BorderDrawable(utils_1.layout.getDisplayDensity(), view.toString());
refreshBorderDrawable(view, backgroundDrawable);
org.nativescript.widgets.ViewHelper.setBackground(nativeView, backgroundDrawable);
} else {
refreshBorderDrawable(view, backgroundDrawable);
}
if ((background.hasBorderWidth() || background.hasBorderRadius() || background.clipPath) && getSDK() < 18) {
if (cache.layerType === undefined) {
cache.layerType = cache.getLayerType();
cache.setLayerType(android.view.View.LAYER_TYPE_SOFTWARE, null);
}
}
} else {
var defaultDrawable = androidView.background ? androidView.background.newDrawable() : null;
org.nativescript.widgets.ViewHelper.setBackground(nativeView, defaultDrawable);
androidView.background = undefined;
if (cache.layerType !== undefined) {
cache.setLayerType(cache.layerType, null);
cache.layerType = undefined;
}
}
var leftPadding = Math.ceil(view.effectiveBorderLeftWidth + view.effectivePaddingLeft);
var topPadding = Math.ceil(view.effectiveBorderTopWidth + view.effectivePaddingTop);
var rightPadding = Math.ceil(view.effectiveBorderRightWidth + view.effectivePaddingRight);
var bottomPadding = Math.ceil(view.effectiveBorderBottomWidth + view.effectivePaddingBottom);
nativeView.setPadding(leftPadding, topPadding, rightPadding, bottomPadding);
}
ad.onBackgroundOrBorderPropertyChanged = onBackgroundOrBorderPropertyChanged;
})(ad = exports.ad || (exports.ad = {}));
function fromBase64(source) {
var bytes = android.util.Base64.decode(source, android.util.Base64.DEFAULT);
return android.graphics.BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
}
var pattern = /url\(('|")(.*?)\1\)/;
function refreshBorderDrawable(view, borderDrawable) {
var nativeView = view.nativeView;
var context = nativeView.getContext();
var background = view.style.backgroundInternal;
if (background) {
var backgroundPositionParsedCSSValues = createNativeCSSValueArray(background.position);
var backgroundSizeParsedCSSValues = createNativeCSSValueArray(background.size);
var blackColor = -16777216;
var imageUri = background.image;
if (imageUri) {
var match = imageUri.match(pattern);
if (match && match[2]) {
imageUri = match[2];
}
}
var bitmap = null;
if (utils_1.isDataURI(imageUri)) {
var base64Data = imageUri.split(",")[1];
if (base64Data !== undefined) {
bitmap = fromBase64(base64Data);
imageUri = null;
}
} else if (utils_1.isFileOrResourcePath(imageUri)) {
if (imageUri.indexOf(utils_1.RESOURCE_PREFIX) !== 0) {
var fileName = imageUri;
if (fileName.indexOf("~/") === 0) {
fileName = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, fileName.replace("~/", ""));
}
imageUri = utils_1.FILE_PREFIX + fileName;
}
}
borderDrawable.refresh(background.borderTopColor ? background.borderTopColor.android : blackColor, background.borderRightColor ? background.borderRightColor.android : blackColor, background.borderBottomColor ? background.borderBottomColor.android : blackColor, background.borderLeftColor ? background.borderLeftColor.android : blackColor, background.borderTopWidth, background.borderRightWidth, background.borderBottomWidth, background.borderLeftWidth, background.borderTopLeftRadius, background.borderTopRightRadius, background.borderBottomRightRadius, background.borderBottomLeftRadius, background.clipPath, background.color ? background.color.android : 0, imageUri, bitmap, context, background.repeat, background.position, backgroundPositionParsedCSSValues, background.size, backgroundSizeParsedCSSValues);
}
}
function createNativeCSSValueArray(css) {
if (!css) {
return null;
}
var cssValues = css_value_1.parse(css);
var nativeArray = Array.create(org.nativescript.widgets.CSSValue, cssValues.length);
for (var i = 0, length_1 = cssValues.length; i < length_1; i++) {
nativeArray[i] = new org.nativescript.widgets.CSSValue(cssValues[i].type, cssValues[i].string, cssValues[i].unit, cssValues[i].value);
}
return nativeArray;
}
var CacheMode;
(function(CacheMode) {
CacheMode[CacheMode["none"] = 0] = "none";
CacheMode[CacheMode["memory"] = 1] = "memory";
CacheMode[CacheMode["diskAndMemory"] = 2] = "diskAndMemory";
})(CacheMode = exports.CacheMode || (exports.CacheMode = {}));
var currentCacheMode;
var imageFetcher;
function initImageCache(context, mode, memoryCacheSize, diskCacheSize) {
if (mode === void 0) {
mode = CacheMode.diskAndMemory;
}
if (memoryCacheSize === void 0) {
memoryCacheSize = .25;
}
if (diskCacheSize === void 0) {
diskCacheSize = 10 * 1024 * 1024;
}
if (currentCacheMode === mode) {
return;
}
currentCacheMode = mode;
if (!imageFetcher) {
imageFetcher = org.nativescript.widgets.image.Fetcher.getInstance(context);
} else {
imageFetcher.clearCache();
}
var params = new org.nativescript.widgets.image.Cache.CacheParams();
params.memoryCacheEnabled = mode !== CacheMode.none;
params.setMemCacheSizePercent(memoryCacheSize);
params.diskCacheEnabled = mode === CacheMode.diskAndMemory;
params.diskCacheSize = diskCacheSize;
var imageCache = org.nativescript.widgets.image.Cache.getInstance(params);
imageFetcher.addImageCache(imageCache);
imageFetcher.initCache();
}
exports.initImageCache = initImageCache;
application_1.android.on("activityStarted", function(args) {
if (!imageFetcher) {
initImageCache(args.activity);
} else {
imageFetcher.initCache();
}
});
application_1.android.on("activityStopped", function(args) {
if (imageFetcher) {
imageFetcher.closeCache();
}
});
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var trace_1 = __webpack_require__(15);
__export(__webpack_require__(16));
var application_1 = __webpack_require__(3);
var layout;
(function(layout) {
var density;
var MODE_SHIFT = 30;
var MODE_MASK = 3 << MODE_SHIFT;
var sdkVersion;
var useOldMeasureSpec = false;
function makeMeasureSpec(size, mode) {
if (sdkVersion === undefined) {
sdkVersion = ad.getApplicationContext().getApplicationInfo().targetSdkVersion;
useOldMeasureSpec = sdkVersion <= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
}
if (useOldMeasureSpec) {
return size + mode;
}
return size & ~MODE_MASK | mode & MODE_MASK;
}
layout.makeMeasureSpec = makeMeasureSpec;
function getDisplayDensity() {
if (density === undefined) {
density = ad.getResources().getDisplayMetrics().density;
}
return density;
}
layout.getDisplayDensity = getDisplayDensity;
function toDevicePixels(value) {
return value * getDisplayDensity();
}
layout.toDevicePixels = toDevicePixels;
function toDeviceIndependentPixels(value) {
return value / getDisplayDensity();
}
layout.toDeviceIndependentPixels = toDeviceIndependentPixels;
function measureNativeView(nativeView, width, widthMode, height, heightMode) {
var view = nativeView;
view.measure(makeMeasureSpec(width, widthMode), makeMeasureSpec(height, heightMode));
return {
width: view.getMeasuredWidth(),
height: view.getMeasuredHeight()
};
}
layout.measureNativeView = measureNativeView;
})(layout = exports.layout || (exports.layout = {}));
var ad;
(function(ad) {
var application;
var applicationContext;
var contextResources;
var packageName;
function getApplicationContext() {
if (!applicationContext) {
applicationContext = getApplication().getApplicationContext();
}
return applicationContext;
}
ad.getApplicationContext = getApplicationContext;
function getApplication() {
if (!application) {
application = application_1.getNativeApplication();
}
return application;
}
ad.getApplication = getApplication;
function getResources() {
if (!contextResources) {
contextResources = getApplication().getResources();
}
return contextResources;
}
ad.getResources = getResources;
function getPackageName() {
if (!packageName) {
packageName = getApplicationContext().getPackageName();
}
return packageName;
}
var inputMethodManager;
function getInputMethodManager() {
if (!inputMethodManager) {
inputMethodManager = getApplicationContext().getSystemService(android.content.Context.INPUT_METHOD_SERVICE);
}
return inputMethodManager;
}
ad.getInputMethodManager = getInputMethodManager;
function showSoftInput(nativeView) {
var inputManager = getInputMethodManager();
if (inputManager && nativeView instanceof android.view.View) {
inputManager.showSoftInput(nativeView, android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT);
}
}
ad.showSoftInput = showSoftInput;
function dismissSoftInput(nativeView) {
var inputManager = getInputMethodManager();
var windowToken;
if (nativeView instanceof android.view.View) {
windowToken = nativeView.getWindowToken();
} else if (application_1.android.foregroundActivity instanceof android.app.Activity) {
var decorView = application_1.android.foregroundActivity.getWindow().getDecorView();
windowToken = decorView ? decorView.getWindowToken() : null;
}
if (inputManager && windowToken) {
inputManager.hideSoftInputFromWindow(windowToken, 0);
}
}
ad.dismissSoftInput = dismissSoftInput;
var collections;
(function(collections) {
function stringArrayToStringSet(str) {
var hashSet = new java.util.HashSet();
if (str !== undefined) {
for (var element in str) {
hashSet.add("" + str[element]);
}
}
return hashSet;
}
collections.stringArrayToStringSet = stringArrayToStringSet;
function stringSetToStringArray(stringSet) {
var arr = [];
if (stringSet !== undefined) {
var it = stringSet.iterator();
while (it.hasNext()) {
var element = "" + it.next();
arr.push(element);
}
}
return arr;
}
collections.stringSetToStringArray = stringSetToStringArray;
})(collections = ad.collections || (ad.collections = {}));
var resources;
(function(resources_1) {
var attr;
var attrCache = new Map();
function getDrawableId(name) {
return getId(":drawable/" + name);
}
resources_1.getDrawableId = getDrawableId;
function getStringId(name) {
return getId(":string/" + name);
}
resources_1.getStringId = getStringId;
function getId(name) {
var resources = getResources();
var packageName = getPackageName();
var uri = packageName + name;
return resources.getIdentifier(uri, null, null);
}
resources_1.getId = getId;
function getPalleteColor(name, context) {
if (attrCache.has(name)) {
return attrCache.get(name);
}
var result = 0;
try {
if (!attr) {
attr = java.lang.Class.forName("android.support.v7.appcompat.R$attr");
}
var colorID = 0;
var field = attr.getField(name);
if (field) {
colorID = field.getInt(null);
}
if (colorID) {
var typedValue = new android.util.TypedValue();
context.getTheme().resolveAttribute(colorID, typedValue, true);
result = typedValue.data;
}
} catch (ex) {
trace_1.write("Cannot get pallete color: " + name, trace_1.categories.Error, trace_1.messageType.error);
}
attrCache.set(name, result);
return result;
}
resources_1.getPalleteColor = getPalleteColor;
})(resources = ad.resources || (ad.resources = {}));
})(ad = exports.ad || (exports.ad = {}));
function GC() {
gc();
}
exports.GC = GC;
function openUrl(location) {
var context = ad.getApplicationContext();
try {
var intent = new android.content.Intent(android.content.Intent.ACTION_VIEW, android.net.Uri.parse(location.trim()));
intent.addFlags(android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
context.startActivity(intent);
} catch (e) {
trace_1.write("Error in OpenURL", trace_1.categories.Error, trace_1.messageType.error);
return false;
}
return true;
}
exports.openUrl = openUrl;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var enabled = false;
var _categories = {};
var _writers = [];
var _eventListeners = [];
function enable() {
enabled = true;
}
exports.enable = enable;
function disable() {
enabled = false;
}
exports.disable = disable;
function isEnabled() {
return enabled;
}
exports.isEnabled = isEnabled;
function isCategorySet(category) {
return category in _categories;
}
exports.isCategorySet = isCategorySet;
function addWriter(writer) {
_writers.push(writer);
}
exports.addWriter = addWriter;
function removeWriter(writer) {
var index = _writers.indexOf(writer);
if (index >= 0) {
_writers.splice(index, 1);
}
}
exports.removeWriter = removeWriter;
function clearWriters() {
if (_writers.length > 0) {
_writers.splice(0, _writers.length);
}
}
exports.clearWriters = clearWriters;
function setCategories(categories) {
_categories = {};
addCategories(categories);
}
exports.setCategories = setCategories;
function addCategories(categories) {
var split = categories.split(",");
for (var i = 0; i < split.length; i++) {
_categories[split[i].trim()] = true;
}
}
exports.addCategories = addCategories;
function write(message, category, type) {
var i;
if (type === messageType.error) {
for (i = 0; i < _writers.length; i++) {
_writers[i].write(message, category, type);
}
return;
}
if (!enabled) {
return;
}
if (!(category in _categories)) {
return;
}
for (i = 0; i < _writers.length; i++) {
_writers[i].write(message, category, type);
}
}
exports.write = write;
function notifyEvent(object, name, data) {
if (!enabled) {
return;
}
var i, listener, filters;
for (i = 0; i < _eventListeners.length; i++) {
listener = _eventListeners[i];
if (listener.filter) {
filters = listener.filter.split(",");
filters.forEach(function(value) {
if (value.trim() === name) {
listener.on(object, name, data);
}
});
} else {
listener.on(object, name, data);
}
}
}
exports.notifyEvent = notifyEvent;
function addEventListener(listener) {
_eventListeners.push(listener);
}
exports.addEventListener = addEventListener;
function removeEventListener(listener) {
var index = _eventListeners.indexOf(listener);
if (index >= 0) {
_eventListeners.splice(index, 1);
}
}
exports.removeEventListener = removeEventListener;
var messageType;
(function(messageType) {
messageType.log = 0;
messageType.info = 1;
messageType.warn = 2;
messageType.error = 3;
})(messageType = exports.messageType || (exports.messageType = {}));
var categories;
(function(categories) {
categories.VisualTreeEvents = "VisualTreeEvents";
categories.Layout = "Layout";
categories.Style = "Style";
categories.ViewHierarchy = "ViewHierarchy";
categories.NativeLifecycle = "NativeLifecycle";
categories.Debug = "Debug";
categories.Navigation = "Navigation";
categories.Test = "Test";
categories.Binding = "Binding";
categories.BindingError = "BindingError";
categories.Error = "Error";
categories.Animation = "Animation";
categories.Transition = "Transition";
categories.All = categories.VisualTreeEvents + "," + categories.Layout + "," + categories.Style + "," + categories.ViewHierarchy + "," + categories.NativeLifecycle + "," + categories.Debug + "," + categories.Navigation + "," + categories.Test + "," + categories.Binding + "," + categories.Error + "," + categories.Animation + "," + categories.Transition;
categories.separator = ",";
function concat() {
var i;
var result;
for (i = 0; i < arguments.length; i++) {
if (!result) {
result = arguments[i];
continue;
}
result = result.concat(categories.separator, arguments[i]);
}
return result;
}
categories.concat = concat;
})(categories = exports.categories || (exports.categories = {}));
var ConsoleWriter = function() {
function ConsoleWriter() {}
ConsoleWriter.prototype.write = function(message, category, type) {
if (!console) {
return;
}
var msgType;
if (type === undefined) {
msgType = messageType.log;
} else {
msgType = type;
}
switch (msgType) {
case messageType.log:
console.log(category + ": " + message);
break;

case messageType.info:
console.info(category + ": " + message);
break;

case messageType.warn:
console.warn(category + ": " + message);
break;

case messageType.error:
console.error(category + ": " + message);
break;
}
};
return ConsoleWriter;
}();
addWriter(new ConsoleWriter());
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var types = __webpack_require__(17);
exports.RESOURCE_PREFIX = "res://";
exports.FILE_PREFIX = "file:///";
function escapeRegexSymbols(source) {
var escapeRegex = /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g;
return source.replace(escapeRegex, "\\$&");
}
exports.escapeRegexSymbols = escapeRegexSymbols;
function convertString(value) {
var result;
if (!types.isString(value)) {
result = value;
} else if (value.trim() === "") {
result = value;
} else {
var valueAsNumber = +value;
if (!isNaN(valueAsNumber)) {
result = valueAsNumber;
} else if (value && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
result = value.toLowerCase() === "true" ? true : false;
} else {
result = value;
}
}
return result;
}
exports.convertString = convertString;
var layout;
(function(layout) {
var MODE_SHIFT = 30;
var MODE_MASK = 3 << MODE_SHIFT;
layout.UNSPECIFIED = 0 << MODE_SHIFT;
layout.EXACTLY = 1 << MODE_SHIFT;
layout.AT_MOST = 2 << MODE_SHIFT;
layout.MEASURED_HEIGHT_STATE_SHIFT = 16;
layout.MEASURED_STATE_TOO_SMALL = 16777216;
layout.MEASURED_STATE_MASK = 4278190080;
layout.MEASURED_SIZE_MASK = 16777215;
function getMode(mode) {
switch (mode) {
case layout.EXACTLY:
return "Exact";

case layout.AT_MOST:
return "AtMost";

default:
return "Unspecified";
}
}
layout.getMode = getMode;
function getMeasureSpecMode(spec) {
return spec & MODE_MASK;
}
layout.getMeasureSpecMode = getMeasureSpecMode;
function getMeasureSpecSize(spec) {
return spec & ~MODE_MASK;
}
layout.getMeasureSpecSize = getMeasureSpecSize;
function measureSpecToString(measureSpec) {
var mode = getMeasureSpecMode(measureSpec);
var size = getMeasureSpecSize(measureSpec);
var text = "MeasureSpec: ";
if (mode === layout.UNSPECIFIED) {
text += "UNSPECIFIED ";
} else if (mode === layout.EXACTLY) {
text += "EXACTLY ";
} else if (mode === layout.AT_MOST) {
text += "AT_MOST ";
} else {
text += mode + " ";
}
text += size;
return text;
}
layout.measureSpecToString = measureSpecToString;
function round(value) {
var res = Math.floor(value + .5);
if (res !== 0) {
return res;
} else if (value === 0) {
return 0;
} else if (value > 0) {
return 1;
}
return -1;
}
layout.round = round;
})(layout = exports.layout || (exports.layout = {}));
function isFileOrResourcePath(path) {
if (!types.isString(path)) {
return false;
}
return path.indexOf("~/") === 0 || path.indexOf("/") === 0 || path.indexOf(exports.RESOURCE_PREFIX) === 0;
}
exports.isFileOrResourcePath = isFileOrResourcePath;
function isDataURI(uri) {
if (!types.isString(uri)) {
return false;
}
var firstSegment = uri.trim().split(",")[0];
return firstSegment && firstSegment.indexOf("data:") === 0 && firstSegment.indexOf("base64") >= 0;
}
exports.isDataURI = isDataURI;
function mergeSort(arr, compareFunc) {
if (arr.length < 2) {
return arr;
}
var middle = arr.length / 2;
var left = arr.slice(0, middle);
var right = arr.slice(middle, arr.length);
return merge(mergeSort(left, compareFunc), mergeSort(right, compareFunc), compareFunc);
}
exports.mergeSort = mergeSort;
function merge(left, right, compareFunc) {
var result = [];
while (left.length && right.length) {
if (compareFunc(left[0], right[0]) <= 0) {
result.push(left.shift());
} else {
result.push(right.shift());
}
}
while (left.length) {
result.push(left.shift());
}
while (right.length) {
result.push(right.shift());
}
return result;
}
exports.merge = merge;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
function isString(value) {
return typeof value === "string" || value instanceof String;
}
exports.isString = isString;
function isNumber(value) {
return typeof value === "number" || value instanceof Number;
}
exports.isNumber = isNumber;
function isBoolean(value) {
return typeof value === "boolean" || value instanceof Boolean;
}
exports.isBoolean = isBoolean;
function isFunction(value) {
if (!value) {
return false;
}
return typeof value === "function";
}
exports.isFunction = isFunction;
function isObject(value) {
if (!value) {
return false;
}
return typeof value === "object";
}
exports.isObject = isObject;
function isUndefined(value) {
return value === undefined;
}
exports.isUndefined = isUndefined;
function isDefined(value) {
return typeof value !== "undefined";
}
exports.isDefined = isDefined;
function isNullOrUndefined(value) {
return value === undefined || value === null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function verifyCallback(value) {
if (value && !isFunction(value)) {
throw new TypeError("Callback must be a valid function.");
}
}
exports.verifyCallback = verifyCallback;
var classInfosMap = new Map();
var funcNameRegex = /function ([_a-zA-Z0-9]{1,})\(/;
function getClass(object) {
return getClassInfo(object).name;
}
exports.getClass = getClass;
function getClassInfo(object) {
var constructor = object.constructor;
var result = classInfosMap.get(constructor);
if (!result) {
result = new ClassInfo(constructor);
classInfosMap.set(constructor, result);
}
return result;
}
exports.getClassInfo = getClassInfo;
function getBaseClasses(object) {
var result = [];
var info = getClassInfo(object);
while (info) {
result.push(info.name);
info = info.baseClassInfo;
}
return result;
}
exports.getBaseClasses = getBaseClasses;
var ClassInfo = function() {
function ClassInfo(typeCosntructor) {
this._typeCosntructor = typeCosntructor;
}
Object.defineProperty(ClassInfo.prototype, "name", {
get: function() {
if (!this._name) {
var results = funcNameRegex.exec(this._typeCosntructor.toString());
this._name = results && results.length > 1 ? results[1] : "";
}
return this._name;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ClassInfo.prototype, "baseClassInfo", {
get: function() {
if (isUndefined(this._baseClassInfo)) {
this._baseClassInfo = ClassInfo._getBase(this);
if (this._baseClassInfo && this._baseClassInfo.name === this.name) {
this._baseClassInfo = ClassInfo._getBase(this._baseClassInfo);
}
}
return this._baseClassInfo;
},
enumerable: true,
configurable: true
});
ClassInfo._getBase = function(info) {
var result = null;
var constructorProto = info._typeCosntructor.prototype;
if (constructorProto.__proto__) {
result = getClassInfo(constructorProto.__proto__);
}
return result;
};
return ClassInfo;
}();
exports.ClassInfo = ClassInfo;
function toUIString(obj) {
return isNullOrUndefined(obj) ? "" : obj + "";
}
exports.toUIString = toUIString;
}, function(module, exports) {
exports.parse = parse;
function parse(str) {
return new Parser(str).parse();
}
function Parser(str) {
this.str = str;
}
Parser.prototype.skip = function(m) {
this.str = this.str.slice(m[0].length);
};
Parser.prototype.comma = function() {
var m = /^, */.exec(this.str);
if (!m) return;
this.skip(m);
return {
type: "comma",
string: ","
};
};
Parser.prototype.ident = function() {
var m = /^([\w-]+) */.exec(this.str);
if (!m) return;
this.skip(m);
return {
type: "ident",
string: m[1]
};
};
Parser.prototype.int = function() {
var m = /^(([-\+]?\d+)(\S+)?) */.exec(this.str);
if (!m) return;
this.skip(m);
var n = ~~m[2];
var u = m[3];
return {
type: "number",
string: m[1],
unit: u || "",
value: n
};
};
Parser.prototype.float = function() {
var m = /^(((?:[-\+]?\d+)?\.\d+)(\S+)?) */.exec(this.str);
if (!m) return;
this.skip(m);
var n = parseFloat(m[2]);
var u = m[3];
return {
type: "number",
string: m[1],
unit: u || "",
value: n
};
};
Parser.prototype.number = function() {
return this.float() || this.int();
};
Parser.prototype.double = function() {
var m = /^"([^"]*)" */.exec(this.str);
if (!m) return m;
this.skip(m);
return {
type: "string",
quote: '"',
string: '"' + m[1] + '"',
value: m[1]
};
};
Parser.prototype.single = function() {
var m = /^'([^']*)' */.exec(this.str);
if (!m) return m;
this.skip(m);
return {
type: "string",
quote: "'",
string: "'" + m[1] + "'",
value: m[1]
};
};
Parser.prototype.string = function() {
return this.single() || this.double();
};
Parser.prototype.value = function() {
return this.number() || this.ident() || this.string() || this.comma();
};
Parser.prototype.parse = function() {
var vals = [];
while (this.str.length) {
var obj = this.value();
if (!obj) throw new Error("failed to parse near `" + this.str.slice(0, 10) + "...`");
vals.push(obj);
}
return vals;
};
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var file_access_module = __webpack_require__(20);
var fileAccess;
var getFileAccess = function() {
if (!fileAccess) {
fileAccess = new file_access_module.FileSystemAccess();
}
return fileAccess;
};
var platform;
function ensurePlatform() {
if (!platform) {
platform = __webpack_require__(22);
}
}
var nameProperty = "_name";
var pathProperty = "_path";
var isKnownProperty = "_isKnown";
var fileLockedProperty = "_locked";
var extensionProperty = "_extension";
var lastModifiedProperty = "_lastModified";
var createFile = function(info) {
var file = new File();
file[pathProperty] = info.path;
file[nameProperty] = info.name;
file[extensionProperty] = info.extension;
return file;
};
var createFolder = function(info) {
var documents = knownFolders.documents();
if (info.path === documents.path) {
return documents;
}
var temp = knownFolders.temp();
if (info.path === temp.path) {
return temp;
}
var folder = new Folder();
folder[pathProperty] = info.path;
folder[nameProperty] = info.name;
return folder;
};
var FileSystemEntity = function() {
function FileSystemEntity() {}
Object.defineProperty(FileSystemEntity.prototype, "parent", {
get: function() {
var onError = function(error) {
throw error;
};
var folderInfo = getFileAccess().getParent(this.path, onError);
if (!folderInfo) {
return undefined;
}
return createFolder(folderInfo);
},
enumerable: true,
configurable: true
});
FileSystemEntity.prototype.remove = function() {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
_this.removeSync(localError);
if (!hasError) {
resolve();
}
});
};
FileSystemEntity.prototype.removeSync = function(onError) {
if (this[isKnownProperty]) {
if (onError) {
onError({
message: "Cannot delete known folder."
});
}
return;
}
var fileAccess = getFileAccess();
if (this instanceof File) {
fileAccess.deleteFile(this.path, onError);
} else if (this instanceof Folder) {
fileAccess.deleteFolder(this.path, onError);
}
};
FileSystemEntity.prototype.rename = function(newName) {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
_this.renameSync(newName, localError);
if (!hasError) {
resolve();
}
});
};
FileSystemEntity.prototype.renameSync = function(newName, onError) {
if (this[isKnownProperty]) {
if (onError) {
onError(new Error("Cannot rename known folder."));
}
return;
}
var parentFolder = this.parent;
if (!parentFolder) {
if (onError) {
onError(new Error("No parent folder."));
}
return;
}
var fileAccess = getFileAccess();
var path = parentFolder.path;
var newPath = fileAccess.joinPath(path, newName);
var hasError = false;
var localError = function(error) {
hasError = true;
if (onError) {
onError(error);
}
return null;
};
fileAccess.rename(this.path, newPath, localError);
this[pathProperty] = newPath;
this[nameProperty] = newName;
if (this instanceof File) {
this[extensionProperty] = fileAccess.getFileExtension(newPath);
}
};
Object.defineProperty(FileSystemEntity.prototype, "name", {
get: function() {
return this[nameProperty];
},
enumerable: true,
configurable: true
});
Object.defineProperty(FileSystemEntity.prototype, "path", {
get: function() {
return this[pathProperty];
},
enumerable: true,
configurable: true
});
Object.defineProperty(FileSystemEntity.prototype, "lastModified", {
get: function() {
var value = this[lastModifiedProperty];
if (!this[lastModifiedProperty]) {
value = this[lastModifiedProperty] = getFileAccess().getLastModified(this.path);
}
return value;
},
enumerable: true,
configurable: true
});
return FileSystemEntity;
}();
exports.FileSystemEntity = FileSystemEntity;
var File = function(_super) {
__extends(File, _super);
function File() {
return _super !== null && _super.apply(this, arguments) || this;
}
File.fromPath = function(path) {
var onError = function(error) {
throw error;
};
var fileInfo = getFileAccess().getFile(path, onError);
if (!fileInfo) {
return undefined;
}
return createFile(fileInfo);
};
File.exists = function(path) {
return getFileAccess().fileExists(path);
};
Object.defineProperty(File.prototype, "extension", {
get: function() {
return this[extensionProperty];
},
enumerable: true,
configurable: true
});
Object.defineProperty(File.prototype, "isLocked", {
get: function() {
return !!this[fileLockedProperty];
},
enumerable: true,
configurable: true
});
File.prototype.readSync = function(onError) {
this.checkAccess();
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
var content = getFileAccess().read(this.path, localError);
this[fileLockedProperty] = false;
return content;
};
File.prototype.writeSync = function(content, onError) {
this.checkAccess();
try {
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
getFileAccess().write(this.path, content, localError);
} finally {
this[fileLockedProperty] = false;
}
};
File.prototype.readText = function(encoding) {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
var content = _this.readTextSync(localError, encoding);
if (!hasError) {
resolve(content);
}
});
};
File.prototype.readTextSync = function(onError, encoding) {
this.checkAccess();
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
var content = getFileAccess().readText(this.path, localError, encoding);
this[fileLockedProperty] = false;
return content;
};
File.prototype.writeText = function(content, encoding) {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
_this.writeTextSync(content, localError, encoding);
if (!hasError) {
resolve();
}
});
};
File.prototype.writeTextSync = function(content, onError, encoding) {
this.checkAccess();
try {
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
getFileAccess().writeText(this.path, content, localError, encoding);
} finally {
this[fileLockedProperty] = false;
}
};
File.prototype.checkAccess = function() {
if (this.isLocked) {
throw new Error("Cannot access a locked file.");
}
};
return File;
}(FileSystemEntity);
exports.File = File;
var Folder = function(_super) {
__extends(Folder, _super);
function Folder() {
return _super !== null && _super.apply(this, arguments) || this;
}
Folder.fromPath = function(path) {
var onError = function(error) {
throw error;
};
var folderInfo = getFileAccess().getFolder(path, onError);
if (!folderInfo) {
return undefined;
}
return createFolder(folderInfo);
};
Folder.exists = function(path) {
return getFileAccess().folderExists(path);
};
Folder.prototype.contains = function(name) {
var fileAccess = getFileAccess();
var path = fileAccess.joinPath(this.path, name);
if (fileAccess.fileExists(path)) {
return true;
}
return fileAccess.folderExists(path);
};
Folder.prototype.clear = function() {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var onError = function(error) {
hasError = true;
reject(error);
};
_this.clearSync(onError);
if (!hasError) {
resolve();
}
});
};
Folder.prototype.clearSync = function(onError) {
getFileAccess().emptyFolder(this.path, onError);
};
Object.defineProperty(Folder.prototype, "isKnown", {
get: function() {
return this[isKnownProperty];
},
enumerable: true,
configurable: true
});
Folder.prototype.getFile = function(name) {
var fileAccess = getFileAccess();
var path = fileAccess.joinPath(this.path, name);
var onError = function(error) {
throw error;
};
var fileInfo = fileAccess.getFile(path, onError);
if (!fileInfo) {
return undefined;
}
return createFile(fileInfo);
};
Folder.prototype.getFolder = function(name) {
var fileAccess = getFileAccess();
var path = fileAccess.joinPath(this.path, name);
var onError = function(error) {
throw error;
};
var folderInfo = fileAccess.getFolder(path, onError);
if (!folderInfo) {
return undefined;
}
return createFolder(folderInfo);
};
Folder.prototype.getEntities = function() {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
var entities = _this.getEntitiesSync(localError);
if (!hasError) {
resolve(entities);
}
});
};
Folder.prototype.getEntitiesSync = function(onError) {
var fileInfos = getFileAccess().getEntities(this.path, onError);
if (!fileInfos) {
return null;
}
var entities = new Array();
var i;
for (i = 0; i < fileInfos.length; i++) {
if (fileInfos[i].extension) {
entities.push(createFile(fileInfos[i]));
} else {
entities.push(createFolder(fileInfos[i]));
}
}
return entities;
};
Folder.prototype.eachEntity = function(onEntity) {
if (!onEntity) {
return;
}
var onSuccess = function(fileInfo) {
var entity;
if (fileInfo.extension) {
entity = createFile(fileInfo);
} else {
entity = createFolder(fileInfo);
}
return onEntity(entity);
};
var onError = function(error) {
throw error;
};
getFileAccess().eachEntity(this.path, onSuccess, onError);
};
return Folder;
}(FileSystemEntity);
exports.Folder = Folder;
var knownFolders;
(function(knownFolders) {
var _documents;
var _temp;
var _app;
knownFolders.documents = function() {
if (!_documents) {
var path = getFileAccess().getDocumentsFolderPath();
_documents = new Folder();
_documents[pathProperty] = path;
_documents[isKnownProperty] = true;
}
return _documents;
};
knownFolders.temp = function() {
if (!_temp) {
var path = getFileAccess().getTempFolderPath();
_temp = new Folder();
_temp[pathProperty] = path;
_temp[isKnownProperty] = true;
}
return _temp;
};
knownFolders.currentApp = function() {
if (!_app) {
var path = getFileAccess().getCurrentAppPath();
_app = new Folder();
_app[pathProperty] = path;
_app[isKnownProperty] = true;
}
return _app;
};
var ios;
(function(ios) {
function _checkPlatform(knownFolderName) {
ensurePlatform();
if (!platform.isIOS) {
throw new Error('The "' + knownFolderName + '" known folder is available on iOS only!');
}
}
var _library;
ios.library = function() {
_checkPlatform("library");
if (!_library) {
var existingFolderInfo = getExistingFolderInfo(5);
if (existingFolderInfo) {
_library = existingFolderInfo.folder;
_library[pathProperty] = existingFolderInfo.path;
_library[isKnownProperty] = true;
}
}
return _library;
};
var _developer;
ios.developer = function() {
_checkPlatform("developer");
if (!_developer) {
var existingFolderInfo = getExistingFolderInfo(6);
if (existingFolderInfo) {
_developer = existingFolderInfo.folder;
_developer[pathProperty] = existingFolderInfo.path;
_developer[isKnownProperty] = true;
}
}
return _developer;
};
var _desktop;
ios.desktop = function() {
_checkPlatform("desktop");
if (!_desktop) {
var existingFolderInfo = getExistingFolderInfo(12);
if (existingFolderInfo) {
_desktop = existingFolderInfo.folder;
_desktop[pathProperty] = existingFolderInfo.path;
_desktop[isKnownProperty] = true;
}
}
return _desktop;
};
var _downloads;
ios.downloads = function() {
_checkPlatform("downloads");
if (!_downloads) {
var existingFolderInfo = getExistingFolderInfo(15);
if (existingFolderInfo) {
_downloads = existingFolderInfo.folder;
_downloads[pathProperty] = existingFolderInfo.path;
_downloads[isKnownProperty] = true;
}
}
return _downloads;
};
var _movies;
ios.movies = function() {
_checkPlatform("movies");
if (!_movies) {
var existingFolderInfo = getExistingFolderInfo(17);
if (existingFolderInfo) {
_movies = existingFolderInfo.folder;
_movies[pathProperty] = existingFolderInfo.path;
_movies[isKnownProperty] = true;
}
}
return _movies;
};
var _music;
ios.music = function() {
_checkPlatform("music");
if (!_music) {
var existingFolderInfo = getExistingFolderInfo(18);
if (existingFolderInfo) {
_music = existingFolderInfo.folder;
_music[pathProperty] = existingFolderInfo.path;
_music[isKnownProperty] = true;
}
}
return _music;
};
var _pictures;
ios.pictures = function() {
_checkPlatform("pictures");
if (!_pictures) {
var existingFolderInfo = getExistingFolderInfo(19);
if (existingFolderInfo) {
_pictures = existingFolderInfo.folder;
_pictures[pathProperty] = existingFolderInfo.path;
_pictures[isKnownProperty] = true;
}
}
return _pictures;
};
var _sharedPublic;
ios.sharedPublic = function() {
_checkPlatform("sharedPublic");
if (!_sharedPublic) {
var existingFolderInfo = getExistingFolderInfo(21);
if (existingFolderInfo) {
_sharedPublic = existingFolderInfo.folder;
_sharedPublic[pathProperty] = existingFolderInfo.path;
_sharedPublic[isKnownProperty] = true;
}
}
return _sharedPublic;
};
function getExistingFolderInfo(pathDirectory) {
var fileAccess = getFileAccess();
var folderPath = fileAccess.getKnownPath(pathDirectory);
var folderInfo = fileAccess.getExistingFolder(folderPath);
if (folderInfo) {
return {
folder: createFolder(folderInfo),
path: folderPath
};
}
return undefined;
}
})(ios = knownFolders.ios || (knownFolders.ios = {}));
})(knownFolders = exports.knownFolders || (exports.knownFolders = {}));
var path;
(function(path_1) {
function normalize(path) {
return getFileAccess().normalizePath(path);
}
path_1.normalize = normalize;
function join() {
var paths = [];
for (var _i = 0; _i < arguments.length; _i++) {
paths[_i] = arguments[_i];
}
var fileAccess = getFileAccess();
return fileAccess.joinPaths(paths);
}
path_1.join = join;
path_1.separator = getFileAccess().getPathSeparator();
})(path = exports.path || (exports.path = {}));
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var textModule = __webpack_require__(21);
var application_1 = __webpack_require__(3);
var applicationContext;
function getApplicationContext() {
if (!applicationContext) {
applicationContext = application_1.getNativeApplication().getApplicationContext();
}
return applicationContext;
}
var FileSystemAccess = function() {
function FileSystemAccess() {
this._pathSeparator = "/";
}
FileSystemAccess.prototype.getLastModified = function(path) {
var javaFile = new java.io.File(path);
return new Date(javaFile.lastModified());
};
FileSystemAccess.prototype.getParent = function(path, onError) {
try {
var javaFile = new java.io.File(path);
var parent = javaFile.getParentFile();
return {
path: parent.getAbsolutePath(),
name: parent.getName()
};
} catch (exception) {
if (onError) {
onError(exception);
}
return undefined;
}
};
FileSystemAccess.prototype.getFile = function(path, onError) {
return this.ensureFile(new java.io.File(path), false, onError);
};
FileSystemAccess.prototype.getFolder = function(path, onError) {
var javaFile = new java.io.File(path);
var dirInfo = this.ensureFile(javaFile, true, onError);
if (!dirInfo) {
return undefined;
}
return {
path: dirInfo.path,
name: dirInfo.name
};
};
FileSystemAccess.prototype.eachEntity = function(path, onEntity, onError) {
if (!onEntity) {
return;
}
this.enumEntities(path, onEntity, onError);
};
FileSystemAccess.prototype.getEntities = function(path, onError) {
var fileInfos = new Array();
var onEntity = function(entity) {
fileInfos.push(entity);
return true;
};
var errorOccurred;
var localError = function(error) {
if (onError) {
onError(error);
}
errorOccurred = true;
};
this.enumEntities(path, onEntity, localError);
if (!errorOccurred) {
return fileInfos;
}
return null;
};
FileSystemAccess.prototype.fileExists = function(path) {
var file = new java.io.File(path);
return file.exists();
};
FileSystemAccess.prototype.folderExists = function(path) {
var file = new java.io.File(path);
return file.exists() && file.isDirectory();
};
FileSystemAccess.prototype.deleteFile = function(path, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.isFile()) {
if (onError) {
onError({
message: "The specified parameter is not a File entity."
});
}
return;
}
if (!javaFile.delete()) {
if (onError) {
onError({
message: "File deletion failed"
});
}
}
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.deleteFolder = function(path, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.getCanonicalFile().isDirectory()) {
if (onError) {
onError({
message: "The specified parameter is not a Folder entity."
});
}
return;
}
this.deleteFolderContent(javaFile);
if (!javaFile.delete()) {
if (onError) {
onError({
message: "Folder deletion failed."
});
}
}
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.emptyFolder = function(path, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.getCanonicalFile().isDirectory()) {
if (onError) {
onError({
message: "The specified parameter is not a Folder entity."
});
}
return;
}
this.deleteFolderContent(javaFile);
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.rename = function(path, newPath, onError) {
var javaFile = new java.io.File(path);
if (!javaFile.exists()) {
if (onError) {
onError(new Error("The file to rename does not exist"));
}
return;
}
var newFile = new java.io.File(newPath);
if (newFile.exists()) {
if (onError) {
onError(new Error("A file with the same name already exists."));
}
return;
}
if (!javaFile.renameTo(newFile)) {
if (onError) {
onError(new Error("Failed to rename file '" + path + "' to '" + newPath + "'"));
}
}
};
FileSystemAccess.prototype.getDocumentsFolderPath = function() {
var dir = getApplicationContext().getFilesDir();
return dir.getAbsolutePath();
};
FileSystemAccess.prototype.getLogicalRootPath = function() {
var dir = getApplicationContext().getFilesDir();
return dir.getCanonicalPath();
};
FileSystemAccess.prototype.getTempFolderPath = function() {
var dir = getApplicationContext().getCacheDir();
return dir.getAbsolutePath();
};
FileSystemAccess.prototype.getCurrentAppPath = function() {
return this.getLogicalRootPath() + "/app";
};
FileSystemAccess.prototype.read = function(path, onError) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileInputStream(javaFile);
var bytes = Array.create("byte", javaFile.length());
var dataInputStream = new java.io.DataInputStream(stream);
dataInputStream.readFully(bytes);
return bytes;
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.write = function(path, bytes, onError) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileOutputStream(javaFile);
stream.write(bytes, 0, bytes.length);
stream.close();
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.readText = function(path, onError, encoding) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileInputStream(javaFile);
var actualEncoding = encoding;
if (!actualEncoding) {
actualEncoding = textModule.encoding.UTF_8;
}
var reader = new java.io.InputStreamReader(stream, actualEncoding);
var bufferedReader = new java.io.BufferedReader(reader);
var line = undefined;
var result = "";
while (true) {
line = bufferedReader.readLine();
if (line === null) {
break;
}
if (result.length > 0) {
result += "\n";
}
result += line;
}
if (actualEncoding === textModule.encoding.UTF_8) {
result = FileSystemAccess._removeUtf8Bom(result);
}
bufferedReader.close();
return result;
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess._removeUtf8Bom = function(s) {
if (s.charCodeAt(0) === 65279) {
s = s.slice(1);
}
return s;
};
FileSystemAccess.prototype.writeText = function(path, content, onError, encoding) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileOutputStream(javaFile);
var actualEncoding = encoding;
if (!actualEncoding) {
actualEncoding = textModule.encoding.UTF_8;
}
var writer = new java.io.OutputStreamWriter(stream, actualEncoding);
writer.write(content);
writer.close();
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.deleteFolderContent = function(file) {
var filesList = file.listFiles();
if (filesList.length === 0) {
return true;
}
var i, childFile, success = false;
for (i = 0; i < filesList.length; i++) {
childFile = filesList[i];
if (childFile.getCanonicalFile().isDirectory()) {
success = this.deleteFolderContent(childFile);
if (!success) {
break;
}
}
success = childFile.delete();
}
return success;
};
FileSystemAccess.prototype.ensureFile = function(javaFile, isFolder, onError) {
try {
if (!javaFile.exists()) {
var created;
if (isFolder) {
created = javaFile.mkdirs();
} else {
javaFile.getParentFile().mkdirs();
created = javaFile.createNewFile();
}
if (!created) {
if (onError) {
onError("Failed to create new java File for path " + javaFile.getAbsolutePath());
}
return undefined;
} else {
javaFile.setReadable(true);
javaFile.setWritable(true);
}
}
var path = javaFile.getAbsolutePath();
return {
path: path,
name: javaFile.getName(),
extension: this.getFileExtension(path)
};
} catch (exception) {
if (onError) {
onError(exception);
}
return undefined;
}
};
FileSystemAccess.prototype.getFileExtension = function(path) {
var dotIndex = path.lastIndexOf(".");
if (dotIndex && dotIndex >= 0 && dotIndex < path.length) {
return path.substring(dotIndex);
}
return "";
};
FileSystemAccess.prototype.enumEntities = function(path, callback, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.getCanonicalFile().isDirectory()) {
if (onError) {
onError("There is no folder existing at path " + path);
}
return;
}
var filesList = javaFile.listFiles();
var length = filesList.length;
var i;
var info;
var retVal;
for (i = 0; i < length; i++) {
javaFile = filesList[i];
info = {
path: javaFile.getAbsolutePath(),
name: javaFile.getName()
};
if (javaFile.isFile()) {
info.extension = this.getFileExtension(info.path);
}
retVal = callback(info);
if (retVal === false) {
break;
}
}
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.getPathSeparator = function() {
return this._pathSeparator;
};
FileSystemAccess.prototype.normalizePath = function(path) {
var file = new java.io.File(path);
return file.getAbsolutePath();
};
FileSystemAccess.prototype.joinPath = function(left, right) {
var file1 = new java.io.File(left);
var file2 = new java.io.File(file1, right);
return file2.getPath();
};
FileSystemAccess.prototype.joinPaths = function(paths) {
if (!paths || paths.length === 0) {
return "";
}
if (paths.length === 1) {
return paths[0];
}
var i, result = paths[0];
for (i = 1; i < paths.length; i++) {
result = this.joinPath(result, paths[i]);
}
return result;
};
return FileSystemAccess;
}();
exports.FileSystemAccess = FileSystemAccess;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var encoding;
(function(encoding) {
encoding.ISO_8859_1 = "ISO-8859-1";
encoding.US_ASCII = "US-ASCII";
encoding.UTF_16 = "UTF-16";
encoding.UTF_16BE = "UTF-16BE";
encoding.UTF_16LE = "UTF-16LE";
encoding.UTF_8 = "UTF-8";
})(encoding = exports.encoding || (exports.encoding = {}));
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var appModule = __webpack_require__(3);
var MIN_TABLET_PIXELS = 600;
var platformNames;
(function(platformNames) {
platformNames.android = "Android";
platformNames.ios = "iOS";
})(platformNames = exports.platformNames || (exports.platformNames = {}));
var Device = function() {
function Device() {}
Object.defineProperty(Device.prototype, "os", {
get: function() {
return platformNames.android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "manufacturer", {
get: function() {
if (!this._manufacturer) {
this._manufacturer = android.os.Build.MANUFACTURER;
}
return this._manufacturer;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "osVersion", {
get: function() {
if (!this._osVersion) {
this._osVersion = android.os.Build.VERSION.RELEASE;
}
return this._osVersion;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "model", {
get: function() {
if (!this._model) {
this._model = android.os.Build.MODEL;
}
return this._model;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "sdkVersion", {
get: function() {
if (!this._sdkVersion) {
this._sdkVersion = android.os.Build.VERSION.SDK;
}
return this._sdkVersion;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "deviceType", {
get: function() {
if (!this._deviceType) {
var dips = Math.min(screen.mainScreen.widthPixels, screen.mainScreen.heightPixels) / screen.mainScreen.scale;
if (dips >= MIN_TABLET_PIXELS) {
this._deviceType = "Tablet";
} else {
this._deviceType = "Phone";
}
}
return this._deviceType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "uuid", {
get: function() {
if (!this._uuid) {
var nativeApp = appModule.android.nativeApp;
this._uuid = android.provider.Settings.Secure.getString(nativeApp.getContentResolver(), android.provider.Settings.Secure.ANDROID_ID);
}
return this._uuid;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "language", {
get: function() {
if (!this._language) {
this._language = java.util.Locale.getDefault().getLanguage().replace("_", "-");
}
return this._language;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "region", {
get: function() {
if (!this._region) {
this._region = java.util.Locale.getDefault().getCountry();
}
return this._region;
},
enumerable: true,
configurable: true
});
return Device;
}();
var MainScreen = function() {
function MainScreen() {}
MainScreen.prototype.cssChanged = function(args) {
if (!this._metrics) {
this._metrics = new android.util.DisplayMetrics();
}
this.initMetrics();
};
MainScreen.prototype.initMetrics = function() {
var nativeApp = appModule.getNativeApplication();
nativeApp.getSystemService(android.content.Context.WINDOW_SERVICE).getDefaultDisplay().getRealMetrics(this._metrics);
};
Object.defineProperty(MainScreen.prototype, "metrics", {
get: function() {
if (!this._metrics) {
appModule.on("cssChanged", this.cssChanged, this);
this._metrics = new android.util.DisplayMetrics();
this.initMetrics();
}
return this._metrics;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "widthPixels", {
get: function() {
return this.metrics.widthPixels;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "heightPixels", {
get: function() {
return this.metrics.heightPixels;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "scale", {
get: function() {
return this.metrics.density;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "widthDIPs", {
get: function() {
return this.metrics.widthPixels / this.metrics.density;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "heightDIPs", {
get: function() {
return this.metrics.heightPixels / this.metrics.density;
},
enumerable: true,
configurable: true
});
return MainScreen;
}();
exports.device = new Device();
var screen;
(function(screen) {
screen.mainScreen = new MainScreen();
})(screen = exports.screen || (exports.screen = {}));
exports.isAndroid = true;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var color_1 = __webpack_require__(24);
var Background = function() {
function Background() {
this.borderTopWidth = 0;
this.borderRightWidth = 0;
this.borderBottomWidth = 0;
this.borderLeftWidth = 0;
this.borderTopLeftRadius = 0;
this.borderTopRightRadius = 0;
this.borderBottomLeftRadius = 0;
this.borderBottomRightRadius = 0;
}
Background.prototype.clone = function() {
var clone = new Background();
clone.color = this.color;
clone.image = this.image;
clone.repeat = this.repeat;
clone.position = this.position;
clone.size = this.size;
clone.borderTopColor = this.borderTopColor;
clone.borderRightColor = this.borderRightColor;
clone.borderBottomColor = this.borderBottomColor;
clone.borderLeftColor = this.borderLeftColor;
clone.borderTopWidth = this.borderTopWidth;
clone.borderRightWidth = this.borderRightWidth;
clone.borderBottomWidth = this.borderBottomWidth;
clone.borderLeftWidth = this.borderLeftWidth;
clone.borderTopLeftRadius = this.borderTopLeftRadius;
clone.borderTopRightRadius = this.borderTopRightRadius;
clone.borderBottomRightRadius = this.borderBottomRightRadius;
clone.borderBottomLeftRadius = this.borderBottomLeftRadius;
clone.clipPath = this.clipPath;
return clone;
};
Background.prototype.withColor = function(value) {
var clone = this.clone();
clone.color = value;
return clone;
};
Background.prototype.withImage = function(value) {
var clone = this.clone();
clone.image = value;
return clone;
};
Background.prototype.withRepeat = function(value) {
var clone = this.clone();
clone.repeat = value;
return clone;
};
Background.prototype.withPosition = function(value) {
var clone = this.clone();
clone.position = value;
return clone;
};
Background.prototype.withSize = function(value) {
var clone = this.clone();
clone.size = value;
return clone;
};
Background.prototype.withBorderTopColor = function(value) {
var clone = this.clone();
clone.borderTopColor = value;
return clone;
};
Background.prototype.withBorderRightColor = function(value) {
var clone = this.clone();
clone.borderRightColor = value;
return clone;
};
Background.prototype.withBorderBottomColor = function(value) {
var clone = this.clone();
clone.borderBottomColor = value;
return clone;
};
Background.prototype.withBorderLeftColor = function(value) {
var clone = this.clone();
clone.borderLeftColor = value;
return clone;
};
Background.prototype.withBorderTopWidth = function(value) {
var clone = this.clone();
clone.borderTopWidth = value;
return clone;
};
Background.prototype.withBorderRightWidth = function(value) {
var clone = this.clone();
clone.borderRightWidth = value;
return clone;
};
Background.prototype.withBorderBottomWidth = function(value) {
var clone = this.clone();
clone.borderBottomWidth = value;
return clone;
};
Background.prototype.withBorderLeftWidth = function(value) {
var clone = this.clone();
clone.borderLeftWidth = value;
return clone;
};
Background.prototype.withBorderTopLeftRadius = function(value) {
var clone = this.clone();
clone.borderTopLeftRadius = value;
return clone;
};
Background.prototype.withBorderTopRightRadius = function(value) {
var clone = this.clone();
clone.borderTopRightRadius = value;
return clone;
};
Background.prototype.withBorderBottomRightRadius = function(value) {
var clone = this.clone();
clone.borderBottomRightRadius = value;
return clone;
};
Background.prototype.withBorderBottomLeftRadius = function(value) {
var clone = this.clone();
clone.borderBottomLeftRadius = value;
return clone;
};
Background.prototype.withClipPath = function(value) {
var clone = this.clone();
clone.clipPath = value;
return clone;
};
Background.prototype.isEmpty = function() {
return !this.color && !this.image && !this.hasBorderWidth() && !this.hasBorderRadius() && !this.clipPath;
};
Background.equals = function(value1, value2) {
if (!value1 && !value2) {
return true;
}
if (!value1 || !value2) {
return false;
}
return color_1.Color.equals(value1.color, value2.color) && value1.image === value2.image && value1.position === value2.position && value1.repeat === value2.repeat && value1.size === value2.size && color_1.Color.equals(value1.borderTopColor, value2.borderTopColor) && color_1.Color.equals(value1.borderRightColor, value2.borderRightColor) && color_1.Color.equals(value1.borderBottomColor, value2.borderBottomColor) && color_1.Color.equals(value1.borderLeftColor, value2.borderLeftColor) && value1.borderTopWidth === value2.borderTopWidth && value1.borderRightWidth === value2.borderRightWidth && value1.borderBottomWidth === value2.borderBottomWidth && value1.borderLeftWidth === value2.borderLeftWidth && value1.borderTopLeftRadius === value2.borderTopLeftRadius && value1.borderTopRightRadius === value2.borderTopRightRadius && value1.borderBottomRightRadius === value2.borderBottomRightRadius && value1.borderBottomLeftRadius === value2.borderBottomLeftRadius && value1.clipPath === value2.clipPath;
};
Background.prototype.hasBorderColor = function() {
return !!this.borderTopColor || !!this.borderRightColor || !!this.borderBottomColor || !!this.borderLeftColor;
};
Background.prototype.hasBorderWidth = function() {
return this.borderTopWidth > 0 || this.borderRightWidth > 0 || this.borderBottomWidth > 0 || this.borderLeftWidth > 0;
};
Background.prototype.hasBorderRadius = function() {
return this.borderTopLeftRadius > 0 || this.borderTopRightRadius > 0 || this.borderBottomRightRadius > 0 || this.borderBottomLeftRadius > 0;
};
Background.prototype.hasUniformBorderColor = function() {
return color_1.Color.equals(this.borderTopColor, this.borderRightColor) && color_1.Color.equals(this.borderTopColor, this.borderBottomColor) && color_1.Color.equals(this.borderTopColor, this.borderLeftColor);
};
Background.prototype.hasUniformBorderWidth = function() {
return this.borderTopWidth === this.borderRightWidth && this.borderTopWidth === this.borderBottomWidth && this.borderTopWidth === this.borderLeftWidth;
};
Background.prototype.hasUniformBorderRadius = function() {
return this.borderTopLeftRadius === this.borderTopRightRadius && this.borderTopLeftRadius === this.borderBottomRightRadius && this.borderTopLeftRadius === this.borderBottomLeftRadius;
};
Background.prototype.hasUniformBorder = function() {
return this.hasUniformBorderColor() && this.hasUniformBorderWidth() && this.hasUniformBorderRadius();
};
Background.prototype.getUniformBorderColor = function() {
if (this.hasUniformBorderColor()) {
return this.borderTopColor;
}
return undefined;
};
Background.prototype.getUniformBorderWidth = function() {
if (this.hasUniformBorderWidth()) {
return this.borderTopWidth;
}
return 0;
};
Background.prototype.getUniformBorderRadius = function() {
if (this.hasUniformBorderRadius()) {
return this.borderTopLeftRadius;
}
return 0;
};
Background.prototype.toString = function() {
return "isEmpty: " + this.isEmpty() + "; color: " + this.color + "; image: " + this.image + "; repeat: " + this.repeat + "; position: " + this.position + "; size: " + this.size + "; borderTopColor: " + this.borderTopColor + "; borderRightColor: " + this.borderRightColor + "; borderBottomColor: " + this.borderBottomColor + "; borderLeftColor: " + this.borderLeftColor + "; borderTopWidth: " + this.borderTopWidth + "; borderRightWidth: " + this.borderRightWidth + "; borderBottomWidth: " + this.borderBottomWidth + "; borderLeftWidth: " + this.borderLeftWidth + "; borderTopLeftRadius: " + this.borderTopLeftRadius + "; borderTopRightRadius: " + this.borderTopRightRadius + "; borderBottomRightRadius: " + this.borderBottomRightRadius + "; borderBottomLeftRadius: " + this.borderBottomLeftRadius + "; clipPath: " + this.clipPath + ";";
};
return Background;
}();
Background.default = new Background();
exports.Background = Background;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var common = __webpack_require__(25);
var Color = function(_super) {
__extends(Color, _super);
function Color() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(Color.prototype, "android", {
get: function() {
return this.argb >> 0;
},
enumerable: true,
configurable: true
});
return Color;
}(common.Color);
exports.Color = Color;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var types = __webpack_require__(17);
var knownColors = __webpack_require__(26);
var SHARP = "#";
var HEX_REGEX = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i;
var Color = function() {
function Color() {
if (arguments.length === 1) {
var arg = arguments[0];
if (types.isString(arg)) {
if (isRgbOrRgba(arg)) {
this._argb = argbFromRgbOrRgba(arg);
} else if (knownColors.isKnownName(arg)) {
var hex = knownColors.getKnownColor(arg);
this._name = arg;
this._argb = this._argbFromString(hex);
} else if (HEX_REGEX.test(arg)) {
var hex = this._normalizeHex(arg);
this._argb = this._argbFromString(hex);
} else {
throw new Error("Invalid color: " + arg);
}
} else if (types.isNumber(arg)) {
this._argb = arg >>> 0;
} else {
throw new Error("Expected 1 or 4 constructor parameters.");
}
} else if (arguments.length === 4) {
this._argb = (arguments[0] & 255) * 16777216 + (arguments[1] & 255) * 65536 + (arguments[2] & 255) * 256 + (arguments[3] & 255) * 1;
} else {
throw new Error("Expected 1 or 4 constructor parameters.");
}
}
Object.defineProperty(Color.prototype, "a", {
get: function() {
return this._argb / 16777216 & 255;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "r", {
get: function() {
return this._argb / 65536 & 255;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "g", {
get: function() {
return this._argb / 256 & 255;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "b", {
get: function() {
return this._argb / 1 & 255;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "argb", {
get: function() {
return this._argb;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "hex", {
get: function() {
if (this.a === 255) {
return ("#" + this._componentToHex(this.r) + this._componentToHex(this.g) + this._componentToHex(this.b)).toUpperCase();
} else {
return ("#" + this._componentToHex(this.a) + this._componentToHex(this.r) + this._componentToHex(this.g) + this._componentToHex(this.b)).toUpperCase();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "name", {
get: function() {
return this._name;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "ios", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "android", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Color.prototype._argbFromString = function(hex) {
if (hex.charAt(0) === "#") {
hex = hex.substr(1);
}
if (hex.length === 3) {
hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
} else if (hex.length === 4) {
hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];
}
var intVal = parseInt(hex, 16);
if (hex.length === 6) {
intVal = (intVal & 16777215) + 4278190080;
}
return intVal;
};
Color.prototype.equals = function(value) {
return value && this.argb === value.argb;
};
Color.equals = function(value1, value2) {
if (!value1 && !value2) {
return true;
}
if (!value1 || !value2) {
return false;
}
return value1.equals(value2);
};
Color.isValid = function(value) {
if (types.isNullOrUndefined(value) || value instanceof Color) {
return true;
}
if (!types.isString(value)) {
return false;
}
if (knownColors.isKnownName(value)) {
return true;
}
return HEX_REGEX.test(value) || isRgbOrRgba(value);
};
Color.prototype._componentToHex = function(component) {
var hex = component.toString(16);
if (hex.length === 1) {
hex = "0" + hex;
}
return hex;
};
Color.prototype._normalizeHex = function(hexStr) {
if (hexStr.charAt(0) === SHARP && hexStr.length === 4) {
hexStr = hexStr.charAt(0) + hexStr.charAt(1) + hexStr.charAt(1) + hexStr.charAt(2) + hexStr.charAt(2) + hexStr.charAt(3) + hexStr.charAt(3);
}
return hexStr;
};
Color.prototype.toString = function() {
return this.hex;
};
return Color;
}();
exports.Color = Color;
function isRgbOrRgba(value) {
var toLower = value.toLowerCase();
return (toLower.indexOf("rgb(") === 0 || toLower.indexOf("rgba(") === 0) && toLower.indexOf(")") === toLower.length - 1;
}
function argbFromRgbOrRgba(value) {
var toLower = value.toLowerCase();
var parts = toLower.replace("rgba(", "").replace("rgb(", "").replace(")", "").trim().split(",");
var r = 255;
var g = 255;
var b = 255;
var a = 255;
if (parts[0]) {
r = parseInt(parts[0].trim());
}
if (parts[1]) {
g = parseInt(parts[1].trim());
}
if (parts[2]) {
b = parseInt(parts[2].trim());
}
if (parts[3]) {
a = Math.round(parseFloat(parts[3].trim()) * 255);
}
return (a & 255) * 16777216 + (r & 255) * 65536 + (g & 255) * 256 + (b & 255) * 1;
}
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
exports.Transparent = "#00000000";
exports.AliceBlue = "#F0F8FF";
exports.AntiqueWhite = "#FAEBD7";
exports.Aqua = "#00FFFF";
exports.Aquamarine = "#7FFFD4";
exports.Azure = "#F0FFFF";
exports.Beige = "#F5F5DC";
exports.Bisque = "#FFE4C4";
exports.Black = "#000000";
exports.BlanchedAlmond = "#FFEBCD";
exports.Blue = "#0000FF";
exports.BlueViolet = "#8A2BE2";
exports.Brown = "#A52A2A";
exports.BurlyWood = "#DEB887";
exports.CadetBlue = "#5F9EA0";
exports.Chartreuse = "#7FFF00";
exports.Chocolate = "#D2691E";
exports.Coral = "#FF7F50";
exports.CornflowerBlue = "#6495ED";
exports.Cornsilk = "#FFF8DC";
exports.Crimson = "#DC143C";
exports.Cyan = "#00FFFF";
exports.DarkBlue = "#00008B";
exports.DarkCyan = "#008B8B";
exports.DarkGoldenRod = "#B8860B";
exports.DarkGray = "#A9A9A9";
exports.DarkGreen = "#006400";
exports.DarkKhaki = "#BDB76B";
exports.DarkMagenta = "#8B008B";
exports.DarkOliveGreen = "#556B2F";
exports.DarkOrange = "#FF8C00";
exports.DarkOrchid = "#9932CC";
exports.DarkRed = "#8B0000";
exports.DarkSalmon = "#E9967A";
exports.DarkSeaGreen = "#8FBC8F";
exports.DarkSlateBlue = "#483D8B";
exports.DarkSlateGray = "#2F4F4F";
exports.DarkTurquoise = "#00CED1";
exports.DarkViolet = "#9400D3";
exports.DeepPink = "#FF1493";
exports.DeepSkyBlue = "#00BFFF";
exports.DimGray = "#696969";
exports.DodgerBlue = "#1E90FF";
exports.FireBrick = "#B22222";
exports.FloralWhite = "#FFFAF0";
exports.ForestGreen = "#228B22";
exports.Fuchsia = "#FF00FF";
exports.Gainsboro = "#DCDCDC";
exports.GhostWhite = "#F8F8FF";
exports.Gold = "#FFD700";
exports.GoldenRod = "#DAA520";
exports.Gray = "#808080";
exports.Green = "#008000";
exports.GreenYellow = "#ADFF2F";
exports.HoneyDew = "#F0FFF0";
exports.HotPink = "#FF69B4";
exports.IndianRed = "#CD5C5C";
exports.Indigo = "#4B0082";
exports.Ivory = "#FFFFF0";
exports.Khaki = "#F0E68C";
exports.Lavender = "#E6E6FA";
exports.LavenderBlush = "#FFF0F5";
exports.LawnGreen = "#7CFC00";
exports.LemonChiffon = "#FFFACD";
exports.LightBlue = "#ADD8E6";
exports.LightCoral = "#F08080";
exports.LightCyan = "#E0FFFF";
exports.LightGoldenRodYellow = "#FAFAD2";
exports.LightGray = "#D3D3D3";
exports.LightGreen = "#90EE90";
exports.LightPink = "#FFB6C1";
exports.LightSalmon = "#FFA07A";
exports.LightSeaGreen = "#20B2AA";
exports.LightSkyBlue = "#87CEFA";
exports.LightSlateGray = "#778899";
exports.LightSteelBlue = "#B0C4DE";
exports.LightYellow = "#FFFFE0";
exports.Lime = "#00FF00";
exports.LimeGreen = "#32CD32";
exports.Linen = "#FAF0E6";
exports.Magenta = "#FF00FF";
exports.Maroon = "#800000";
exports.MediumAquaMarine = "#66CDAA";
exports.MediumBlue = "#0000CD";
exports.MediumOrchid = "#BA55D3";
exports.MediumPurple = "#9370DB";
exports.MediumSeaGreen = "#3CB371";
exports.MediumSlateBlue = "#7B68EE";
exports.MediumSpringGreen = "#00FA9A";
exports.MediumTurquoise = "#48D1CC";
exports.MediumVioletRed = "#C71585";
exports.MidnightBlue = "#191970";
exports.MintCream = "#F5FFFA";
exports.MistyRose = "#FFE4E1";
exports.Moccasin = "#FFE4B5";
exports.NavajoWhite = "#FFDEAD";
exports.Navy = "#000080";
exports.OldLace = "#FDF5E6";
exports.Olive = "#808000";
exports.OliveDrab = "#6B8E23";
exports.Orange = "#FFA500";
exports.OrangeRed = "#FF4500";
exports.Orchid = "#DA70D6";
exports.PaleGoldenRod = "#EEE8AA";
exports.PaleGreen = "#98FB98";
exports.PaleTurquoise = "#AFEEEE";
exports.PaleVioletRed = "#DB7093";
exports.PapayaWhip = "#FFEFD5";
exports.PeachPuff = "#FFDAB9";
exports.Peru = "#CD853F";
exports.Pink = "#FFC0CB";
exports.Plum = "#DDA0DD";
exports.PowderBlue = "#B0E0E6";
exports.Purple = "#800080";
exports.Red = "#FF0000";
exports.RosyBrown = "#BC8F8F";
exports.RoyalBlue = "#4169E1";
exports.SaddleBrown = "#8B4513";
exports.Salmon = "#FA8072";
exports.SandyBrown = "#F4A460";
exports.SeaGreen = "#2E8B57";
exports.SeaShell = "#FFF5EE";
exports.Sienna = "#A0522D";
exports.Silver = "#C0C0C0";
exports.SkyBlue = "#87CEEB";
exports.SlateBlue = "#6A5ACD";
exports.SlateGray = "#708090";
exports.Snow = "#FFFAFA";
exports.SpringGreen = "#00FF7F";
exports.SteelBlue = "#4682B4";
exports.Tan = "#D2B48C";
exports.Teal = "#008080";
exports.Thistle = "#D8BFD8";
exports.Tomato = "#FF6347";
exports.Turquoise = "#40E0D0";
exports.Violet = "#EE82EE";
exports.Wheat = "#F5DEB3";
exports.White = "#FFFFFF";
exports.WhiteSmoke = "#F5F5F5";
exports.Yellow = "#FFFF00";
exports.YellowGreen = "#9ACD32";
var _allColors = {};
(function() {
var name;
var underscore = "_";
for (var p in exports) {
name = p;
if (name.charAt(0) !== underscore) {
_allColors[name.toLowerCase()] = exports[p];
}
}
})();
function isKnownName(name) {
if (!name) {
return undefined;
}
return name.toLowerCase() in _allColors;
}
exports.isKnownName = isKnownName;
function getKnownColor(name) {
if (!name) {
return undefined;
}
return _allColors[name.toLowerCase()];
}
exports.getKnownColor = getKnownColor;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var style_properties_1 = __webpack_require__(28);
var debug_1 = __webpack_require__(34);
var view_base_1 = __webpack_require__(36);
var gestures_1 = __webpack_require__(54);
__export(__webpack_require__(28));
__export(__webpack_require__(36));
var animationModule;
function ensureAnimationModule() {
if (!animationModule) {
animationModule = __webpack_require__(49);
}
}
function PseudoClassHandler() {
var pseudoClasses = [];
for (var _i = 0; _i < arguments.length; _i++) {
pseudoClasses[_i] = arguments[_i];
}
var stateEventNames = pseudoClasses.map(function(s) {
return ":" + s;
});
var listeners = Symbol("listeners");
return function(target, propertyKey, descriptor) {
function update(change) {
var prev = this[listeners] || 0;
var next = prev + change;
if (prev <= 0 && next > 0) {
this[propertyKey](true);
} else if (prev > 0 && next <= 0) {
this[propertyKey](false);
}
}
stateEventNames.forEach(function(s) {
return target[s] = update;
});
};
}
exports.PseudoClassHandler = PseudoClassHandler;
var ViewCommon = function(_super) {
__extends(ViewCommon, _super);
function ViewCommon() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._gestureObservers = {};
return _this;
}
ViewCommon.prototype.observe = function(type, callback, thisArg) {
if (!this._gestureObservers[type]) {
this._gestureObservers[type] = [];
}
this._gestureObservers[type].push(gestures_1.observe(this, type, callback, thisArg));
};
ViewCommon.prototype.getGestureObservers = function(type) {
return this._gestureObservers[type];
};
ViewCommon.prototype.addEventListener = function(arg, callback, thisArg) {
if (typeof arg === "string") {
arg = view_base_1.getEventOrGestureName(arg);
var gesture = gestures_1.fromString(arg);
if (gesture && !this._isEvent(arg)) {
this.observe(gesture, callback, thisArg);
} else {
var events = arg.split(",");
if (events.length > 0) {
for (var i = 0; i < events.length; i++) {
var evt = events[i].trim();
var gst = gestures_1.fromString(evt);
if (gst && !this._isEvent(arg)) {
this.observe(gst, callback, thisArg);
} else {
_super.prototype.addEventListener.call(this, evt, callback, thisArg);
}
}
} else {
_super.prototype.addEventListener.call(this, arg, callback, thisArg);
}
}
} else if (typeof arg === "number") {
this.observe(arg, callback, thisArg);
}
};
ViewCommon.prototype.removeEventListener = function(arg, callback, thisArg) {
if (typeof arg === "string") {
var gesture = gestures_1.fromString(arg);
if (gesture && !this._isEvent(arg)) {
this._disconnectGestureObservers(gesture);
} else {
var events = arg.split(",");
if (events.length > 0) {
for (var i = 0; i < events.length; i++) {
var evt = events[i].trim();
var gst = gestures_1.fromString(evt);
if (gst && !this._isEvent(arg)) {
this._disconnectGestureObservers(gst);
} else {
_super.prototype.removeEventListener.call(this, evt, callback, thisArg);
}
}
} else {
_super.prototype.removeEventListener.call(this, arg, callback, thisArg);
}
}
} else if (typeof arg === "number") {
this._disconnectGestureObservers(arg);
}
};
ViewCommon.prototype._isEvent = function(name) {
return this.constructor && name + "Event" in this.constructor;
};
ViewCommon.prototype._disconnectGestureObservers = function(type) {
var observers = this.getGestureObservers(type);
if (observers) {
for (var i = 0; i < observers.length; i++) {
observers[i].disconnect();
}
}
};
Object.defineProperty(ViewCommon.prototype, "borderColor", {
get: function() {
return this.style.borderColor;
},
set: function(value) {
this.style.borderColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderTopColor", {
get: function() {
return this.style.borderTopColor;
},
set: function(value) {
this.style.borderTopColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderRightColor", {
get: function() {
return this.style.borderRightColor;
},
set: function(value) {
this.style.borderRightColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderBottomColor", {
get: function() {
return this.style.borderBottomColor;
},
set: function(value) {
this.style.borderBottomColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderLeftColor", {
get: function() {
return this.style.borderLeftColor;
},
set: function(value) {
this.style.borderLeftColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderWidth", {
get: function() {
return this.style.borderWidth;
},
set: function(value) {
this.style.borderWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderTopWidth", {
get: function() {
return this.style.borderTopWidth;
},
set: function(value) {
this.style.borderTopWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderRightWidth", {
get: function() {
return this.style.borderRightWidth;
},
set: function(value) {
this.style.borderRightWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderBottomWidth", {
get: function() {
return this.style.borderBottomWidth;
},
set: function(value) {
this.style.borderBottomWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderLeftWidth", {
get: function() {
return this.style.borderLeftWidth;
},
set: function(value) {
this.style.borderLeftWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderRadius", {
get: function() {
return this.style.borderRadius;
},
set: function(value) {
this.style.borderRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderTopLeftRadius", {
get: function() {
return this.style.borderTopLeftRadius;
},
set: function(value) {
this.style.borderTopLeftRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderTopRightRadius", {
get: function() {
return this.style.borderTopRightRadius;
},
set: function(value) {
this.style.borderTopRightRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderBottomRightRadius", {
get: function() {
return this.style.borderBottomRightRadius;
},
set: function(value) {
this.style.borderBottomRightRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "borderBottomLeftRadius", {
get: function() {
return this.style.borderBottomLeftRadius;
},
set: function(value) {
this.style.borderBottomLeftRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "color", {
get: function() {
return this.style.color;
},
set: function(value) {
this.style.color = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "backgroundColor", {
get: function() {
return this.style.backgroundColor;
},
set: function(value) {
this.style.backgroundColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "backgroundImage", {
get: function() {
return this.style.backgroundImage;
},
set: function(value) {
this.style.backgroundImage = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "minWidth", {
get: function() {
return this.style.minWidth;
},
set: function(value) {
this.style.minWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "minHeight", {
get: function() {
return this.style.minHeight;
},
set: function(value) {
this.style.minHeight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "width", {
get: function() {
return this.style.width;
},
set: function(value) {
this.style.width = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "height", {
get: function() {
return this.style.height;
},
set: function(value) {
this.style.height = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "margin", {
get: function() {
return this.style.margin;
},
set: function(value) {
this.style.margin = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "marginLeft", {
get: function() {
return this.style.marginLeft;
},
set: function(value) {
this.style.marginLeft = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "marginTop", {
get: function() {
return this.style.marginTop;
},
set: function(value) {
this.style.marginTop = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "marginRight", {
get: function() {
return this.style.marginRight;
},
set: function(value) {
this.style.marginRight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "marginBottom", {
get: function() {
return this.style.marginBottom;
},
set: function(value) {
this.style.marginBottom = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "horizontalAlignment", {
get: function() {
return this.style.horizontalAlignment;
},
set: function(value) {
this.style.horizontalAlignment = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "verticalAlignment", {
get: function() {
return this.style.verticalAlignment;
},
set: function(value) {
this.style.verticalAlignment = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "visibility", {
get: function() {
return this.style.visibility;
},
set: function(value) {
this.style.visibility = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "opacity", {
get: function() {
return this.style.opacity;
},
set: function(value) {
this.style.opacity = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "rotate", {
get: function() {
return this.style.rotate;
},
set: function(value) {
this.style.rotate = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "translateX", {
get: function() {
return this.style.translateX;
},
set: function(value) {
this.style.translateX = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "translateY", {
get: function() {
return this.style.translateY;
},
set: function(value) {
this.style.translateY = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "scaleX", {
get: function() {
return this.style.scaleX;
},
set: function(value) {
this.style.scaleX = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "scaleY", {
get: function() {
return this.style.scaleY;
},
set: function(value) {
this.style.scaleY = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "isLayoutValid", {
get: function() {
return this._isLayoutValid;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "cssType", {
get: function() {
if (!this._cssType) {
this._cssType = this.typeName.toLowerCase();
}
return this._cssType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewCommon.prototype, "isLayoutRequired", {
get: function() {
return true;
},
enumerable: true,
configurable: true
});
ViewCommon.prototype.measure = function(widthMeasureSpec, heightMeasureSpec) {
this._setCurrentMeasureSpecs(widthMeasureSpec, heightMeasureSpec);
};
ViewCommon.prototype.layout = function(left, top, right, bottom) {
this._setCurrentLayoutBounds(left, top, right, bottom);
};
ViewCommon.prototype.getMeasuredWidth = function() {
return this._measuredWidth & view_base_1.layout.MEASURED_SIZE_MASK || 0;
};
ViewCommon.prototype.getMeasuredHeight = function() {
return this._measuredHeight & view_base_1.layout.MEASURED_SIZE_MASK || 0;
};
ViewCommon.prototype.getMeasuredState = function() {
return this._measuredWidth & view_base_1.layout.MEASURED_STATE_MASK | this._measuredHeight >> view_base_1.layout.MEASURED_HEIGHT_STATE_SHIFT & view_base_1.layout.MEASURED_STATE_MASK >> view_base_1.layout.MEASURED_HEIGHT_STATE_SHIFT;
};
ViewCommon.prototype.setMeasuredDimension = function(measuredWidth, measuredHeight) {
this._measuredWidth = measuredWidth;
this._measuredHeight = measuredHeight;
if (view_base_1.traceEnabled()) {
view_base_1.traceWrite(this + " :setMeasuredDimension: " + measuredWidth + ", " + measuredHeight, view_base_1.traceCategories.Layout);
}
};
ViewCommon.prototype.requestLayout = function() {
this._isLayoutValid = false;
};
ViewCommon.resolveSizeAndState = function(size, specSize, specMode, childMeasuredState) {
var result = size;
switch (specMode) {
case view_base_1.layout.UNSPECIFIED:
result = Math.ceil(size);
break;

case view_base_1.layout.AT_MOST:
if (specSize < size) {
result = Math.ceil(specSize) | view_base_1.layout.MEASURED_STATE_TOO_SMALL;
}
break;

case view_base_1.layout.EXACTLY:
result = Math.ceil(specSize);
break;
}
return result | childMeasuredState & view_base_1.layout.MEASURED_STATE_MASK;
};
ViewCommon.combineMeasuredStates = function(curState, newState) {
return curState | newState;
};
ViewCommon.layoutChild = function(parent, child, left, top, right, bottom) {
if (!child || child.isCollapsed) {
return;
}
var childStyle = child.style;
var childTop;
var childLeft;
var childWidth = child.getMeasuredWidth();
var childHeight = child.getMeasuredHeight();
var effectiveMarginTop = child.effectiveMarginTop;
var effectiveMarginBottom = child.effectiveMarginBottom;
var vAlignment;
if (child.effectiveHeight >= 0 && childStyle.verticalAlignment === "stretch") {
vAlignment = "middle";
} else {
vAlignment = childStyle.verticalAlignment;
}
switch (vAlignment) {
case "top":
childTop = top + effectiveMarginTop;
break;

case "middle":
childTop = top + (bottom - top - childHeight + (effectiveMarginTop - effectiveMarginBottom)) / 2;
break;

case "bottom":
childTop = bottom - childHeight - effectiveMarginBottom;
break;

case "stretch":
default:
childTop = top + effectiveMarginTop;
childHeight = bottom - top - (effectiveMarginTop + effectiveMarginBottom);
break;
}
var effectiveMarginLeft = child.effectiveMarginLeft;
var effectiveMarginRight = child.effectiveMarginRight;
var hAlignment;
if (child.effectiveWidth >= 0 && childStyle.horizontalAlignment === "stretch") {
hAlignment = "center";
} else {
hAlignment = childStyle.horizontalAlignment;
}
switch (hAlignment) {
case "left":
childLeft = left + effectiveMarginLeft;
break;

case "center":
childLeft = left + (right - left - childWidth + (effectiveMarginLeft - effectiveMarginRight)) / 2;
break;

case "right":
childLeft = right - childWidth - effectiveMarginRight;
break;

case "stretch":
default:
childLeft = left + effectiveMarginLeft;
childWidth = right - left - (effectiveMarginLeft + effectiveMarginRight);
break;
}
var childRight = Math.round(childLeft + childWidth);
var childBottom = Math.round(childTop + childHeight);
childLeft = Math.round(childLeft);
childTop = Math.round(childTop);
if (view_base_1.traceEnabled()) {
view_base_1.traceWrite(child.parent + " :layoutChild: " + child + " " + childLeft + ", " + childTop + ", " + childRight + ", " + childBottom, view_base_1.traceCategories.Layout);
}
child.layout(childLeft, childTop, childRight, childBottom);
};
ViewCommon.measureChild = function(parent, child, widthMeasureSpec, heightMeasureSpec) {
var measureWidth = 0;
var measureHeight = 0;
if (child && !child.isCollapsed) {
child._updateEffectiveLayoutValues(parent);
var style = child.style;
var horizontalMargins = child.effectiveMarginLeft + child.effectiveMarginRight;
var verticalMargins = child.effectiveMarginTop + child.effectiveMarginBottom;
var childWidthMeasureSpec = ViewCommon.getMeasureSpec(widthMeasureSpec, horizontalMargins, child.effectiveWidth, style.horizontalAlignment === "stretch");
var childHeightMeasureSpec = ViewCommon.getMeasureSpec(heightMeasureSpec, verticalMargins, child.effectiveHeight, style.verticalAlignment === "stretch");
if (view_base_1.traceEnabled()) {
view_base_1.traceWrite(child.parent + " :measureChild: " + child + " " + view_base_1.layout.measureSpecToString(childWidthMeasureSpec) + ", " + view_base_1.layout.measureSpecToString(childHeightMeasureSpec), view_base_1.traceCategories.Layout);
}
child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
measureWidth = Math.round(child.getMeasuredWidth() + horizontalMargins);
measureHeight = Math.round(child.getMeasuredHeight() + verticalMargins);
}
return {
measuredWidth: measureWidth,
measuredHeight: measureHeight
};
};
ViewCommon.getMeasureSpec = function(parentSpec, margins, childLength, stretched) {
var parentLength = view_base_1.layout.getMeasureSpecSize(parentSpec);
var parentSpecMode = view_base_1.layout.getMeasureSpecMode(parentSpec);
var resultSize;
var resultMode;
if (childLength >= 0) {
resultSize = parentSpecMode === view_base_1.layout.UNSPECIFIED ? childLength : Math.min(parentLength, childLength);
resultMode = view_base_1.layout.EXACTLY;
} else {
switch (parentSpecMode) {
case view_base_1.layout.EXACTLY:
resultSize = Math.max(0, parentLength - margins);
resultMode = stretched ? view_base_1.layout.EXACTLY : view_base_1.layout.AT_MOST;
break;

case view_base_1.layout.AT_MOST:
resultSize = Math.max(0, parentLength - margins);
resultMode = view_base_1.layout.AT_MOST;
break;

case view_base_1.layout.UNSPECIFIED:
resultSize = 0;
resultMode = view_base_1.layout.UNSPECIFIED;
break;
}
}
return view_base_1.layout.makeMeasureSpec(resultSize, resultMode);
};
ViewCommon.prototype._setCurrentMeasureSpecs = function(widthMeasureSpec, heightMeasureSpec) {
var changed = this._currentWidthMeasureSpec !== widthMeasureSpec || this._currentHeightMeasureSpec !== heightMeasureSpec;
this._currentWidthMeasureSpec = widthMeasureSpec;
this._currentHeightMeasureSpec = heightMeasureSpec;
return changed;
};
ViewCommon.prototype._getCurrentLayoutBounds = function() {
return {
left: this._oldLeft,
top: this._oldTop,
right: this._oldRight,
bottom: this._oldBottom
};
};
ViewCommon.prototype._setCurrentLayoutBounds = function(left, top, right, bottom) {
this._isLayoutValid = true;
var boundsChanged = this._oldLeft !== left || this._oldTop !== top || this._oldRight !== right || this._oldBottom !== bottom;
var sizeChanged = this._oldRight - this._oldLeft !== right - left || this._oldBottom - this._oldTop !== bottom - top;
this._oldLeft = left;
this._oldTop = top;
this._oldRight = right;
this._oldBottom = bottom;
return {
boundsChanged: boundsChanged,
sizeChanged: sizeChanged
};
};
ViewCommon.prototype.eachChild = function(callback) {
this.eachChildView(callback);
};
ViewCommon.prototype.eachChildView = function(callback) {};
ViewCommon.prototype._getNativeViewsCount = function() {
return this._isAddedToNativeVisualTree ? 1 : 0;
};
ViewCommon.prototype._eachLayoutView = function(callback) {
return callback(this);
};
ViewCommon.prototype._updateLayout = function() {};
ViewCommon.prototype.focus = function() {
return undefined;
};
ViewCommon.prototype.getLocationInWindow = function() {
return undefined;
};
ViewCommon.prototype.getLocationOnScreen = function() {
return undefined;
};
ViewCommon.prototype.getLocationRelativeTo = function(otherView) {
return undefined;
};
ViewCommon.prototype.getActualSize = function() {
var currentBounds = this._getCurrentLayoutBounds();
if (!currentBounds) {
return undefined;
}
return {
width: view_base_1.layout.toDeviceIndependentPixels(currentBounds.right - currentBounds.left),
height: view_base_1.layout.toDeviceIndependentPixels(currentBounds.bottom - currentBounds.top)
};
};
ViewCommon.prototype.animate = function(animation) {
return this.createAnimation(animation).play();
};
ViewCommon.prototype.createAnimation = function(animation) {
ensureAnimationModule();
animation.target = this;
return new animationModule.Animation([ animation ]);
};
ViewCommon.prototype.toString = function() {
var str = this.typeName;
if (this.id) {
str += "<" + this.id + ">";
} else {
str += "(" + this._domId + ")";
}
var source = debug_1.Source.get(this);
if (source) {
str += "@" + source + ";";
}
return str;
};
ViewCommon.prototype._setNativeViewFrame = function(nativeView, frame) {};
ViewCommon.prototype._getValue = function() {
throw new Error("The View._setValue is obsolete. There is a new property system.");
};
ViewCommon.prototype._setValue = function() {
throw new Error("The View._setValue is obsolete. There is a new property system.");
};
ViewCommon.prototype._updateEffectiveLayoutValues = function(parent) {
var style = this.style;
var parentWidthMeasureSpec = parent._currentWidthMeasureSpec;
var parentWidthMeasureSize = view_base_1.layout.getMeasureSpecSize(parentWidthMeasureSpec);
var parentWidthMeasureMode = view_base_1.layout.getMeasureSpecMode(parentWidthMeasureSpec);
var parentAvailableWidth = parentWidthMeasureMode === view_base_1.layout.UNSPECIFIED ? -1 : parentWidthMeasureSize;
this.effectiveWidth = style_properties_1.PercentLength.toDevicePixels(style.width, -2, parentAvailableWidth);
this.effectiveMarginLeft = style_properties_1.PercentLength.toDevicePixels(style.marginLeft, 0, parentAvailableWidth);
this.effectiveMarginRight = style_properties_1.PercentLength.toDevicePixels(style.marginRight, 0, parentAvailableWidth);
var parentHeightMeasureSpec = parent._currentHeightMeasureSpec;
var parentHeightMeasureSize = view_base_1.layout.getMeasureSpecSize(parentHeightMeasureSpec);
var parentHeightMeasureMode = view_base_1.layout.getMeasureSpecMode(parentHeightMeasureSpec);
var parentAvailableHeight = parentHeightMeasureMode === view_base_1.layout.UNSPECIFIED ? -1 : parentHeightMeasureSize;
this.effectiveHeight = style_properties_1.PercentLength.toDevicePixels(style.height, -2, parentAvailableHeight);
this.effectiveMarginTop = style_properties_1.PercentLength.toDevicePixels(style.marginTop, 0, parentAvailableHeight);
this.effectiveMarginBottom = style_properties_1.PercentLength.toDevicePixels(style.marginBottom, 0, parentAvailableHeight);
};
ViewCommon.prototype._setNativeClipToBounds = function() {};
return ViewCommon;
}(view_base_1.ViewBase);
exports.ViewCommon = ViewCommon;
exports.automationTextProperty = new view_base_1.Property({
name: "automationText"
});
exports.automationTextProperty.register(ViewCommon);
exports.originXProperty = new view_base_1.Property({
name: "originX",
defaultValue: .5,
valueConverter: function(v) {
return parseFloat(v);
}
});
exports.originXProperty.register(ViewCommon);
exports.originYProperty = new view_base_1.Property({
name: "originY",
defaultValue: .5,
valueConverter: function(v) {
return parseFloat(v);
}
});
exports.originYProperty.register(ViewCommon);
exports.isEnabledProperty = new view_base_1.Property({
name: "isEnabled",
defaultValue: true,
valueConverter: view_base_1.booleanConverter,
valueChanged: function(target, oldValue, newValue) {
target._goToVisualState(newValue ? "normal" : "disabled");
}
});
exports.isEnabledProperty.register(ViewCommon);
exports.isUserInteractionEnabledProperty = new view_base_1.Property({
name: "isUserInteractionEnabled",
defaultValue: true,
valueConverter: view_base_1.booleanConverter
});
exports.isUserInteractionEnabledProperty.register(ViewCommon);
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var color_1 = __webpack_require__(24);
var font_1 = __webpack_require__(29);
var utils_1 = __webpack_require__(14);
var background_1 = __webpack_require__(13);
var platform_1 = __webpack_require__(22);
var style_1 = __webpack_require__(33);
var properties_1 = __webpack_require__(31);
function equalsCommon(a, b) {
if (a == "auto") {
return b == "auto";
}
if (typeof a === "number") {
if (b == "auto") {
return false;
}
if (typeof b === "number") {
return a == b;
}
return b.unit == "dip" && a == b.value;
}
if (b == "auto") {
return false;
}
if (typeof b === "number") {
return a.unit == "dip" && a.value == b;
}
return a.value == b.value && a.unit == b.unit;
}
function convertToStringCommon(length) {
if (length == "auto") {
return "auto";
}
if (typeof length === "number") {
return length.toString();
}
var val = length.value;
if (length.unit === "%") {
val *= 100;
}
return val + length.unit;
}
function toDevicePixelsCommon(length, auto, parentAvailableWidth) {
if (auto === void 0) {
auto = Number.NaN;
}
if (parentAvailableWidth === void 0) {
parentAvailableWidth = Number.NaN;
}
if (length == "auto") {
return auto;
}
if (typeof length === "number") {
return utils_1.layout.round(utils_1.layout.toDevicePixels(length));
}
switch (length.unit) {
case "px":
return utils_1.layout.round(length.value);

case "%":
return utils_1.layout.round(parentAvailableWidth * length.value);

case "dip":
default:
return utils_1.layout.round(utils_1.layout.toDevicePixels(length.value));
}
}
var PercentLength;
(function(PercentLength) {
function parse(fromValue) {
if (fromValue == "auto") {
return "auto";
}
if (typeof fromValue === "string") {
var stringValue = fromValue.trim();
var percentIndex = stringValue.indexOf("%");
if (percentIndex !== -1) {
var value = void 0;
if (percentIndex !== stringValue.length - 1 || percentIndex === 0) {
value = Number.NaN;
} else {
value = parseFloat(stringValue.substring(0, stringValue.length - 1).trim()) / 100;
}
if (isNaN(value) || !isFinite(value)) {
throw new Error("Invalid value: " + fromValue);
}
return {
unit: "%",
value: value
};
} else if (stringValue.indexOf("px") !== -1) {
stringValue = stringValue.replace("px", "").trim();
var value = parseFloat(stringValue);
if (isNaN(value) || !isFinite(value)) {
throw new Error("Invalid value: " + fromValue);
}
return {
unit: "px",
value: value
};
} else {
var value = parseFloat(stringValue);
if (isNaN(value) || !isFinite(value)) {
throw new Error("Invalid value: " + fromValue);
}
return value;
}
} else {
return fromValue;
}
}
PercentLength.parse = parse;
PercentLength.equals = equalsCommon;
PercentLength.toDevicePixels = toDevicePixelsCommon;
PercentLength.convertToString = convertToStringCommon;
})(PercentLength = exports.PercentLength || (exports.PercentLength = {}));
var Length;
(function(Length) {
function parse(fromValue) {
if (fromValue == "auto") {
return "auto";
}
if (typeof fromValue === "string") {
var stringValue = fromValue.trim();
if (stringValue.indexOf("px") !== -1) {
stringValue = stringValue.replace("px", "").trim();
var value = parseFloat(stringValue);
if (isNaN(value) || !isFinite(value)) {
throw new Error("Invalid value: " + stringValue);
}
return {
unit: "px",
value: value
};
} else {
var value = parseFloat(stringValue);
if (isNaN(value) || !isFinite(value)) {
throw new Error("Invalid value: " + stringValue);
}
return value;
}
} else {
return fromValue;
}
}
Length.parse = parse;
Length.equals = equalsCommon;
Length.toDevicePixels = toDevicePixelsCommon;
Length.convertToString = convertToStringCommon;
})(Length = exports.Length || (exports.Length = {}));
exports.zeroLength = {
value: 0,
unit: "px"
};
exports.minWidthProperty = new properties_1.CssProperty({
name: "minWidth",
cssName: "min-width",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
target.view.effectiveMinWidth = Length.toDevicePixels(newValue, 0);
},
valueConverter: Length.parse
});
exports.minWidthProperty.register(style_1.Style);
exports.minHeightProperty = new properties_1.CssProperty({
name: "minHeight",
cssName: "min-height",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
target.view.effectiveMinHeight = Length.toDevicePixels(newValue, 0);
},
valueConverter: Length.parse
});
exports.minHeightProperty.register(style_1.Style);
exports.widthProperty = new properties_1.CssProperty({
name: "width",
cssName: "width",
defaultValue: "auto",
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueConverter: PercentLength.parse
});
exports.widthProperty.register(style_1.Style);
exports.heightProperty = new properties_1.CssProperty({
name: "height",
cssName: "height",
defaultValue: "auto",
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueConverter: PercentLength.parse
});
exports.heightProperty.register(style_1.Style);
var marginProperty = new properties_1.ShorthandProperty({
name: "margin",
cssName: "margin",
getter: function() {
if (PercentLength.equals(this.marginTop, this.marginRight) && PercentLength.equals(this.marginTop, this.marginBottom) && PercentLength.equals(this.marginTop, this.marginLeft)) {
return this.marginTop;
}
return PercentLength.convertToString(this.marginTop) + " " + PercentLength.convertToString(this.marginRight) + " " + PercentLength.convertToString(this.marginBottom) + " " + PercentLength.convertToString(this.marginLeft);
},
converter: convertToMargins
});
marginProperty.register(style_1.Style);
exports.marginLeftProperty = new properties_1.CssProperty({
name: "marginLeft",
cssName: "margin-left",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueConverter: PercentLength.parse
});
exports.marginLeftProperty.register(style_1.Style);
exports.marginRightProperty = new properties_1.CssProperty({
name: "marginRight",
cssName: "margin-right",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueConverter: PercentLength.parse
});
exports.marginRightProperty.register(style_1.Style);
exports.marginTopProperty = new properties_1.CssProperty({
name: "marginTop",
cssName: "margin-top",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueConverter: PercentLength.parse
});
exports.marginTopProperty.register(style_1.Style);
exports.marginBottomProperty = new properties_1.CssProperty({
name: "marginBottom",
cssName: "margin-bottom",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueConverter: PercentLength.parse
});
exports.marginBottomProperty.register(style_1.Style);
var paddingProperty = new properties_1.ShorthandProperty({
name: "padding",
cssName: "padding",
getter: function() {
if (Length.equals(this.paddingTop, this.paddingRight) && Length.equals(this.paddingTop, this.paddingBottom) && Length.equals(this.paddingTop, this.paddingLeft)) {
return this.paddingTop;
}
return Length.convertToString(this.paddingTop) + " " + Length.convertToString(this.paddingRight) + " " + Length.convertToString(this.paddingBottom) + " " + Length.convertToString(this.paddingLeft);
},
converter: convertToPaddings
});
paddingProperty.register(style_1.Style);
exports.paddingLeftProperty = new properties_1.CssProperty({
name: "paddingLeft",
cssName: "padding-left",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
target.view.effectivePaddingLeft = Length.toDevicePixels(newValue, 0);
},
valueConverter: Length.parse
});
exports.paddingLeftProperty.register(style_1.Style);
exports.paddingRightProperty = new properties_1.CssProperty({
name: "paddingRight",
cssName: "padding-right",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
target.view.effectivePaddingRight = Length.toDevicePixels(newValue, 0);
},
valueConverter: Length.parse
});
exports.paddingRightProperty.register(style_1.Style);
exports.paddingTopProperty = new properties_1.CssProperty({
name: "paddingTop",
cssName: "padding-top",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
target.view.effectivePaddingTop = Length.toDevicePixels(newValue, 0);
},
valueConverter: Length.parse
});
exports.paddingTopProperty.register(style_1.Style);
exports.paddingBottomProperty = new properties_1.CssProperty({
name: "paddingBottom",
cssName: "padding-bottom",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
target.view.effectivePaddingBottom = Length.toDevicePixels(newValue, 0);
},
valueConverter: Length.parse
});
exports.paddingBottomProperty.register(style_1.Style);
var HorizontalAlignment;
(function(HorizontalAlignment) {
HorizontalAlignment.LEFT = "left";
HorizontalAlignment.CENTER = "center";
HorizontalAlignment.RIGHT = "right";
HorizontalAlignment.STRETCH = "stretch";
HorizontalAlignment.isValid = properties_1.makeValidator(HorizontalAlignment.LEFT, HorizontalAlignment.CENTER, HorizontalAlignment.RIGHT, HorizontalAlignment.STRETCH);
HorizontalAlignment.parse = properties_1.makeParser(HorizontalAlignment.isValid);
})(HorizontalAlignment = exports.HorizontalAlignment || (exports.HorizontalAlignment = {}));
exports.horizontalAlignmentProperty = new properties_1.CssProperty({
name: "horizontalAlignment",
cssName: "horizontal-align",
defaultValue: HorizontalAlignment.STRETCH,
affectsLayout: platform_1.isIOS,
valueConverter: HorizontalAlignment.parse
});
exports.horizontalAlignmentProperty.register(style_1.Style);
var VerticalAlignment;
(function(VerticalAlignment) {
VerticalAlignment.TOP = "top";
VerticalAlignment.MIDDLE = "middle";
VerticalAlignment.BOTTOM = "bottom";
VerticalAlignment.STRETCH = "stretch";
VerticalAlignment.isValid = properties_1.makeValidator(VerticalAlignment.TOP, VerticalAlignment.MIDDLE, VerticalAlignment.BOTTOM, VerticalAlignment.STRETCH);
VerticalAlignment.parse = function(value) {
return value.toLowerCase() === "center" ? VerticalAlignment.MIDDLE : parseStrict(value);
};
var parseStrict = properties_1.makeParser(VerticalAlignment.isValid);
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));
exports.verticalAlignmentProperty = new properties_1.CssProperty({
name: "verticalAlignment",
cssName: "vertical-align",
defaultValue: VerticalAlignment.STRETCH,
affectsLayout: platform_1.isIOS,
valueConverter: VerticalAlignment.parse
});
exports.verticalAlignmentProperty.register(style_1.Style);
function parseThickness(value) {
if (typeof value === "string") {
var arr = value.split(/[ ,]+/);
var top_1;
var right = void 0;
var bottom = void 0;
var left = void 0;
if (arr.length === 1) {
top_1 = arr[0];
right = arr[0];
bottom = arr[0];
left = arr[0];
} else if (arr.length === 2) {
top_1 = arr[0];
bottom = arr[0];
right = arr[1];
left = arr[1];
} else if (arr.length === 3) {
top_1 = arr[0];
right = arr[1];
left = arr[1];
bottom = arr[2];
} else if (arr.length === 4) {
top_1 = arr[0];
right = arr[1];
bottom = arr[2];
left = arr[3];
} else {
throw new Error("Expected 1, 2, 3 or 4 parameters. Actual: " + value);
}
return {
top: top_1,
right: right,
bottom: bottom,
left: left
};
} else {
return value;
}
}
function convertToMargins(value) {
if (typeof value === "string" && value !== "auto") {
var thickness = parseThickness(value);
return [ [ exports.marginTopProperty, PercentLength.parse(thickness.top) ], [ exports.marginRightProperty, PercentLength.parse(thickness.right) ], [ exports.marginBottomProperty, PercentLength.parse(thickness.bottom) ], [ exports.marginLeftProperty, PercentLength.parse(thickness.left) ] ];
} else {
return [ [ exports.marginTopProperty, value ], [ exports.marginRightProperty, value ], [ exports.marginBottomProperty, value ], [ exports.marginLeftProperty, value ] ];
}
}
function convertToPaddings(value) {
if (typeof value === "string" && value !== "auto") {
var thickness = parseThickness(value);
return [ [ exports.paddingTopProperty, Length.parse(thickness.top) ], [ exports.paddingRightProperty, Length.parse(thickness.right) ], [ exports.paddingBottomProperty, Length.parse(thickness.bottom) ], [ exports.paddingLeftProperty, Length.parse(thickness.left) ] ];
} else {
return [ [ exports.paddingTopProperty, value ], [ exports.paddingRightProperty, value ], [ exports.paddingBottomProperty, value ], [ exports.paddingLeftProperty, value ] ];
}
}
exports.rotateProperty = new properties_1.CssAnimationProperty({
name: "rotate",
cssName: "rotate",
defaultValue: 0,
valueConverter: parseFloat
});
exports.rotateProperty.register(style_1.Style);
exports.scaleXProperty = new properties_1.CssAnimationProperty({
name: "scaleX",
cssName: "scaleX",
defaultValue: 1,
valueConverter: parseFloat
});
exports.scaleXProperty.register(style_1.Style);
exports.scaleYProperty = new properties_1.CssAnimationProperty({
name: "scaleY",
cssName: "scaleY",
defaultValue: 1,
valueConverter: parseFloat
});
exports.scaleYProperty.register(style_1.Style);
function parseDIPs(value) {
if (value.indexOf("px") !== -1) {
return utils_1.layout.toDeviceIndependentPixels(parseFloat(value.replace("px", "").trim()));
} else {
return parseFloat(value.replace("dip", "").trim());
}
}
exports.translateXProperty = new properties_1.CssAnimationProperty({
name: "translateX",
cssName: "translateX",
defaultValue: 0,
valueConverter: parseDIPs
});
exports.translateXProperty.register(style_1.Style);
exports.translateYProperty = new properties_1.CssAnimationProperty({
name: "translateY",
cssName: "translateY",
defaultValue: 0,
valueConverter: parseDIPs
});
exports.translateYProperty.register(style_1.Style);
var transformProperty = new properties_1.ShorthandProperty({
name: "transform",
cssName: "transform",
getter: function() {
var scaleX = this.scaleX;
var scaleY = this.scaleY;
var translateX = this.translateX;
var translateY = this.translateY;
var rotate = this.rotate;
var result = "";
if (translateX !== 0 || translateY !== 0) {
result += "translate(" + translateX + ", " + translateY + ") ";
}
if (scaleX !== 1 || scaleY !== 1) {
result += "scale(" + scaleX + ", " + scaleY + ") ";
}
if (rotate !== 0) {
result += "rotate (" + rotate + ")";
}
return result.trim();
},
converter: convertToTransform
});
transformProperty.register(style_1.Style);
function transformConverter(value) {
if (value.indexOf("none") !== -1) {
var operations_1 = {};
operations_1[value] = value;
return operations_1;
}
var operations = {};
var operator = "";
var pos = 0;
while (pos < value.length) {
if (value[pos] === " " || value[pos] === ",") {
pos++;
} else if (value[pos] === "(") {
var start = pos + 1;
while (pos < value.length && value[pos] !== ")") {
pos++;
}
var operand = value.substring(start, pos);
operations[operator] = operand.trim();
operator = "";
pos++;
} else {
operator += value[pos++];
}
}
return operations;
}
function convertToTransform(value) {
var newTransform = value === properties_1.unsetValue ? {
none: "none"
} : transformConverter(value);
var array = [];
var values;
for (var transform in newTransform) {
switch (transform) {
case "scaleX":
array.push([ exports.scaleXProperty, newTransform[transform] ]);
break;

case "scaleY":
array.push([ exports.scaleYProperty, newTransform[transform] ]);
break;

case "scale":
case "scale3d":
values = newTransform[transform].split(",");
if (values.length >= 2) {
array.push([ exports.scaleXProperty, values[0] ]);
array.push([ exports.scaleYProperty, values[1] ]);
} else if (values.length === 1) {
array.push([ exports.scaleXProperty, values[0] ]);
array.push([ exports.scaleYProperty, values[0] ]);
}
break;

case "translateX":
array.push([ exports.translateXProperty, newTransform[transform] ]);
break;

case "translateY":
array.push([ exports.translateYProperty, newTransform[transform] ]);
break;

case "translate":
case "translate3d":
values = newTransform[transform].split(",");
if (values.length >= 2) {
array.push([ exports.translateXProperty, values[0] ]);
array.push([ exports.translateYProperty, values[1] ]);
} else if (values.length === 1) {
array.push([ exports.translateXProperty, values[0] ]);
array.push([ exports.translateYProperty, values[0] ]);
}
break;

case "rotate":
var text = newTransform[transform];
var val = parseFloat(text);
if (text.slice(-3) === "rad") {
val = val * (180 / Math.PI);
}
array.push([ exports.rotateProperty, val ]);
break;

case "none":
array.push([ exports.scaleXProperty, 1 ]);
array.push([ exports.scaleYProperty, 1 ]);
array.push([ exports.translateXProperty, 0 ]);
array.push([ exports.translateYProperty, 0 ]);
array.push([ exports.rotateProperty, 0 ]);
break;
}
}
return array;
}
exports.backgroundInternalProperty = new properties_1.CssProperty({
name: "backgroundInternal",
cssName: "_backgroundInternal",
defaultValue: background_1.Background.default
});
exports.backgroundInternalProperty.register(style_1.Style);
exports.backgroundImageProperty = new properties_1.CssProperty({
name: "backgroundImage",
cssName: "background-image",
valueChanged: function(target, oldValue, newValue) {
var background = target.backgroundInternal;
target.backgroundInternal = background.withImage(newValue);
}
});
exports.backgroundImageProperty.register(style_1.Style);
exports.backgroundColorProperty = new properties_1.CssAnimationProperty({
name: "backgroundColor",
cssName: "background-color",
valueChanged: function(target, oldValue, newValue) {
var background = target.backgroundInternal;
target.backgroundInternal = background.withColor(newValue);
},
equalityComparer: color_1.Color.equals,
valueConverter: function(value) {
return new color_1.Color(value);
}
});
exports.backgroundColorProperty.register(style_1.Style);
var BackgroundRepeat;
(function(BackgroundRepeat) {
BackgroundRepeat.REPEAT = "repeat";
BackgroundRepeat.REPEAT_X = "repeat-x";
BackgroundRepeat.REPEAT_Y = "repeat-y";
BackgroundRepeat.NO_REPEAT = "no-repeat";
BackgroundRepeat.isValid = properties_1.makeValidator(BackgroundRepeat.REPEAT, BackgroundRepeat.REPEAT_X, BackgroundRepeat.REPEAT_Y, BackgroundRepeat.NO_REPEAT);
BackgroundRepeat.parse = properties_1.makeParser(BackgroundRepeat.isValid);
})(BackgroundRepeat = exports.BackgroundRepeat || (exports.BackgroundRepeat = {}));
exports.backgroundRepeatProperty = new properties_1.CssProperty({
name: "backgroundRepeat",
cssName: "background-repeat",
valueConverter: BackgroundRepeat.parse,
valueChanged: function(target, oldValue, newValue) {
var background = target.backgroundInternal;
target.backgroundInternal = background.withRepeat(newValue);
}
});
exports.backgroundRepeatProperty.register(style_1.Style);
exports.backgroundSizeProperty = new properties_1.CssProperty({
name: "backgroundSize",
cssName: "background-size",
valueChanged: function(target, oldValue, newValue) {
var background = target.backgroundInternal;
target.backgroundInternal = background.withSize(newValue);
}
});
exports.backgroundSizeProperty.register(style_1.Style);
exports.backgroundPositionProperty = new properties_1.CssProperty({
name: "backgroundPosition",
cssName: "background-position",
valueChanged: function(target, oldValue, newValue) {
var background = target.backgroundInternal;
target.backgroundInternal = background.withPosition(newValue);
}
});
exports.backgroundPositionProperty.register(style_1.Style);
function parseBorderColor(value) {
var result = {
top: undefined,
right: undefined,
bottom: undefined,
left: undefined
};
if (value.indexOf("rgb") === 0) {
result.top = result.right = result.bottom = result.left = new color_1.Color(value);
return result;
}
var arr = value.split(/[ ,]+/);
if (arr.length === 1) {
var arr0 = new color_1.Color(arr[0]);
result.top = arr0;
result.right = arr0;
result.bottom = arr0;
result.left = arr0;
} else if (arr.length === 2) {
var arr0 = new color_1.Color(arr[0]);
var arr1 = new color_1.Color(arr[1]);
result.top = arr0;
result.right = arr1;
result.bottom = arr0;
result.left = arr1;
} else if (arr.length === 3) {
var arr0 = new color_1.Color(arr[0]);
var arr1 = new color_1.Color(arr[1]);
var arr2 = new color_1.Color(arr[2]);
result.top = arr0;
result.right = arr1;
result.bottom = arr2;
result.left = arr1;
} else if (arr.length === 4) {
var arr0 = new color_1.Color(arr[0]);
var arr1 = new color_1.Color(arr[1]);
var arr2 = new color_1.Color(arr[2]);
var arr3 = new color_1.Color(arr[3]);
result.top = arr0;
result.right = arr1;
result.bottom = arr2;
result.left = arr3;
} else {
throw new Error("Expected 1, 2, 3 or 4 parameters. Actual: " + value);
}
return result;
}
var borderColorProperty = new properties_1.ShorthandProperty({
name: "borderColor",
cssName: "border-color",
getter: function() {
if (color_1.Color.equals(this.borderTopColor, this.borderRightColor) && color_1.Color.equals(this.borderTopColor, this.borderBottomColor) && color_1.Color.equals(this.borderTopColor, this.borderLeftColor)) {
return this.borderTopColor;
} else {
return this.borderTopColor + " " + this.borderRightColor + " " + this.borderBottomColor + " " + this.borderLeftColor;
}
},
converter: function(value) {
if (typeof value === "string") {
var fourColors = parseBorderColor(value);
return [ [ exports.borderTopColorProperty, fourColors.top ], [ exports.borderRightColorProperty, fourColors.right ], [ exports.borderBottomColorProperty, fourColors.bottom ], [ exports.borderLeftColorProperty, fourColors.left ] ];
} else {
return [ [ exports.borderTopColorProperty, value ], [ exports.borderRightColorProperty, value ], [ exports.borderBottomColorProperty, value ], [ exports.borderLeftColorProperty, value ] ];
}
}
});
borderColorProperty.register(style_1.Style);
exports.borderTopColorProperty = new properties_1.CssProperty({
name: "borderTopColor",
cssName: "border-top-color",
valueChanged: function(target, oldValue, newValue) {
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderTopColor(newValue);
},
equalityComparer: color_1.Color.equals,
valueConverter: function(value) {
return new color_1.Color(value);
}
});
exports.borderTopColorProperty.register(style_1.Style);
exports.borderRightColorProperty = new properties_1.CssProperty({
name: "borderRightColor",
cssName: "border-right-color",
valueChanged: function(target, oldValue, newValue) {
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderRightColor(newValue);
},
equalityComparer: color_1.Color.equals,
valueConverter: function(value) {
return new color_1.Color(value);
}
});
exports.borderRightColorProperty.register(style_1.Style);
exports.borderBottomColorProperty = new properties_1.CssProperty({
name: "borderBottomColor",
cssName: "border-bottom-color",
valueChanged: function(target, oldValue, newValue) {
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderBottomColor(newValue);
},
equalityComparer: color_1.Color.equals,
valueConverter: function(value) {
return new color_1.Color(value);
}
});
exports.borderBottomColorProperty.register(style_1.Style);
exports.borderLeftColorProperty = new properties_1.CssProperty({
name: "borderLeftColor",
cssName: "border-left-color",
valueChanged: function(target, oldValue, newValue) {
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderLeftColor(newValue);
},
equalityComparer: color_1.Color.equals,
valueConverter: function(value) {
return new color_1.Color(value);
}
});
exports.borderLeftColorProperty.register(style_1.Style);
var borderWidthProperty = new properties_1.ShorthandProperty({
name: "borderWidth",
cssName: "border-width",
getter: function() {
if (Length.equals(this.borderTopWidth, this.borderRightWidth) && Length.equals(this.borderTopWidth, this.borderBottomWidth) && Length.equals(this.borderTopWidth, this.borderLeftWidth)) {
return this.borderTopWidth;
} else {
return Length.convertToString(this.borderTopWidth) + " " + Length.convertToString(this.borderRightWidth) + " " + Length.convertToString(this.borderBottomWidth) + " " + Length.convertToString(this.borderLeftWidth);
}
},
converter: function(value) {
if (typeof value === "string" && value !== "auto") {
var borderWidths = parseThickness(value);
return [ [ exports.borderTopWidthProperty, borderWidths.top ], [ exports.borderRightWidthProperty, borderWidths.right ], [ exports.borderBottomWidthProperty, borderWidths.bottom ], [ exports.borderLeftWidthProperty, borderWidths.left ] ];
} else {
return [ [ exports.borderTopWidthProperty, value ], [ exports.borderRightWidthProperty, value ], [ exports.borderBottomWidthProperty, value ], [ exports.borderLeftWidthProperty, value ] ];
}
}
});
borderWidthProperty.register(style_1.Style);
exports.borderTopWidthProperty = new properties_1.CssProperty({
name: "borderTopWidth",
cssName: "border-top-width",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
var value = Length.toDevicePixels(newValue, 0);
if (!isNonNegativeFiniteNumber(value)) {
throw new Error("border-top-width should be Non-Negative Finite number. Value: " + value);
}
target.view.effectiveBorderTopWidth = value;
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderTopWidth(value);
},
valueConverter: Length.parse
});
exports.borderTopWidthProperty.register(style_1.Style);
exports.borderRightWidthProperty = new properties_1.CssProperty({
name: "borderRightWidth",
cssName: "border-right-width",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
var value = Length.toDevicePixels(newValue, 0);
if (!isNonNegativeFiniteNumber(value)) {
throw new Error("border-right-width should be Non-Negative Finite number. Value: " + value);
}
target.view.effectiveBorderRightWidth = value;
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderRightWidth(value);
},
valueConverter: Length.parse
});
exports.borderRightWidthProperty.register(style_1.Style);
exports.borderBottomWidthProperty = new properties_1.CssProperty({
name: "borderBottomWidth",
cssName: "border-bottom-width",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
var value = Length.toDevicePixels(newValue, 0);
if (!isNonNegativeFiniteNumber(value)) {
throw new Error("border-bottom-width should be Non-Negative Finite number. Value: " + value);
}
target.view.effectiveBorderBottomWidth = value;
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderBottomWidth(value);
},
valueConverter: Length.parse
});
exports.borderBottomWidthProperty.register(style_1.Style);
exports.borderLeftWidthProperty = new properties_1.CssProperty({
name: "borderLeftWidth",
cssName: "border-left-width",
defaultValue: exports.zeroLength,
affectsLayout: platform_1.isIOS,
equalityComparer: Length.equals,
valueChanged: function(target, oldValue, newValue) {
var value = Length.toDevicePixels(newValue, 0);
if (!isNonNegativeFiniteNumber(value)) {
throw new Error("border-left-width should be Non-Negative Finite number. Value: " + value);
}
target.view.effectiveBorderLeftWidth = value;
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderLeftWidth(value);
},
valueConverter: Length.parse
});
exports.borderLeftWidthProperty.register(style_1.Style);
var borderRadiusProperty = new properties_1.ShorthandProperty({
name: "borderRadius",
cssName: "border-radius",
getter: function() {
if (Length.equals(this.borderTopLeftRadius, this.borderTopRightRadius) && Length.equals(this.borderTopLeftRadius, this.borderBottomRightRadius) && Length.equals(this.borderTopLeftRadius, this.borderBottomLeftRadius)) {
return this.borderTopLeftRadius;
}
return Length.convertToString(this.borderTopLeftRadius) + " " + Length.convertToString(this.borderTopRightRadius) + " " + Length.convertToString(this.borderBottomRightRadius) + " " + Length.convertToString(this.borderBottomLeftRadius);
},
converter: function(value) {
if (typeof value === "string") {
var borderRadius = parseThickness(value);
return [ [ exports.borderTopLeftRadiusProperty, borderRadius.top ], [ exports.borderTopRightRadiusProperty, borderRadius.right ], [ exports.borderBottomRightRadiusProperty, borderRadius.bottom ], [ exports.borderBottomLeftRadiusProperty, borderRadius.left ] ];
} else {
return [ [ exports.borderTopLeftRadiusProperty, value ], [ exports.borderTopRightRadiusProperty, value ], [ exports.borderBottomRightRadiusProperty, value ], [ exports.borderBottomLeftRadiusProperty, value ] ];
}
}
});
borderRadiusProperty.register(style_1.Style);
exports.borderTopLeftRadiusProperty = new properties_1.CssProperty({
name: "borderTopLeftRadius",
cssName: "border-top-left-radius",
defaultValue: 0,
affectsLayout: platform_1.isIOS,
valueChanged: function(target, oldValue, newValue) {
var value = Length.toDevicePixels(newValue, 0);
if (!isNonNegativeFiniteNumber(value)) {
throw new Error("border-top-left-radius should be Non-Negative Finite number. Value: " + value);
}
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderTopLeftRadius(value);
},
valueConverter: Length.parse
});
exports.borderTopLeftRadiusProperty.register(style_1.Style);
exports.borderTopRightRadiusProperty = new properties_1.CssProperty({
name: "borderTopRightRadius",
cssName: "border-top-right-radius",
defaultValue: 0,
affectsLayout: platform_1.isIOS,
valueChanged: function(target, oldValue, newValue) {
var value = Length.toDevicePixels(newValue, 0);
if (!isNonNegativeFiniteNumber(value)) {
throw new Error("border-top-right-radius should be Non-Negative Finite number. Value: " + value);
}
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderTopRightRadius(value);
},
valueConverter: Length.parse
});
exports.borderTopRightRadiusProperty.register(style_1.Style);
exports.borderBottomRightRadiusProperty = new properties_1.CssProperty({
name: "borderBottomRightRadius",
cssName: "border-bottom-right-radius",
defaultValue: 0,
affectsLayout: platform_1.isIOS,
valueChanged: function(target, oldValue, newValue) {
var value = Length.toDevicePixels(newValue, 0);
if (!isNonNegativeFiniteNumber(value)) {
throw new Error("border-bottom-right-radius should be Non-Negative Finite number. Value: " + value);
}
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderBottomRightRadius(value);
},
valueConverter: Length.parse
});
exports.borderBottomRightRadiusProperty.register(style_1.Style);
exports.borderBottomLeftRadiusProperty = new properties_1.CssProperty({
name: "borderBottomLeftRadius",
cssName: "border-bottom-left-radius",
defaultValue: 0,
affectsLayout: platform_1.isIOS,
valueChanged: function(target, oldValue, newValue) {
var value = Length.toDevicePixels(newValue, 0);
if (!isNonNegativeFiniteNumber(value)) {
throw new Error("border-bottom-left-radius should be Non-Negative Finite number. Value: " + value);
}
var background = target.backgroundInternal;
target.backgroundInternal = background.withBorderBottomLeftRadius(value);
},
valueConverter: Length.parse
});
exports.borderBottomLeftRadiusProperty.register(style_1.Style);
function isNonNegativeFiniteNumber(value) {
return isFinite(value) && !isNaN(value) && value >= 0;
}
var supportedPaths = [ "rect", "circle", "ellipse", "polygon", "inset" ];
function isClipPathValid(value) {
if (!value) {
return true;
}
var functionName = value.substring(0, value.indexOf("(")).trim();
return supportedPaths.indexOf(functionName) !== -1;
}
exports.clipPathProperty = new properties_1.CssProperty({
name: "clipPath",
cssName: "clip-path",
valueChanged: function(target, oldValue, newValue) {
if (!isClipPathValid(newValue)) {
throw new Error("clip-path is not valid.");
}
var background = target.backgroundInternal;
target.backgroundInternal = background.withClipPath(newValue);
}
});
exports.clipPathProperty.register(style_1.Style);
function isFloatValueConverter(value) {
var newValue = parseFloat(value);
if (isNaN(newValue)) {
throw new Error("Invalid value: " + newValue);
}
return newValue;
}
exports.zIndexProperty = new properties_1.CssProperty({
name: "zIndex",
cssName: "z-index",
defaultValue: Number.NaN,
valueConverter: isFloatValueConverter
});
exports.zIndexProperty.register(style_1.Style);
function opacityConverter(value) {
var newValue = parseFloat(value);
if (!isNaN(newValue) && 0 <= newValue && newValue <= 1) {
return newValue;
}
throw new Error("Opacity should be between [0, 1]. Value: " + newValue);
}
exports.opacityProperty = new properties_1.CssAnimationProperty({
name: "opacity",
cssName: "opacity",
defaultValue: 1,
valueConverter: opacityConverter
});
exports.opacityProperty.register(style_1.Style);
exports.colorProperty = new properties_1.InheritedCssProperty({
name: "color",
cssName: "color",
equalityComparer: color_1.Color.equals,
valueConverter: function(v) {
return new color_1.Color(v);
}
});
exports.colorProperty.register(style_1.Style);
exports.fontInternalProperty = new properties_1.CssProperty({
name: "fontInternal",
cssName: "_fontInternal",
defaultValue: font_1.Font.default
});
exports.fontInternalProperty.register(style_1.Style);
exports.fontFamilyProperty = new properties_1.InheritedCssProperty({
name: "fontFamily",
cssName: "font-family",
affectsLayout: platform_1.isIOS,
valueChanged: function(target, oldValue, newValue) {
var currentFont = target.fontInternal;
if (currentFont.fontFamily !== newValue) {
var newFont = currentFont.withFontFamily(newValue);
target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
}
}
});
exports.fontFamilyProperty.register(style_1.Style);
exports.fontSizeProperty = new properties_1.InheritedCssProperty({
name: "fontSize",
cssName: "font-size",
affectsLayout: platform_1.isIOS,
valueChanged: function(target, oldValue, newValue) {
var currentFont = target.fontInternal;
if (currentFont.fontSize !== newValue) {
var newFont = currentFont.withFontSize(newValue);
target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
}
},
valueConverter: function(v) {
return parseFloat(v);
}
});
exports.fontSizeProperty.register(style_1.Style);
exports.fontStyleProperty = new properties_1.InheritedCssProperty({
name: "fontStyle",
cssName: "font-style",
affectsLayout: platform_1.isIOS,
defaultValue: font_1.FontStyle.NORMAL,
valueConverter: font_1.FontStyle.parse,
valueChanged: function(target, oldValue, newValue) {
var currentFont = target.fontInternal;
if (currentFont.fontStyle !== newValue) {
var newFont = currentFont.withFontStyle(newValue);
target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
}
}
});
exports.fontStyleProperty.register(style_1.Style);
exports.fontWeightProperty = new properties_1.InheritedCssProperty({
name: "fontWeight",
cssName: "font-weight",
affectsLayout: platform_1.isIOS,
defaultValue: font_1.FontWeight.NORMAL,
valueConverter: font_1.FontWeight.parse,
valueChanged: function(target, oldValue, newValue) {
var currentFont = target.fontInternal;
if (currentFont.fontWeight !== newValue) {
var newFont = currentFont.withFontWeight(newValue);
target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
}
}
});
exports.fontWeightProperty.register(style_1.Style);
var fontProperty = new properties_1.ShorthandProperty({
name: "font",
cssName: "font",
getter: function() {
return this.fontStyle + " " + this.fontWeight + " " + this.fontSize + " " + this.fontFamily;
},
converter: function(value) {
if (value === properties_1.unsetValue) {
return [ [ exports.fontStyleProperty, properties_1.unsetValue ], [ exports.fontWeightProperty, properties_1.unsetValue ], [ exports.fontSizeProperty, properties_1.unsetValue ], [ exports.fontFamilyProperty, properties_1.unsetValue ] ];
} else {
var font = font_1.parseFont(value);
var fontSize = parseFloat(font.fontSize);
return [ [ exports.fontStyleProperty, font.fontStyle ], [ exports.fontWeightProperty, font.fontWeight ], [ exports.fontSizeProperty, fontSize ], [ exports.fontFamilyProperty, font.fontFamily ] ];
}
}
});
fontProperty.register(style_1.Style);
var Visibility;
(function(Visibility) {
Visibility.VISIBLE = "visible";
Visibility.HIDDEN = "hidden";
Visibility.COLLAPSE = "collapse";
Visibility.isValid = properties_1.makeValidator(Visibility.VISIBLE, Visibility.HIDDEN, Visibility.COLLAPSE);
Visibility.parse = function(value) {
return value.toLowerCase() === "collapsed" ? Visibility.COLLAPSE : parseStrict(value);
};
var parseStrict = properties_1.makeParser(Visibility.isValid);
})(Visibility = exports.Visibility || (exports.Visibility = {}));
exports.visibilityProperty = new properties_1.CssProperty({
name: "visibility",
cssName: "visibility",
defaultValue: Visibility.VISIBLE,
affectsLayout: platform_1.isIOS,
valueConverter: Visibility.parse,
valueChanged: function(target, oldValue, newValue) {
target.view.isCollapsed = newValue === Visibility.COLLAPSE;
}
});
exports.visibilityProperty.register(style_1.Style);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var font_common_1 = __webpack_require__(30);
var trace_1 = __webpack_require__(15);
var application = __webpack_require__(3);
var fs = __webpack_require__(19);
__export(__webpack_require__(30));
var FONTS_BASE_PATH = "/fonts/";
var typefaceCache = new Map();
var appAssets;
var Font = function(_super) {
__extends(Font, _super);
function Font(family, size, style, weight) {
return _super.call(this, family, size, style, weight) || this;
}
Font.prototype.withFontFamily = function(family) {
return new Font(family, this.fontSize, this.fontStyle, this.fontWeight);
};
Font.prototype.withFontStyle = function(style) {
return new Font(this.fontFamily, this.fontSize, style, this.fontWeight);
};
Font.prototype.withFontWeight = function(weight) {
return new Font(this.fontFamily, this.fontSize, this.fontStyle, weight);
};
Font.prototype.withFontSize = function(size) {
return new Font(this.fontFamily, size, this.fontStyle, this.fontWeight);
};
Font.prototype.getAndroidTypeface = function() {
if (!this._typeface) {
var fontStyle = 0;
if (this.isBold) {
fontStyle |= android.graphics.Typeface.BOLD;
}
if (this.isItalic) {
fontStyle |= android.graphics.Typeface.ITALIC;
}
this._typeface = createTypeface(this, fontStyle);
}
return this._typeface;
};
Font.prototype.getUIFont = function(defaultFont) {
return undefined;
};
return Font;
}(font_common_1.FontBase);
Font.default = new Font(undefined, undefined, "normal", "normal");
exports.Font = Font;
function loadFontFromFile(fontFamily) {
appAssets = appAssets || application.android.context.getAssets();
if (!appAssets) {
return null;
}
var result = typefaceCache.get(fontFamily);
if (result === undefined) {
result = null;
var fontAssetPath = void 0;
var basePath = fs.path.join(fs.knownFolders.currentApp().path, "fonts", fontFamily);
if (fs.File.exists(basePath + ".ttf")) {
fontAssetPath = FONTS_BASE_PATH + fontFamily + ".ttf";
} else if (fs.File.exists(basePath + ".otf")) {
fontAssetPath = FONTS_BASE_PATH + fontFamily + ".otf";
} else {
if (trace_1.isEnabled()) {
trace_1.write("Could not find font file for " + fontFamily, trace_1.categories.Error, trace_1.messageType.error);
}
}
if (fontAssetPath) {
try {
fontAssetPath = fs.path.join(fs.knownFolders.currentApp().path, fontAssetPath);
result = android.graphics.Typeface.createFromFile(fontAssetPath);
} catch (e) {
if (trace_1.isEnabled()) {
trace_1.write("Error loading font asset: " + fontAssetPath, trace_1.categories.Error, trace_1.messageType.error);
}
}
}
typefaceCache.set(fontFamily, result);
}
return result;
}
function createTypeface(font, fontStyle) {
var fonts = font_common_1.parseFontFamily(font.fontFamily);
var result = null;
for (var i = 0; i < fonts.length && !result; i++) {
switch (fonts[i].toLowerCase()) {
case font_common_1.genericFontFamilies.serif:
result = android.graphics.Typeface.create("serif" + getFontWeightSuffix(font.fontWeight), fontStyle);
break;

case font_common_1.genericFontFamilies.sansSerif:
case font_common_1.genericFontFamilies.system:
result = android.graphics.Typeface.create("sans-serif" + getFontWeightSuffix(font.fontWeight), fontStyle);
break;

case font_common_1.genericFontFamilies.monospace:
result = android.graphics.Typeface.create("monospace" + getFontWeightSuffix(font.fontWeight), fontStyle);
break;

default:
result = loadFontFromFile(fonts[i]);
if (fontStyle) {
result = android.graphics.Typeface.create(result, fontStyle);
}
break;
}
}
if (fontStyle && !result) {
result = android.graphics.Typeface.create(result, fontStyle);
}
return result;
}
function getFontWeightSuffix(fontWeight) {
switch (fontWeight) {
case font_common_1.FontWeight.THIN:
return android.os.Build.VERSION.SDK_INT >= 16 ? "-thin" : "";

case font_common_1.FontWeight.EXTRA_LIGHT:
case font_common_1.FontWeight.LIGHT:
return android.os.Build.VERSION.SDK_INT >= 16 ? "-light" : "";

case font_common_1.FontWeight.NORMAL:
case "400":
case undefined:
case null:
return "";

case font_common_1.FontWeight.MEDIUM:
case font_common_1.FontWeight.SEMI_BOLD:
return android.os.Build.VERSION.SDK_INT >= 21 ? "-medium" : "";

case font_common_1.FontWeight.BOLD:
case "700":
case font_common_1.FontWeight.EXTRA_BOLD:
return "";

case font_common_1.FontWeight.BLACK:
return android.os.Build.VERSION.SDK_INT >= 21 ? "-black" : "";

default:
throw new Error('Invalid font weight: "' + fontWeight + '"');
}
}
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var properties_1 = __webpack_require__(31);
var FontBase = function() {
function FontBase(fontFamily, fontSize, fontStyle, fontWeight) {
this.fontFamily = fontFamily;
this.fontSize = fontSize;
this.fontStyle = fontStyle;
this.fontWeight = fontWeight;
}
Object.defineProperty(FontBase.prototype, "isItalic", {
get: function() {
return this.fontStyle === FontStyle.ITALIC;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FontBase.prototype, "isBold", {
get: function() {
return this.fontWeight === FontWeight.BOLD || this.fontWeight === "700";
},
enumerable: true,
configurable: true
});
FontBase.equals = function(value1, value2) {
if (!value1 && !value2) {
return true;
}
if (!value1 || !value2) {
return false;
}
return value1.fontFamily === value2.fontFamily && value1.fontSize === value2.fontSize && value1.fontStyle === value2.fontStyle && value1.fontWeight === value2.fontWeight;
};
return FontBase;
}();
FontBase.default = undefined;
exports.FontBase = FontBase;
var FontStyle;
(function(FontStyle) {
FontStyle.NORMAL = "normal";
FontStyle.ITALIC = "italic";
FontStyle.isValid = properties_1.makeValidator(FontStyle.NORMAL, FontStyle.ITALIC);
FontStyle.parse = properties_1.makeParser(FontStyle.isValid);
})(FontStyle = exports.FontStyle || (exports.FontStyle = {}));
var FontWeight;
(function(FontWeight) {
FontWeight.THIN = "100";
FontWeight.EXTRA_LIGHT = "200";
FontWeight.LIGHT = "300";
FontWeight.NORMAL = "normal";
FontWeight.MEDIUM = "500";
FontWeight.SEMI_BOLD = "600";
FontWeight.BOLD = "bold";
FontWeight.EXTRA_BOLD = "800";
FontWeight.BLACK = "900";
FontWeight.isValid = properties_1.makeValidator(FontWeight.THIN, FontWeight.EXTRA_LIGHT, FontWeight.LIGHT, FontWeight.NORMAL, "400", FontWeight.MEDIUM, FontWeight.SEMI_BOLD, FontWeight.BOLD, "700", FontWeight.EXTRA_BOLD, FontWeight.BLACK);
FontWeight.parse = properties_1.makeParser(FontWeight.isValid);
})(FontWeight = exports.FontWeight || (exports.FontWeight = {}));
function parseFontFamily(value) {
var result = new Array();
if (!value) {
return result;
}
var split = value.split(",");
for (var i = 0; i < split.length; i++) {
var str = split[i].trim().replace(/['"]+/g, "");
if (str) {
result.push(str);
}
}
return result;
}
exports.parseFontFamily = parseFontFamily;
var genericFontFamilies;
(function(genericFontFamilies) {
genericFontFamilies.serif = "serif";
genericFontFamilies.sansSerif = "sans-serif";
genericFontFamilies.monospace = "monospace";
genericFontFamilies.system = "system";
})(genericFontFamilies = exports.genericFontFamilies || (exports.genericFontFamilies = {}));
var styles = new Set();
[ FontStyle.NORMAL, FontStyle.ITALIC ].forEach(function(val, i, a) {
return styles.add(val);
});
var weights = new Set();
[ FontWeight.THIN, FontWeight.EXTRA_LIGHT, FontWeight.LIGHT, FontWeight.NORMAL, "400", FontWeight.MEDIUM, FontWeight.SEMI_BOLD, FontWeight.BOLD, "700", FontWeight.EXTRA_BOLD, FontWeight.BLACK ].forEach(function(val, i, a) {
return weights.add(val);
});
function parseFont(fontValue) {
var result = {
fontStyle: "normal",
fontVariant: "normal",
fontWeight: "normal"
};
var parts = fontValue.split(/\s+/);
var part;
while (part = parts.shift()) {
if (part === "normal") {} else if (part === "small-caps") {
result.fontVariant = part;
} else if (styles.has(part)) {
result.fontStyle = part;
} else if (weights.has(part)) {
result.fontWeight = part;
} else if (!result.fontSize) {
var sizes = part.split("/");
result.fontSize = sizes[0];
result.lineHeight = sizes.length > 1 ? sizes[1] : undefined;
} else {
result.fontFamily = part;
if (parts.length) {
result.fontFamily += " " + parts.join(" ");
}
break;
}
}
return result;
}
exports.parseFont = parseFont;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var observable_1 = __webpack_require__(32);
var style_1 = __webpack_require__(33);
exports.Style = style_1.Style;
exports.unsetValue = new Object();
var symbolPropertyMap = {};
var cssSymbolPropertyMap = {};
var inheritableProperties = new Array();
var inheritableCssProperties = new Array();
function print(map) {
var symbols = Object.getOwnPropertySymbols(map);
for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {
var symbol = symbols_1[_i];
var prop = map[symbol];
if (!prop.registered) {
console.log("Property " + prop.name + " not Registered!!!!!");
}
}
}
function _printUnregisteredProperties() {
print(symbolPropertyMap);
print(cssSymbolPropertyMap);
}
exports._printUnregisteredProperties = _printUnregisteredProperties;
var Property = function() {
function Property(options) {
this.enumerable = true;
this.configurable = true;
var name = options.name;
this.name = name;
var key = Symbol(name + ":propertyKey");
this.key = key;
var getDefault = Symbol(name + ":getDefault");
this.getDefault = getDefault;
var setNative = Symbol(name + ":setNative");
this.setNative = setNative;
var defaultValueKey = Symbol(name + ":nativeDefaultValue");
this.defaultValueKey = defaultValueKey;
var defaultValue = options.defaultValue;
this.defaultValue = defaultValue;
var eventName = name + "Change";
var equalityComparer = options.equalityComparer;
var affectsLayout = options.affectsLayout;
var valueChanged = options.valueChanged;
var valueConverter = options.valueConverter;
this.set = function(value) {
var reset = value === exports.unsetValue;
var unboxedValue;
var wrapped;
if (reset) {
unboxedValue = defaultValue;
} else {
wrapped = value && value.wrapped;
unboxedValue = wrapped ? observable_1.WrappedValue.unwrap(value) : value;
if (valueConverter && typeof unboxedValue === "string") {
unboxedValue = valueConverter(unboxedValue);
}
}
var currentValue = key in this ? this[key] : defaultValue;
var changed = equalityComparer ? !equalityComparer(currentValue, unboxedValue) : currentValue !== unboxedValue;
if (wrapped || changed) {
var setNativeValue = this.nativeView && this[setNative];
if (reset) {
delete this[key];
if (valueChanged) {
valueChanged(this, currentValue, unboxedValue);
}
if (setNativeValue) {
if (defaultValueKey in this) {
this[setNative](this[defaultValueKey]);
delete this[defaultValueKey];
} else {
this[setNative](defaultValue);
}
}
} else {
this[key] = unboxedValue;
if (valueChanged) {
valueChanged(this, currentValue, unboxedValue);
}
if (setNativeValue) {
if (!(defaultValueKey in this)) {
this[defaultValueKey] = this[getDefault] ? this[getDefault]() : defaultValue;
}
this[setNative](unboxedValue);
}
}
if (this.hasListeners(eventName)) {
this.notify({
eventName: eventName,
propertyName: name,
object: this,
value: unboxedValue,
oldValue: currentValue
});
}
if (affectsLayout) {
this.requestLayout();
}
}
};
this.get = function() {
return key in this ? this[key] : defaultValue;
};
this.nativeValueChange = function(owner, value) {
var currentValue = key in owner ? owner[key] : defaultValue;
var changed = equalityComparer ? !equalityComparer(currentValue, value) : currentValue !== value;
if (changed) {
owner[key] = value;
if (valueChanged) {
valueChanged(owner, currentValue, value);
}
if (owner.nativeView && !(defaultValueKey in owner)) {
owner[defaultValueKey] = owner[getDefault] ? owner[getDefault]() : defaultValue;
}
if (owner.hasListeners(eventName)) {
owner.notify({
eventName: eventName,
propertyName: name,
object: owner,
value: value,
oldValue: currentValue
});
}
if (affectsLayout) {
owner.requestLayout();
}
}
};
symbolPropertyMap[key] = this;
}
Property.prototype.register = function(cls) {
if (this.registered) {
throw new Error("Property " + this.name + " already registered.");
}
this.registered = true;
Object.defineProperty(cls.prototype, this.name, this);
};
Property.prototype.isSet = function(instance) {
return this.key in instance;
};
return Property;
}();
exports.Property = Property;
var CoercibleProperty = function(_super) {
__extends(CoercibleProperty, _super);
function CoercibleProperty(options) {
var _this = _super.call(this, options) || this;
var name = options.name;
var key = _this.key;
var getDefault = _this.getDefault;
var setNative = _this.setNative;
var defaultValueKey = _this.defaultValueKey;
var defaultValue = _this.defaultValue;
var coerceKey = Symbol(name + ":coerceKey");
var eventName = name + "Change";
var affectsLayout = options.affectsLayout;
var equalityComparer = options.equalityComparer;
var valueChanged = options.valueChanged;
var valueConverter = options.valueConverter;
var coerceCallback = options.coerceValue;
_this.coerce = function(target) {
var originalValue = coerceKey in target ? target[coerceKey] : defaultValue;
target[name] = originalValue;
};
_this.set = function(value) {
var reset = value === exports.unsetValue;
var unboxedValue;
var wrapped;
if (reset) {
unboxedValue = defaultValue;
delete this[coerceKey];
} else {
wrapped = value && value.wrapped;
unboxedValue = wrapped ? observable_1.WrappedValue.unwrap(value) : value;
if (valueConverter && typeof unboxedValue === "string") {
unboxedValue = valueConverter(unboxedValue);
}
this[coerceKey] = unboxedValue;
unboxedValue = coerceCallback(this, unboxedValue);
}
var currentValue = key in this ? this[key] : defaultValue;
var changed = equalityComparer ? !equalityComparer(currentValue, unboxedValue) : currentValue !== unboxedValue;
if (wrapped || changed) {
var setNativeValue = this.nativeView && this[setNative];
if (reset) {
delete this[key];
if (valueChanged) {
valueChanged(this, currentValue, unboxedValue);
}
if (setNativeValue) {
if (defaultValueKey in this) {
this[setNative](this[defaultValueKey]);
delete this[defaultValueKey];
} else {
this[setNative](defaultValue);
}
}
} else {
this[key] = unboxedValue;
if (valueChanged) {
valueChanged(this, currentValue, unboxedValue);
}
if (setNativeValue) {
if (!(defaultValueKey in this)) {
this[defaultValueKey] = this[getDefault] ? this[getDefault]() : defaultValue;
}
this[setNative](unboxedValue);
}
}
if (this.hasListeners(eventName)) {
this.notify({
eventName: eventName,
propertyName: name,
object: this,
value: unboxedValue,
oldValue: currentValue
});
}
if (affectsLayout) {
this.requestLayout();
}
}
};
return _this;
}
return CoercibleProperty;
}(Property);
exports.CoercibleProperty = CoercibleProperty;
var InheritedProperty = function(_super) {
__extends(InheritedProperty, _super);
function InheritedProperty(options) {
var _this = _super.call(this, options) || this;
var name = options.name;
var key = _this.key;
var defaultValue = options.defaultValue;
var sourceKey = Symbol(name + ":valueSourceKey");
_this.sourceKey = sourceKey;
var setBase = _this.set;
var setFunc = function(valueSource) {
return function(value) {
var that = this;
var unboxedValue;
var newValueSource;
if (value === exports.unsetValue) {
var parent_1 = that.parent;
if (parent_1 && parent_1[sourceKey] !== 0) {
unboxedValue = parent_1[name];
newValueSource = 1;
} else {
unboxedValue = defaultValue;
newValueSource = 0;
}
} else {
unboxedValue = value;
newValueSource = valueSource;
}
var currentValue = that[key];
setBase.call(that, unboxedValue);
var newValue = that[key];
that[sourceKey] = newValueSource;
if (currentValue !== newValue) {
var reset_1 = newValueSource === 0;
that.eachChild(function(child) {
var childValueSource = child[sourceKey] || 0;
if (reset_1) {
if (childValueSource === 1) {
setFunc.call(child, exports.unsetValue);
}
} else {
if (childValueSource <= 1) {
setInheritedValue.call(child, newValue);
}
}
return true;
});
}
};
};
var setInheritedValue = setFunc(1);
_this.setInheritedValue = setInheritedValue;
_this.set = setFunc(3);
inheritableProperties.push(_this);
return _this;
}
return InheritedProperty;
}(Property);
exports.InheritedProperty = InheritedProperty;
var CssProperty = function() {
function CssProperty(options) {
var name = options.name;
this.name = name;
this.cssName = "css:" + options.cssName;
this.cssLocalName = options.cssName;
var key = Symbol(name + ":propertyKey");
this.key = key;
var sourceKey = Symbol(name + ":valueSourceKey");
this.sourceKey = sourceKey;
var getDefault = Symbol(name + ":getDefault");
this.getDefault = getDefault;
var setNative = Symbol(name + ":setNative");
this.setNative = setNative;
var defaultValueKey = Symbol(name + ":nativeDefaultValue");
this.defaultValueKey = defaultValueKey;
var defaultValue = options.defaultValue;
this.defaultValue = defaultValue;
var eventName = name + "Change";
var affectsLayout = options.affectsLayout;
var equalityComparer = options.equalityComparer;
var valueChanged = options.valueChanged;
var valueConverter = options.valueConverter;
function setLocalValue(value) {
var reset = value === exports.unsetValue;
if (reset) {
value = defaultValue;
delete this[sourceKey];
} else {
this[sourceKey] = 3;
if (valueConverter && typeof value === "string") {
value = valueConverter(value);
}
}
var currentValue = key in this ? this[key] : defaultValue;
var changed = equalityComparer ? !equalityComparer(currentValue, value) : currentValue !== value;
if (changed) {
var view = this.view;
var setNativeValue = view.nativeView && view[setNative];
if (reset) {
delete this[key];
if (valueChanged) {
valueChanged(this, currentValue, value);
}
if (setNativeValue) {
if (defaultValueKey in this) {
view[setNative](this[defaultValueKey]);
delete this[defaultValueKey];
} else {
view[setNative](defaultValue);
}
}
} else {
this[key] = value;
if (valueChanged) {
valueChanged(this, currentValue, value);
}
if (setNativeValue) {
if (!(defaultValueKey in this)) {
this[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
}
view[setNative](value);
}
}
if (this.hasListeners(eventName)) {
this.notify({
eventName: eventName,
propertyName: name,
object: this,
value: value,
oldValue: currentValue
});
}
if (affectsLayout) {
view.requestLayout();
}
}
}
function setCssValue(value) {
var reset = value === exports.unsetValue;
var currentValueSource = this[sourceKey] || 0;
if (currentValueSource === 3) {
return;
}
if (reset) {
value = defaultValue;
delete this[sourceKey];
} else {
if (valueConverter && typeof value === "string") {
value = valueConverter(value);
}
this[sourceKey] = 2;
}
var currentValue = key in this ? this[key] : defaultValue;
var changed = equalityComparer ? !equalityComparer(currentValue, value) : currentValue !== value;
if (changed) {
var view = this.view;
var setNativeValue = view.nativeView && view[setNative];
if (reset) {
delete this[key];
if (valueChanged) {
valueChanged(this, currentValue, value);
}
if (setNativeValue) {
if (defaultValueKey in this) {
view[setNative](this[defaultValueKey]);
delete this[defaultValueKey];
} else {
view[setNative](defaultValue);
}
}
} else {
this[key] = value;
if (valueChanged) {
valueChanged(this, currentValue, value);
}
if (setNativeValue) {
if (!(defaultValueKey in this)) {
this[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
}
view[setNative](value);
}
}
if (this.hasListeners(eventName)) {
this.notify({
eventName: eventName,
propertyName: name,
object: this,
value: value,
oldValue: currentValue
});
}
if (affectsLayout) {
view.requestLayout();
}
}
}
function get() {
return key in this ? this[key] : defaultValue;
}
this.cssValueDescriptor = {
enumerable: true,
configurable: true,
get: get,
set: setCssValue
};
this.localValueDescriptor = {
enumerable: true,
configurable: true,
get: get,
set: setLocalValue
};
cssSymbolPropertyMap[key] = this;
}
CssProperty.prototype.register = function(cls) {
if (this.registered) {
throw new Error("Property " + this.name + " already registered.");
}
this.registered = true;
Object.defineProperty(cls.prototype, this.name, this.localValueDescriptor);
Object.defineProperty(cls.prototype, this.cssName, this.cssValueDescriptor);
if (this.cssLocalName !== this.cssName) {
Object.defineProperty(cls.prototype, this.cssLocalName, this.localValueDescriptor);
}
};
CssProperty.prototype.isSet = function(instance) {
return this.key in instance;
};
return CssProperty;
}();
exports.CssProperty = CssProperty;
var CssAnimationProperty = function() {
function CssAnimationProperty(options) {
this.options = options;
var valueConverter = options.valueConverter, equalityComparer = options.equalityComparer, valueChanged = options.valueChanged, defaultValue = options.defaultValue;
var propertyName = options.name;
this.name = propertyName;
CssAnimationProperty.properties[propertyName] = this;
if (options.cssName && options.cssName !== propertyName) {
CssAnimationProperty.properties[options.cssName] = this;
}
this._valueConverter = options.valueConverter;
var cssName = "css:" + (options.cssName || propertyName);
this.cssName = cssName;
var keyframeName = "keyframe:" + propertyName;
this.keyframe = keyframeName;
var defaultName = "default:" + propertyName;
var defaultValueKey = Symbol(defaultName);
this.defaultValueKey = defaultValueKey;
this.defaultValue = defaultValue;
var cssValue = Symbol(cssName);
var styleValue = Symbol(propertyName);
var keyframeValue = Symbol(keyframeName);
var computedValue = Symbol("computed-value:" + propertyName);
this.computedValueKey = computedValue;
var computedSource = Symbol("computed-source:" + propertyName);
this.getDefault = Symbol(propertyName + ":getDefault");
var setNative = this.setNative = Symbol(propertyName + ":setNative");
var eventName = propertyName + "Change";
function descriptor(symbol, propertySource, enumerable, configurable, getsComputed) {
return {
enumerable: enumerable,
configurable: configurable,
get: getsComputed ? function() {
return this[computedValue];
} : function() {
return this[symbol];
},
set: function(value) {
var prev = this[computedValue];
if (value === exports.unsetValue) {
this[symbol] = exports.unsetValue;
if (this[computedSource] === propertySource) {
if (this[styleValue] !== exports.unsetValue) {
this[computedSource] = 3;
this[computedValue] = this[styleValue];
} else if (this[cssValue] !== exports.unsetValue) {
this[computedSource] = 2;
this[computedValue] = this[cssValue];
} else {
this[computedSource] = 0;
this[computedValue] = defaultValue;
}
}
} else {
if (valueConverter && typeof value === "string") {
value = valueConverter(value);
}
this[symbol] = value;
if (this[computedSource] <= propertySource) {
this[computedSource] = propertySource;
this[computedValue] = value;
}
}
var next = this[computedValue];
if (prev !== next && (!equalityComparer || !equalityComparer(prev, next))) {
if (valueChanged) {
valueChanged(this, prev, next);
}
if (this.view.nativeView && this.view[setNative]) {
this.view[setNative](next);
}
if (this.hasListeners(eventName)) {
this.notify({
eventName: eventName,
object: this,
propertyName: propertyName,
value: value,
oldValue: prev
});
}
}
}
};
}
var defaultPropertyDescriptor = descriptor(defaultValueKey, 0, false, false, false);
var cssPropertyDescriptor = descriptor(cssValue, 2, false, false, false);
var stylePropertyDescriptor = descriptor(styleValue, 3, true, true, true);
var keyframePropertyDescriptor = descriptor(keyframeValue, 4, false, false, false);
symbolPropertyMap[computedValue] = this;
cssSymbolPropertyMap[computedValue] = this;
this.register = function(cls) {
cls.prototype[defaultValueKey] = options.defaultValue;
cls.prototype[computedValue] = options.defaultValue;
cls.prototype[computedSource] = 0;
cls.prototype[cssValue] = exports.unsetValue;
cls.prototype[styleValue] = exports.unsetValue;
cls.prototype[keyframeValue] = exports.unsetValue;
Object.defineProperty(cls.prototype, defaultName, defaultPropertyDescriptor);
Object.defineProperty(cls.prototype, cssName, cssPropertyDescriptor);
Object.defineProperty(cls.prototype, propertyName, stylePropertyDescriptor);
if (options.cssName && options.cssName !== options.name) {
Object.defineProperty(cls.prototype, options.cssName, stylePropertyDescriptor);
}
Object.defineProperty(cls.prototype, keyframeName, keyframePropertyDescriptor);
};
}
CssAnimationProperty._getByCssName = function(name) {
return this.properties[name];
};
CssAnimationProperty.prototype.isSet = function(instance) {
return instance[this.computedValueKey] !== exports.unsetValue;
};
return CssAnimationProperty;
}();
CssAnimationProperty.properties = {};
exports.CssAnimationProperty = CssAnimationProperty;
var InheritedCssProperty = function(_super) {
__extends(InheritedCssProperty, _super);
function InheritedCssProperty(options) {
var _this = _super.call(this, options) || this;
var name = options.name;
var key = _this.key;
var sourceKey = _this.sourceKey;
var getDefault = _this.getDefault;
var setNative = _this.setNative;
var defaultValueKey = _this.defaultValueKey;
var eventName = name + "Change";
var defaultValue = options.defaultValue;
var affectsLayout = options.affectsLayout;
var equalityComparer = options.equalityComparer;
var valueChanged = options.valueChanged;
var valueConverter = options.valueConverter;
var setFunc = function(valueSource) {
return function(value) {
var reset = value === exports.unsetValue;
var currentValueSource = this[sourceKey] || 0;
if (reset) {
if (valueSource === 2 && currentValueSource === 3) {
return;
}
} else {
if (currentValueSource > valueSource) {
return;
}
}
var view = this.view;
var newValue;
if (reset) {
var parent_2 = view.parent;
var style = parent_2 ? parent_2.style : null;
if (style && style[sourceKey] > 0) {
newValue = style[name];
this[sourceKey] = 1;
} else {
newValue = defaultValue;
delete this[sourceKey];
}
} else {
this[sourceKey] = valueSource;
if (valueConverter && typeof value === "string") {
newValue = valueConverter(value);
} else {
newValue = value;
}
}
var currentValue = key in this ? this[key] : defaultValue;
var changed = equalityComparer ? !equalityComparer(currentValue, newValue) : currentValue !== newValue;
if (changed) {
var view_1 = this.view;
var setNativeValue = view_1.nativeView && view_1[setNative];
if (reset) {
delete this[key];
if (valueChanged) {
valueChanged(this, currentValue, newValue);
}
if (setNativeValue) {
if (defaultValueKey in this) {
view_1[setNative](this[defaultValueKey]);
delete this[defaultValueKey];
} else {
view_1[setNative](defaultValue);
}
}
} else {
this[key] = newValue;
if (valueChanged) {
valueChanged(this, currentValue, newValue);
}
if (setNativeValue) {
if (!(defaultValueKey in this)) {
this[defaultValueKey] = view_1[getDefault] ? view_1[getDefault]() : defaultValue;
}
view_1[setNative](newValue);
}
}
if (this.hasListeners(eventName)) {
this.notify({
eventName: eventName,
propertyName: name,
object: this,
value: newValue,
oldValue: currentValue
});
}
if (affectsLayout) {
view_1.requestLayout();
}
view_1.eachChild(function(child) {
var childStyle = child.style;
var childValueSource = childStyle[sourceKey] || 0;
if (reset) {
if (childValueSource === 1) {
setDefaultFunc.call(childStyle, exports.unsetValue);
}
} else {
if (childValueSource <= 1) {
setInheritedFunc.call(childStyle, newValue);
}
}
return true;
});
}
};
};
var setDefaultFunc = setFunc(0);
var setInheritedFunc = setFunc(1);
_this.setInheritedValue = setInheritedFunc;
_this.cssValueDescriptor.set = setFunc(2);
_this.localValueDescriptor.set = setFunc(3);
inheritableCssProperties.push(_this);
return _this;
}
return InheritedCssProperty;
}(CssProperty);
exports.InheritedCssProperty = InheritedCssProperty;
var ShorthandProperty = function() {
function ShorthandProperty(options) {
this.name = options.name;
var key = Symbol(this.name + ":propertyKey");
this.key = key;
this.cssName = "css:" + options.cssName;
this.cssLocalName = "" + options.cssName;
var converter = options.converter;
function setLocalValue(value) {
if (this[key] !== value) {
this[key] = value;
for (var _i = 0, _a = converter(value); _i < _a.length; _i++) {
var _b = _a[_i], p = _b[0], v = _b[1];
this[p.name] = v;
}
}
}
function setCssValue(value) {
if (this[key] !== value) {
this[key] = value;
for (var _i = 0, _a = converter(value); _i < _a.length; _i++) {
var _b = _a[_i], p = _b[0], v = _b[1];
this[p.cssName] = v;
}
}
}
this.cssValueDescriptor = {
enumerable: true,
configurable: true,
get: options.getter,
set: setCssValue
};
this.localValueDescriptor = {
enumerable: true,
configurable: true,
get: options.getter,
set: setLocalValue
};
cssSymbolPropertyMap[key] = this;
}
ShorthandProperty.prototype.register = function(cls) {
if (this.registered) {
throw new Error("Property " + this.name + " already registered.");
}
this.registered = true;
Object.defineProperty(cls.prototype, this.name, this.localValueDescriptor);
Object.defineProperty(cls.prototype, this.cssName, this.cssValueDescriptor);
if (this.cssLocalName !== this.cssName) {
Object.defineProperty(cls.prototype, this.cssLocalName, this.localValueDescriptor);
}
};
return ShorthandProperty;
}();
exports.ShorthandProperty = ShorthandProperty;
function inheritablePropertyValuesOn(view) {
var array = new Array();
for (var _i = 0, inheritableProperties_1 = inheritableProperties; _i < inheritableProperties_1.length; _i++) {
var prop = inheritableProperties_1[_i];
var sourceKey = prop.sourceKey;
var valueSource = view[sourceKey] || 0;
if (valueSource !== 0) {
array.push({
property: prop,
value: view[prop.name]
});
}
}
return array;
}
function inheritableCssPropertyValuesOn(style) {
var array = new Array();
for (var _i = 0, inheritableCssProperties_1 = inheritableCssProperties; _i < inheritableCssProperties_1.length; _i++) {
var prop = inheritableCssProperties_1[_i];
var sourceKey = prop.sourceKey;
var valueSource = style[sourceKey] || 0;
if (valueSource !== 0) {
array.push({
property: prop,
value: style[prop.name]
});
}
}
return array;
}
function initNativeView(view) {
var symbols = Object.getOwnPropertySymbols(view);
for (var _i = 0, symbols_2 = symbols; _i < symbols_2.length; _i++) {
var symbol = symbols_2[_i];
var property = symbolPropertyMap[symbol];
if (!property) {
continue;
}
var setNative = property.setNative;
var getDefault = property.getDefault;
if (setNative in view) {
var defaultValueKey = property.defaultValueKey;
if (!(defaultValueKey in view)) {
view[defaultValueKey] = view[getDefault] ? view[getDefault]() : property.defaultValue;
}
var value = view[symbol];
view[setNative](value);
}
}
var style = view.style;
symbols = Object.getOwnPropertySymbols(style);
for (var _a = 0, symbols_3 = symbols; _a < symbols_3.length; _a++) {
var symbol = symbols_3[_a];
var property = cssSymbolPropertyMap[symbol];
if (!property) {
continue;
}
if (view[property.setNative]) {
if (view[property.getDefault]) {
var defaultValueKey = property.defaultValueKey;
if (!(defaultValueKey in style)) {
style[defaultValueKey] = view[property.getDefault] ? view[property.getDefault]() : property.defaultValue;
}
}
var value = style[symbol];
view[property.setNative](value);
}
}
}
exports.initNativeView = initNativeView;
function resetNativeView(view) {
var symbols = Object.getOwnPropertySymbols(view);
for (var _i = 0, symbols_4 = symbols; _i < symbols_4.length; _i++) {
var symbol = symbols_4[_i];
var property = symbolPropertyMap[symbol];
if (!property) {
continue;
}
if (view[property.setNative]) {
if (property.defaultValueKey in view) {
view[property.setNative](view[property.defaultValueKey]);
delete view[property.defaultValueKey];
} else {
view[property.setNative](property.defaultValue);
}
}
}
var style = view.style;
symbols = Object.getOwnPropertySymbols(style);
for (var _a = 0, symbols_5 = symbols; _a < symbols_5.length; _a++) {
var symbol = symbols_5[_a];
var property = cssSymbolPropertyMap[symbol];
if (!property) {
continue;
}
if (view[property.setNative]) {
if (property.defaultValueKey in style) {
view[property.setNative](style[property.defaultValueKey]);
delete style[property.defaultValueKey];
} else {
view[property.setNative](property.defaultValue);
}
}
}
}
exports.resetNativeView = resetNativeView;
function clearInheritedProperties(view) {
for (var _i = 0, inheritableProperties_2 = inheritableProperties; _i < inheritableProperties_2.length; _i++) {
var prop = inheritableProperties_2[_i];
var sourceKey = prop.sourceKey;
if (view[sourceKey] === 1) {
prop.set.call(view, exports.unsetValue);
}
}
var style = view.style;
for (var _a = 0, inheritableCssProperties_2 = inheritableCssProperties; _a < inheritableCssProperties_2.length; _a++) {
var prop = inheritableCssProperties_2[_a];
var sourceKey = prop.sourceKey;
if (style[sourceKey] === 1) {
prop.setInheritedValue.call(style, exports.unsetValue);
}
}
}
exports.clearInheritedProperties = clearInheritedProperties;
function resetCSSProperties(style) {
var symbols = Object.getOwnPropertySymbols(style);
for (var _i = 0, symbols_6 = symbols; _i < symbols_6.length; _i++) {
var symbol = symbols_6[_i];
var cssProperty = void 0;
if (cssProperty = cssSymbolPropertyMap[symbol]) {
style[cssProperty.cssName] = exports.unsetValue;
if (cssProperty instanceof CssAnimationProperty) {
style[cssProperty.keyframe] = exports.unsetValue;
}
}
}
}
exports.resetCSSProperties = resetCSSProperties;
function propagateInheritableProperties(view, child) {
var inheritablePropertyValues = inheritablePropertyValuesOn(view);
for (var _i = 0, inheritablePropertyValues_1 = inheritablePropertyValues; _i < inheritablePropertyValues_1.length; _i++) {
var pair = inheritablePropertyValues_1[_i];
var prop = pair.property;
var sourceKey = prop.sourceKey;
var currentValueSource = child[sourceKey] || 0;
if (currentValueSource <= 1) {
prop.setInheritedValue.call(child, pair.value);
}
}
}
exports.propagateInheritableProperties = propagateInheritableProperties;
function propagateInheritableCssProperties(parentStyle, childStyle) {
var inheritableCssPropertyValues = inheritableCssPropertyValuesOn(parentStyle);
for (var _i = 0, inheritableCssPropertyValues_1 = inheritableCssPropertyValues; _i < inheritableCssPropertyValues_1.length; _i++) {
var pair = inheritableCssPropertyValues_1[_i];
var prop = pair.property;
var sourceKey = prop.sourceKey;
var currentValueSource = childStyle[sourceKey] || 0;
if (currentValueSource <= 1) {
prop.setInheritedValue.call(childStyle, pair.value, 1);
}
}
}
exports.propagateInheritableCssProperties = propagateInheritableCssProperties;
function makeValidator() {
var values = [];
for (var _i = 0; _i < arguments.length; _i++) {
values[_i] = arguments[_i];
}
var set = new Set(values);
return function(value) {
return set.has(value);
};
}
exports.makeValidator = makeValidator;
function makeParser(isValid) {
return function(value) {
var lower = value && value.toLowerCase();
if (isValid(lower)) {
return lower;
} else {
throw new Error("Invalid value: " + value);
}
};
}
exports.makeParser = makeParser;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var _wrappedIndex = 0;
var WrappedValue = function() {
function WrappedValue(wrapped) {
this.wrapped = wrapped;
}
WrappedValue.unwrap = function(value) {
return value && value.wrapped ? value.wrapped : value;
};
WrappedValue.wrap = function(value) {
var w = _wrappedValues[_wrappedIndex++ % 5];
w.wrapped = value;
return w;
};
return WrappedValue;
}();
exports.WrappedValue = WrappedValue;
var _wrappedValues = [ new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null) ];
var Observable = function() {
function Observable() {
this._observers = {};
}
Observable.prototype.get = function(name) {
return this[name];
};
Observable.prototype.set = function(name, value) {
var oldValue = this[name];
if (this[name] === value) {
return;
}
var newValue = WrappedValue.unwrap(value);
this[name] = newValue;
this.notifyPropertyChange(name, newValue, oldValue);
};
Observable.prototype.on = function(eventNames, callback, thisArg) {
this.addEventListener(eventNames, callback, thisArg);
};
Observable.prototype.off = function(eventNames, callback, thisArg) {
this.removeEventListener(eventNames, callback, thisArg);
};
Observable.prototype.addEventListener = function(eventNames, callback, thisArg) {
if (typeof eventNames !== "string") {
throw new TypeError("Events name(s) must be string.");
}
if (typeof callback !== "function") {
throw new TypeError("callback must be function.");
}
var events = eventNames.split(",");
for (var i = 0, l = events.length; i < l; i++) {
var event_1 = events[i].trim();
var list = this._getEventList(event_1, true);
list.push({
callback: callback,
thisArg: thisArg
});
}
};
Observable.prototype.removeEventListener = function(eventNames, callback, thisArg) {
if (typeof eventNames !== "string") {
throw new TypeError("Events name(s) must be string.");
}
if (callback && typeof callback !== "function") {
throw new TypeError("callback must be function.");
}
var events = eventNames.split(",");
for (var i = 0, l = events.length; i < l; i++) {
var event_2 = events[i].trim();
if (callback) {
var list = this._getEventList(event_2, false);
if (list) {
var index_1 = this._indexOfListener(list, callback, thisArg);
if (index_1 >= 0) {
list.splice(index_1, 1);
}
if (list.length === 0) {
delete this._observers[event_2];
}
}
} else {
this._observers[event_2] = undefined;
delete this._observers[event_2];
}
}
};
Observable.prototype.notify = function(data) {
var observers = this._observers[data.eventName];
if (!observers) {
return;
}
for (var i = observers.length - 1; i >= 0; i--) {
var entry = observers[i];
if (entry.thisArg) {
entry.callback.apply(entry.thisArg, [ data ]);
} else {
entry.callback(data);
}
}
};
Observable.prototype.notifyPropertyChange = function(name, value, oldValue) {
this.notify(this._createPropertyChangeData(name, value, oldValue));
};
Observable.prototype.hasListeners = function(eventName) {
return eventName in this._observers;
};
Observable.prototype._createPropertyChangeData = function(propertyName, value, oldValue) {
return {
eventName: Observable.propertyChangeEvent,
object: this,
propertyName: propertyName,
value: value,
oldValue: oldValue
};
};
Observable.prototype._emit = function(eventNames) {
var events = eventNames.split(",");
for (var i = 0, l = events.length; i < l; i++) {
var event_3 = events[i].trim();
this.notify({
eventName: event_3,
object: this
});
}
};
Observable.prototype._getEventList = function(eventName, createIfNeeded) {
if (!eventName) {
throw new TypeError("EventName must be valid string.");
}
var list = this._observers[eventName];
if (!list && createIfNeeded) {
list = [];
this._observers[eventName] = list;
}
return list;
};
Observable.prototype._indexOfListener = function(list, callback, thisArg) {
for (var i = 0; i < list.length; i++) {
var entry = list[i];
if (thisArg) {
if (entry.callback === callback && entry.thisArg === thisArg) {
return i;
}
} else {
if (entry.callback === callback) {
return i;
}
}
}
return -1;
};
return Observable;
}();
Observable.propertyChangeEvent = "propertyChange";
exports.Observable = Observable;
var ObservableFromObject = function(_super) {
__extends(ObservableFromObject, _super);
function ObservableFromObject() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._map = {};
return _this;
}
ObservableFromObject.prototype.get = function(name) {
return this._map[name];
};
ObservableFromObject.prototype.set = function(name, value) {
var currentValue = this._map[name];
if (currentValue === value) {
return;
}
var newValue = WrappedValue.unwrap(value);
this._map[name] = newValue;
this.notifyPropertyChange(name, newValue, currentValue);
};
return ObservableFromObject;
}(Observable);
function defineNewProperty(target, propertyName) {
Object.defineProperty(target, propertyName, {
get: function() {
return target._map[propertyName];
},
set: function(value) {
target.set(propertyName, value);
},
enumerable: true,
configurable: true
});
}
function addPropertiesFromObject(observable, source, recursive) {
if (recursive === void 0) {
recursive = false;
}
var isRecursive = recursive;
for (var prop in source) {
if (source.hasOwnProperty(prop)) {
if (isRecursive) {
if (!Array.isArray(source[prop]) && source[prop] && typeof source[prop] === "object" && !(source[prop] instanceof Observable)) {
source[prop] = fromObjectRecursive(source[prop]);
}
}
defineNewProperty(observable, prop);
observable.set(prop, source[prop]);
}
}
}
function fromObject(source) {
var observable = new ObservableFromObject();
addPropertiesFromObject(observable, source, false);
return observable;
}
exports.fromObject = fromObject;
function fromObjectRecursive(source) {
var observable = new ObservableFromObject();
addPropertiesFromObject(observable, source, true);
return observable;
}
exports.fromObjectRecursive = fromObjectRecursive;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var observable_1 = __webpack_require__(32);
var Style = function(_super) {
__extends(Style, _super);
function Style(view) {
var _this = _super.call(this) || this;
_this.view = view;
return _this;
}
return Style;
}(observable_1.Observable);
exports.Style = Style;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
__export(__webpack_require__(35));
var ScopeError = function(_super) {
__extends(ScopeError, _super);
function ScopeError(inner, message) {
var _this = this;
var formattedMessage;
if (message && inner.message) {
formattedMessage = message + "\n > " + inner.message.replace("\n", "\n  ");
} else {
formattedMessage = message || inner.message || undefined;
}
_this = _super.call(this, formattedMessage) || this;
_this.stack = "Error: " + _this.message + "\n" + inner.stack.substr(inner.stack.indexOf("\n") + 1);
_this.message = formattedMessage;
return _this;
}
return ScopeError;
}(Error);
exports.ScopeError = ScopeError;
var SourceError = function(_super) {
__extends(SourceError, _super);
function SourceError(child, source, message) {
return _super.call(this, child, message ? message + " @" + source + "" : source + "") || this;
}
return SourceError;
}(ScopeError);
exports.SourceError = SourceError;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var file_system_1 = __webpack_require__(19);
exports.debug = true;
var applicationRootPath;
function ensureAppRootPath() {
if (!applicationRootPath) {
applicationRootPath = file_system_1.knownFolders.currentApp().path;
applicationRootPath = applicationRootPath.substr(0, applicationRootPath.length - "app/".length);
}
}
var Source = function() {
function Source(uri, line, column) {
ensureAppRootPath();
if (uri.length > applicationRootPath.length && uri.substr(0, applicationRootPath.length) === applicationRootPath) {
this._uri = "file://" + uri.substr(applicationRootPath.length);
} else {
this._uri = uri;
}
this._line = line;
this._column = column;
}
Object.defineProperty(Source.prototype, "uri", {
get: function() {
return this._uri;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Source.prototype, "line", {
get: function() {
return this._line;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Source.prototype, "column", {
get: function() {
return this._column;
},
enumerable: true,
configurable: true
});
Source.prototype.toString = function() {
return this._uri + ":" + this._line + ":" + this._column;
};
Source.get = function(object) {
return object[Source._source];
};
Source.set = function(object, src) {
object[Source._source] = src;
};
return Source;
}();
Source._source = Symbol("source");
exports.Source = Source;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var properties_1 = __webpack_require__(31);
var bindable_1 = __webpack_require__(37);
var platform_1 = __webpack_require__(22);
exports.isIOS = platform_1.isIOS;
exports.isAndroid = platform_1.isAndroid;
var utils_1 = __webpack_require__(14);
exports.layout = utils_1.layout;
var style_properties_1 = __webpack_require__(28);
var types = __webpack_require__(17);
var color_1 = __webpack_require__(24);
exports.Color = color_1.Color;
__export(__webpack_require__(37));
__export(__webpack_require__(31));
var styleScopeModule;
function ensureStyleScopeModule() {
if (!styleScopeModule) {
styleScopeModule = __webpack_require__(43);
}
}
var defaultBindingSource = {};
function getAncestor(view, criterion) {
var matcher = null;
if (typeof criterion === "string") {
matcher = function(view) {
return view.typeName === criterion;
};
} else {
matcher = function(view) {
return view instanceof criterion;
};
}
for (var parent_1 = view.parent; parent_1 != null; parent_1 = parent_1.parent) {
if (matcher(parent_1)) {
return parent_1;
}
}
return null;
}
exports.getAncestor = getAncestor;
function getViewById(view, id) {
if (!view) {
return undefined;
}
if (view.id === id) {
return view;
}
var retVal;
var descendantsCallback = function(child) {
if (child.id === id) {
retVal = child;
return false;
}
return true;
};
eachDescendant(view, descendantsCallback);
return retVal;
}
exports.getViewById = getViewById;
function eachDescendant(view, callback) {
if (!callback || !view) {
return;
}
var continueIteration;
var localCallback = function(child) {
continueIteration = callback(child);
if (continueIteration) {
child.eachChild(localCallback);
}
return continueIteration;
};
view.eachChild(localCallback);
}
exports.eachDescendant = eachDescendant;
var viewIdCounter = 1;
var contextMap = new Map();
function getNativeView(context, typeName) {
var typeMap = contextMap.get(context);
if (!typeMap) {
typeMap = new Map();
contextMap.set(context, typeMap);
return undefined;
}
var array = typeMap.get(typeName);
if (array) {
var nativeView = void 0;
while (array.length > 0) {
var weakRef = array.pop();
nativeView = weakRef.get();
if (nativeView) {
return nativeView;
}
}
}
return undefined;
}
function putNativeView(context, view) {
var typeMap = contextMap.get(context);
var typeName = view.typeName;
var list = typeMap.get(typeName);
if (!list) {
list = [];
typeMap.set(typeName, list);
}
list.push(new WeakRef(view.nativeView));
}
var ViewBase = function(_super) {
__extends(ViewBase, _super);
function ViewBase() {
var _this = _super.call(this) || this;
_this.pseudoClassAliases = {
highlighted: [ "active", "pressed" ]
};
_this.cssClasses = new Set();
_this.cssPseudoClasses = new Set();
_this._domId = viewIdCounter++;
_this._style = new properties_1.Style(_this);
return _this;
}
Object.defineProperty(ViewBase.prototype, "typeName", {
get: function() {
return types.getClass(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewBase.prototype, "style", {
get: function() {
return this._style;
},
set: function(value) {
throw new Error("View.style property is read-only.");
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewBase.prototype, "android", {
get: function() {
return this._androidView;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewBase.prototype, "ios", {
get: function() {
return this._iosView;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewBase.prototype, "isLoaded", {
get: function() {
return this._isLoaded;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewBase.prototype, "class", {
get: function() {
return this.className;
},
set: function(v) {
this.className = v;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewBase.prototype, "inlineStyleSelector", {
get: function() {
return this._inlineStyleSelector;
},
set: function(value) {
this._inlineStyleSelector = value;
},
enumerable: true,
configurable: true
});
ViewBase.prototype.getViewById = function(id) {
return getViewById(this, id);
};
Object.defineProperty(ViewBase.prototype, "page", {
get: function() {
if (this.parent) {
return this.parent.page;
}
return null;
},
enumerable: true,
configurable: true
});
ViewBase.prototype.set = function(name, value) {
this[name] = bindable_1.WrappedValue.unwrap(value);
};
ViewBase.prototype.onLoaded = function() {
this._isLoaded = true;
this._loadEachChild();
this._emit("loaded");
};
ViewBase.prototype._loadEachChild = function() {
this.eachChild(function(child) {
child.onLoaded();
return true;
});
};
ViewBase.prototype.onUnloaded = function() {
this._unloadEachChild();
this._isLoaded = false;
this._emit("unloaded");
};
ViewBase.prototype._batchUpdate = function(callback) {
try {
++this._batchUpdateScope;
return callback();
} finally {
--this._batchUpdateScope;
}
};
ViewBase.prototype._unloadEachChild = function() {
this.eachChild(function(child) {
if (child.isLoaded) {
child.onUnloaded();
}
return true;
});
};
ViewBase.prototype._applyStyleFromScope = function() {
var scope = this._styleScope;
if (scope) {
scope.applySelectors(this);
} else {
this._setCssState(null);
}
};
ViewBase.prototype._setCssState = function(next) {
var _this = this;
var previous = this._cssState;
this._cssState = next;
if (!this._invalidateCssHandler) {
this._invalidateCssHandler = function() {
if (_this._invalidateCssHandlerSuspended) {
return;
}
_this.applyCssState();
};
}
try {
this._invalidateCssHandlerSuspended = true;
if (next) {
next.changeMap.forEach(function(changes, view) {
if (changes.attributes) {
changes.attributes.forEach(function(attribute) {
view.addEventListener(attribute + "Change", _this._invalidateCssHandler);
});
}
if (changes.pseudoClasses) {
changes.pseudoClasses.forEach(function(pseudoClass) {
var eventName = ":" + pseudoClass;
view.addEventListener(":" + pseudoClass, _this._invalidateCssHandler);
if (view[eventName]) {
view[eventName](+1);
}
});
}
});
}
if (previous) {
previous.changeMap.forEach(function(changes, view) {
if (changes.attributes) {
changes.attributes.forEach(function(attribute) {
view.removeEventListener("onPropertyChanged:" + attribute, _this._invalidateCssHandler);
});
}
if (changes.pseudoClasses) {
changes.pseudoClasses.forEach(function(pseudoClass) {
var eventName = ":" + pseudoClass;
view.removeEventListener(eventName, _this._invalidateCssHandler);
if (view[eventName]) {
view[eventName](-1);
}
});
}
});
}
} finally {
this._invalidateCssHandlerSuspended = false;
}
this.applyCssState();
};
ViewBase.prototype.notifyPseudoClassChanged = function(pseudoClass) {
this.notify({
eventName: ":" + pseudoClass,
object: this
});
};
ViewBase.prototype.applyCssState = function() {
var _this = this;
this._batchUpdate(function() {
if (!_this._cssState) {
_this._cancelAllAnimations();
properties_1.resetCSSProperties(_this.style);
return;
}
_this._cssState.apply();
});
};
ViewBase.prototype.getAllAliasedStates = function(name) {
var allStates = [];
allStates.push(name);
if (name in this.pseudoClassAliases) {
for (var i = 0; i < this.pseudoClassAliases[name].length; i++) {
allStates.push(this.pseudoClassAliases[name][i]);
}
}
return allStates;
};
ViewBase.prototype.addPseudoClass = function(name) {
var allStates = this.getAllAliasedStates(name);
for (var i = 0; i < allStates.length; i++) {
if (!this.cssPseudoClasses.has(allStates[i])) {
this.cssPseudoClasses.add(allStates[i]);
this.notifyPseudoClassChanged(allStates[i]);
}
}
};
ViewBase.prototype.deletePseudoClass = function(name) {
var allStates = this.getAllAliasedStates(name);
for (var i = 0; i < allStates.length; i++) {
if (this.cssPseudoClasses.has(allStates[i])) {
this.cssPseudoClasses.delete(allStates[i]);
this.notifyPseudoClassChanged(allStates[i]);
}
}
};
ViewBase.prototype._applyInlineStyle = function(inlineStyle) {
if (typeof inlineStyle === "string") {
try {
ensureStyleScopeModule();
styleScopeModule.applyInlineStyle(this, inlineStyle);
} finally {}
}
};
ViewBase.prototype.bindingContextChanged = function(data) {
this.bindings.get("bindingContext").bind(data.value);
};
ViewBase.prototype.bind = function(options, source) {
if (source === void 0) {
source = defaultBindingSource;
}
var targetProperty = options.targetProperty;
this.unbind(targetProperty);
if (!this.bindings) {
this.bindings = new Map();
}
var binding = new bindable_1.Binding(this, options);
this.bindings.set(targetProperty, binding);
var bindingSource = source;
if (bindingSource === defaultBindingSource) {
bindingSource = this.bindingContext;
binding.sourceIsBindingContext = true;
if (targetProperty === "bindingContext") {
this.bindingContextBoundToParentBindingContextChanged = true;
var parent_2 = this.parent;
if (parent_2) {
parent_2.on("bindingContextChange", this.bindingContextChanged, this);
} else {
this.shouldAddHandlerToParentBindingContextChanged = true;
}
}
}
binding.bind(bindingSource);
};
ViewBase.prototype.unbind = function(property) {
var bindings = this.bindings;
if (!bindings) {
return;
}
var binding = bindings.get(property);
if (binding) {
binding.unbind();
bindings.delete(property);
if (binding.sourceIsBindingContext) {
if (property === "bindingContext") {
this.shouldAddHandlerToParentBindingContextChanged = false;
this.bindingContextBoundToParentBindingContextChanged = false;
var parent_3 = this.parent;
if (parent_3) {
parent_3.off("bindingContextChange", this.bindingContextChanged, this);
}
}
}
}
};
ViewBase.prototype.requestLayout = function() {
var parent = this.parent;
if (parent) {
parent.requestLayout();
}
};
ViewBase.prototype.eachChild = function(callback) {};
ViewBase.prototype._addView = function(view, atIndex) {
if (bindable_1.traceEnabled()) {
bindable_1.traceWrite(this + "._addView(" + view + ", " + atIndex + ")", bindable_1.traceCategories.ViewHierarchy);
}
if (!view) {
throw new Error("Expecting a valid View instance.");
}
if (!(view instanceof ViewBase)) {
throw new Error(view + " is not a valid View instance.");
}
if (view.parent) {
throw new Error("View already has a parent. View: " + view + " Parent: " + view.parent);
}
view.parent = this;
this._addViewCore(view, atIndex);
view._parentChanged(null);
};
ViewBase.prototype._setStyleScope = function(scope) {
this._styleScope = scope;
this._applyStyleFromScope();
this.eachChild(function(v) {
v._setStyleScope(scope);
return true;
});
};
ViewBase.prototype._addViewCore = function(view, atIndex) {
properties_1.propagateInheritableProperties(this, view);
var styleScope = this._styleScope;
if (styleScope) {
view._setStyleScope(styleScope);
}
properties_1.propagateInheritableCssProperties(this.style, view.style);
if (this._context) {
view._setupUI(this._context, atIndex);
}
if (this._isLoaded) {
view.onLoaded();
}
};
ViewBase.prototype._removeView = function(view) {
if (bindable_1.traceEnabled()) {
bindable_1.traceWrite(this + "._removeView(" + view + ")", bindable_1.traceCategories.ViewHierarchy);
}
if (view.parent !== this) {
throw new Error("View not added to this instance. View: " + view + " CurrentParent: " + view.parent + " ExpectedParent: " + this);
}
this._removeViewCore(view);
view.parent = undefined;
view._parentChanged(this);
};
ViewBase.prototype._removeViewCore = function(view) {
if (this._styleScope === view._styleScope) {
view._setStyleScope(null);
}
if (view.isLoaded) {
view.onUnloaded();
}
if (view._context) {
view._tearDownUI();
}
};
ViewBase.prototype.createNativeView = function() {
return undefined;
};
ViewBase.prototype.disposeNativeView = function() {};
ViewBase.prototype.initNativeView = function() {
if (this._cssState) {
this._cssState.playPendingKeyframeAnimations();
}
};
ViewBase.prototype.resetNativeView = function() {
if (this.nativeView && this.recycleNativeView && platform_1.isAndroid) {
properties_1.resetNativeView(this);
}
if (this._cssState) {
this._cancelAllAnimations();
}
};
ViewBase.prototype._setupUI = function(context, atIndex, parentIsLoaded) {
bindable_1.traceNotifyEvent(this, "_setupUI");
if (bindable_1.traceEnabled()) {
bindable_1.traceWrite(this + "._setupUI(" + context + ")", bindable_1.traceCategories.VisualTreeEvents);
}
if (this._context === context) {
return;
}
this._context = context;
bindable_1.traceNotifyEvent(this, "_onContextChanged");
var currentNativeView = this.nativeView;
if (platform_1.isAndroid) {
var nativeView = void 0;
if (this.recycleNativeView) {
nativeView = getNativeView(context, this.typeName);
}
if (!nativeView) {
nativeView = this.createNativeView();
}
this._androidView = this.nativeView = nativeView;
if (nativeView) {
var result = nativeView.defaultPaddings;
if (result === undefined) {
result = org.nativescript.widgets.ViewHelper.getPadding(nativeView);
nativeView.defaultPaddings = result;
}
this._defaultPaddingTop = result.top;
this._defaultPaddingRight = result.right;
this._defaultPaddingBottom = result.bottom;
this._defaultPaddingLeft = result.left;
var style = this.style;
if (!style_properties_1.paddingTopProperty.isSet(style)) {
this.effectivePaddingTop = this._defaultPaddingTop;
}
if (!style_properties_1.paddingRightProperty.isSet(style)) {
this.effectivePaddingRight = this._defaultPaddingRight;
}
if (!style_properties_1.paddingBottomProperty.isSet(style)) {
this.effectivePaddingBottom = this._defaultPaddingBottom;
}
if (!style_properties_1.paddingLeftProperty.isSet(style)) {
this.effectivePaddingLeft = this._defaultPaddingLeft;
}
}
} else {
var nativeView = this.createNativeView();
if (!currentNativeView && nativeView) {
this.nativeView = this._iosView = nativeView;
}
}
this.initNativeView();
if (this.parent) {
var nativeIndex = this.parent._childIndexToNativeChildIndex(atIndex);
this._isAddedToNativeVisualTree = this.parent._addViewToNativeVisualTree(this, nativeIndex);
}
if (this.nativeView) {
if (currentNativeView !== this.nativeView) {
properties_1.initNativeView(this);
}
}
this.eachChild(function(child) {
child._setupUI(context);
return true;
});
};
ViewBase.prototype._tearDownUI = function(force) {
if (!this._context) {
return;
}
if (bindable_1.traceEnabled()) {
bindable_1.traceWrite(this + "._tearDownUI(" + force + ")", bindable_1.traceCategories.VisualTreeEvents);
}
this.resetNativeView();
this.eachChild(function(child) {
child._tearDownUI(force);
return true;
});
if (this.parent) {
this.parent._removeViewFromNativeVisualTree(this);
}
var nativeView = this.nativeView;
if (nativeView && this.recycleNativeView && platform_1.isAndroid) {
var nativeParent = platform_1.isAndroid ? nativeView.getParent() : nativeView.superview;
if (!nativeParent) {
putNativeView(this._context, this);
}
}
this.disposeNativeView();
if (platform_1.isAndroid) {
this.nativeView = null;
this._androidView = null;
}
this._context = null;
bindable_1.traceNotifyEvent(this, "_onContextChanged");
bindable_1.traceNotifyEvent(this, "_tearDownUI");
};
ViewBase.prototype._childIndexToNativeChildIndex = function(index) {
return index;
};
ViewBase.prototype._addViewToNativeVisualTree = function(view, atIndex) {
if (view._isAddedToNativeVisualTree) {
throw new Error("Child already added to the native visual tree.");
}
return true;
};
ViewBase.prototype._removeViewFromNativeVisualTree = function(view) {
bindable_1.traceNotifyEvent(view, "_removeViewFromNativeVisualTree");
view._isAddedToNativeVisualTree = false;
};
ViewBase.prototype._goToVisualState = function(state) {
if (bindable_1.traceEnabled()) {
bindable_1.traceWrite(this + " going to state: " + state, bindable_1.traceCategories.Style);
}
if (state === this._visualState) {
return;
}
this.deletePseudoClass(this._visualState);
this._visualState = state;
this.addPseudoClass(state);
};
ViewBase.prototype._applyXmlAttribute = function(attribute, value) {
if (attribute === "style") {
this._applyInlineStyle(value);
return true;
}
return false;
};
ViewBase.prototype.setInlineStyle = function(style) {
if (typeof style !== "string") {
throw new Error("Parameter should be valid CSS string!");
}
this._applyInlineStyle(style);
};
ViewBase.prototype._parentChanged = function(oldParent) {
if (oldParent) {
properties_1.clearInheritedProperties(this);
if (this.bindingContextBoundToParentBindingContextChanged) {
oldParent.off("bindingContextChange", this.bindingContextChanged, this);
}
} else if (this.shouldAddHandlerToParentBindingContextChanged) {
var parent_4 = this.parent;
parent_4.on("bindingContextChange", this.bindingContextChanged, this);
this.bindings.get("bindingContext").bind(parent_4.bindingContext);
}
};
ViewBase.prototype._registerAnimation = function(animation) {
if (this._registeredAnimations === undefined) {
this._registeredAnimations = new Array();
}
this._registeredAnimations.push(animation);
};
ViewBase.prototype._unregisterAnimation = function(animation) {
if (this._registeredAnimations) {
var index_1 = this._registeredAnimations.indexOf(animation);
if (index_1 >= 0) {
this._registeredAnimations.splice(index_1, 1);
}
}
};
ViewBase.prototype._cancelAllAnimations = function() {
if (this._registeredAnimations) {
for (var _i = 0, _a = this._registeredAnimations; _i < _a.length; _i++) {
var animation = _a[_i];
animation.cancel();
}
}
};
return ViewBase;
}(bindable_1.Observable);
ViewBase.loadedEvent = "loaded";
ViewBase.unloadedEvent = "unloaded";
exports.ViewBase = ViewBase;
ViewBase.prototype.isCollapsed = false;
ViewBase.prototype._oldLeft = 0;
ViewBase.prototype._oldTop = 0;
ViewBase.prototype._oldRight = 0;
ViewBase.prototype._oldBottom = 0;
ViewBase.prototype.effectiveMinWidth = 0;
ViewBase.prototype.effectiveMinHeight = 0;
ViewBase.prototype.effectiveWidth = 0;
ViewBase.prototype.effectiveHeight = 0;
ViewBase.prototype.effectiveMarginTop = 0;
ViewBase.prototype.effectiveMarginRight = 0;
ViewBase.prototype.effectiveMarginBottom = 0;
ViewBase.prototype.effectiveMarginLeft = 0;
ViewBase.prototype.effectivePaddingTop = 0;
ViewBase.prototype.effectivePaddingRight = 0;
ViewBase.prototype.effectivePaddingBottom = 0;
ViewBase.prototype.effectivePaddingLeft = 0;
ViewBase.prototype.effectiveBorderTopWidth = 0;
ViewBase.prototype.effectiveBorderRightWidth = 0;
ViewBase.prototype.effectiveBorderBottomWidth = 0;
ViewBase.prototype.effectiveBorderLeftWidth = 0;
ViewBase.prototype._defaultPaddingTop = 0;
ViewBase.prototype._defaultPaddingRight = 0;
ViewBase.prototype._defaultPaddingBottom = 0;
ViewBase.prototype._defaultPaddingLeft = 0;
ViewBase.prototype._isViewBase = true;
ViewBase.prototype._batchUpdateScope = 0;
exports.bindingContextProperty = new properties_1.InheritedProperty({
name: "bindingContext"
});
exports.bindingContextProperty.register(ViewBase);
exports.classNameProperty = new properties_1.Property({
name: "className",
valueChanged: function(view, oldValue, newValue) {
var classes = view.cssClasses;
classes.clear();
if (typeof newValue === "string") {
newValue.split(" ").forEach(function(c) {
return classes.add(c);
});
}
resetStyles(view);
}
});
exports.classNameProperty.register(ViewBase);
function resetStyles(view) {
view._applyStyleFromScope();
view.eachChild(function(child) {
resetStyles(child);
return true;
});
}
exports.idProperty = new properties_1.Property({
name: "id",
valueChanged: function(view, oldValue, newValue) {
return resetStyles(view);
}
});
exports.idProperty.register(ViewBase);
function booleanConverter(v) {
var lowercase = (v + "").toLowerCase();
if (lowercase === "true") {
return true;
} else if (lowercase === "false") {
return false;
}
throw new Error("Invalid boolean: " + v);
}
exports.booleanConverter = booleanConverter;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var properties_1 = __webpack_require__(31);
var observable_1 = __webpack_require__(32);
exports.Observable = observable_1.Observable;
exports.WrappedValue = observable_1.WrappedValue;
var weak_event_listener_1 = __webpack_require__(38);
var binding_builder_1 = __webpack_require__(39);
var utils_1 = __webpack_require__(14);
var trace_1 = __webpack_require__(15);
exports.traceEnabled = trace_1.isEnabled;
exports.traceWrite = trace_1.write;
exports.traceCategories = trace_1.categories;
exports.traceNotifyEvent = trace_1.notifyEvent;
exports.isCategorySet = trace_1.isCategorySet;
exports.traceMessageType = trace_1.messageType;
var types = __webpack_require__(17);
var application = __webpack_require__(3);
var polymerExpressions = __webpack_require__(40);
var contextKey = "context";
var paramsRegex = /\[\s*(['"])*(\w*)\1\s*\]/;
var bc = binding_builder_1.bindingConstants;
var emptyArray = [];
var propertiesCache = {};
function getProperties(property) {
if (!property) {
return emptyArray;
}
var result = propertiesCache[property];
if (result) {
return result;
}
var parentsMatches = property.match(binding_builder_1.parentsRegex);
result = property.replace(binding_builder_1.parentsRegex, "parentsMatch").replace(/\]/g, "").split(/\.|\[/);
var parentsMatchesCounter = 0;
for (var i = 0, resultLength = result.length; i < resultLength; i++) {
if (result[i] === "parentsMatch") {
result[i] = parentsMatches[parentsMatchesCounter++];
}
}
propertiesCache[property] = result;
return result;
}
function getEventOrGestureName(name) {
return name.indexOf("on") === 0 ? name.substr(2, name.length - 2) : name;
}
exports.getEventOrGestureName = getEventOrGestureName;
function isGesture(eventOrGestureName) {
var t = eventOrGestureName.trim().toLowerCase();
return t === "tap" || t === "doubletap" || t === "pinch" || t === "pan" || t === "swipe" || t === "rotation" || t === "longpress" || t === "touch";
}
exports.isGesture = isGesture;
function isEventOrGesture(name, view) {
if (typeof name === "string") {
var eventOrGestureName = getEventOrGestureName(name);
var evt = eventOrGestureName + "Event";
return view.constructor && evt in view.constructor || isGesture(eventOrGestureName.toLowerCase());
}
return false;
}
exports.isEventOrGesture = isEventOrGesture;
var Binding = function() {
function Binding(target, options) {
this.propertyChangeListeners = new Map();
this.target = new WeakRef(target);
this.options = options;
this.sourceProperties = getProperties(options.sourceProperty);
this.targetOptions = this.resolveOptions(target, getProperties(options.targetProperty));
if (!this.targetOptions) {
throw new Error("Invalid property: " + options.targetProperty + " for target: " + target);
}
if (options.twoWay) {
var target_1 = this.targetOptions.instance.get();
if (target_1 instanceof observable_1.Observable) {
target_1.on(this.targetOptions.property + "Change", this.onTargetPropertyChanged, this);
}
}
}
Binding.prototype.onTargetPropertyChanged = function(data) {
this.updateTwoWay(data.value);
};
Binding.prototype.loadedHandlerVisualTreeBinding = function(args) {
var target = args.object;
target.off("loaded", this.loadedHandlerVisualTreeBinding, this);
var context = target.bindingContext;
if (context !== undefined && context !== null) {
this.update(context);
}
};
Binding.prototype.clearSource = function() {
var _this = this;
this.propertyChangeListeners.forEach(function(observable, index, map) {
weak_event_listener_1.removeWeakEventListener(observable, observable_1.Observable.propertyChangeEvent, _this.onSourcePropertyChanged, _this);
});
this.propertyChangeListeners.clear();
this.sourcesAndProperties = null;
if (this.source) {
this.source.clear();
}
if (this.sourceOptions) {
this.sourceOptions.instance.clear();
this.sourceOptions = undefined;
}
};
Binding.prototype.sourceAsObject = function(source) {
var objectType = typeof source;
if (objectType === "number") {
source = new Number(source);
} else if (objectType === "boolean") {
source = new Boolean(source);
} else if (objectType === "string") {
source = new String(source);
}
return source;
};
Binding.prototype.bindingContextChanged = function(data) {
var target = this.targetOptions.instance.get();
if (!target) {
this.unbind();
return;
}
var value = data.value;
if (value !== null && value !== undefined) {
this.update(value);
} else {
this.clearBinding();
}
};
Binding.prototype.bind = function(source) {
var target = this.targetOptions.instance.get();
if (this.sourceIsBindingContext && target instanceof observable_1.Observable && this.targetOptions.property !== "bindingContext") {
target.on("bindingContextChange", this.bindingContextChanged, this);
}
this.update(source);
};
Binding.prototype.update = function(source) {
this.clearSource();
source = this.sourceAsObject(source);
if (!types.isNullOrUndefined(source)) {
this.source = new WeakRef(source);
this.sourceOptions = this.resolveOptions(source, this.sourceProperties);
var sourceValue = this.getSourcePropertyValue();
this.updateTarget(sourceValue);
this.addPropertyChangeListeners(this.source, this.sourceProperties);
} else if (!this.sourceIsBindingContext) {
var sourceValue = this.getSourcePropertyValue();
this.updateTarget(sourceValue ? sourceValue : source);
}
};
Binding.prototype.unbind = function() {
var target = this.targetOptions.instance.get();
if (target instanceof observable_1.Observable) {
if (this.options.twoWay) {
target.off(this.targetOptions.property + "Change", this.onTargetPropertyChanged, this);
}
if (this.sourceIsBindingContext && this.targetOptions.property !== "bindingContext") {
target.off("bindingContextChange", this.bindingContextChanged, this);
}
}
if (this.targetOptions) {
this.targetOptions = undefined;
}
this.sourceProperties = undefined;
if (!this.source) {
return;
}
this.clearSource();
};
Binding.prototype.resolveObjectsAndProperties = function(source, properties) {
var result = [];
var currentObject = source;
var currentObjectChanged = false;
for (var i = 0, propsArrayLength = properties.length; i < propsArrayLength; i++) {
var property = properties[i];
if (property === bc.bindingValueKey) {
currentObjectChanged = true;
}
if (property === bc.parentValueKey || property.indexOf(bc.parentsValueKey) === 0) {
var parentView = this.getParentView(this.target.get(), property).view;
if (parentView) {
currentObject = parentView.bindingContext;
} else {
var targetInstance = this.target.get();
targetInstance.off("loaded", this.loadedHandlerVisualTreeBinding, this);
targetInstance.on("loaded", this.loadedHandlerVisualTreeBinding, this);
}
currentObjectChanged = true;
}
if (currentObject) {
result.push({
instance: currentObject,
property: property
});
} else {
break;
}
if (!currentObjectChanged && i < propsArrayLength - 1) {
currentObject = currentObject ? currentObject[properties[i]] : null;
}
currentObjectChanged = false;
}
return result;
};
Binding.prototype.addPropertyChangeListeners = function(source, sourceProperty, parentProperies) {
var objectsAndProperties = this.resolveObjectsAndProperties(source.get(), sourceProperty);
var prop = parentProperies || "";
for (var i = 0, length_1 = objectsAndProperties.length; i < length_1; i++) {
var propName = objectsAndProperties[i].property;
prop += "$" + propName;
var currentObject = objectsAndProperties[i].instance;
if (!this.propertyChangeListeners.has(prop) && currentObject instanceof observable_1.Observable && currentObject._isViewBase) {
weak_event_listener_1.addWeakEventListener(currentObject, propName + "Change", this.onSourcePropertyChanged, this);
weak_event_listener_1.addWeakEventListener(currentObject, observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
this.propertyChangeListeners.set(prop, currentObject);
} else if (!this.propertyChangeListeners.has(prop) && currentObject instanceof observable_1.Observable) {
weak_event_listener_1.addWeakEventListener(currentObject, observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
this.propertyChangeListeners.set(prop, currentObject);
}
}
};
Binding.prototype.prepareExpressionForUpdate = function() {
var escapedSourceProperty = utils_1.escapeRegexSymbols(this.options.sourceProperty);
var expRegex = new RegExp(escapedSourceProperty, "g");
var resultExp = this.options.expression.replace(expRegex, bc.newPropertyValueKey);
return resultExp;
};
Binding.prototype.updateTwoWay = function(value) {
if (this.updating || !this.options.twoWay) {
return;
}
var newValue = value;
if (this.options.expression) {
var changedModel = {};
changedModel[bc.bindingValueKey] = value;
changedModel[bc.newPropertyValueKey] = value;
var sourcePropertyName = "";
if (this.sourceOptions) {
sourcePropertyName = this.sourceOptions.property;
} else if (typeof this.options.sourceProperty === "string" && this.options.sourceProperty.indexOf(".") === -1) {
sourcePropertyName = this.options.sourceProperty;
}
if (sourcePropertyName !== "") {
changedModel[sourcePropertyName] = value;
}
var updateExpression = this.prepareExpressionForUpdate();
this.prepareContextForExpression(changedModel, updateExpression, undefined);
var expressionValue = this._getExpressionValue(updateExpression, true, changedModel);
if (expressionValue instanceof Error) {
trace_1.write(expressionValue.message, trace_1.categories.Binding, trace_1.messageType.error);
}
newValue = expressionValue;
}
this.updateSource(newValue);
};
Binding.prototype._getExpressionValue = function(expression, isBackConvert, changedModel) {
try {
var exp_1 = polymerExpressions.PolymerExpressions.getExpression(expression);
if (exp_1) {
var context = this.source && this.source.get && this.source.get() || global;
var model = {};
var addedProps = [];
var resources = application.getResources();
for (var prop in resources) {
if (resources.hasOwnProperty(prop) && !context.hasOwnProperty(prop)) {
context[prop] = resources[prop];
addedProps.push(prop);
}
}
this.prepareContextForExpression(context, expression, addedProps);
model[contextKey] = context;
var result = exp_1.getValue(model, isBackConvert, changedModel ? changedModel : model);
var addedPropsLength = addedProps.length;
for (var i = 0; i < addedPropsLength; i++) {
delete context[addedProps[i]];
}
addedProps.length = 0;
return result;
}
return new Error(expression + " is not a valid expression.");
} catch (e) {
var errorMessage = "Run-time error occured in file: " + e.sourceURL + " at line: " + e.line + " and column: " + e.column;
return new Error(errorMessage);
}
};
Binding.prototype.onSourcePropertyChanged = function(data) {
var sourceProps = this.sourceProperties;
var sourcePropsLength = sourceProps.length;
var changedPropertyIndex = sourceProps.indexOf(data.propertyName);
var parentProps = "";
if (changedPropertyIndex > -1) {
parentProps = "$" + sourceProps.slice(0, changedPropertyIndex + 1).join("$");
while (this.propertyChangeListeners.get(parentProps) !== data.object) {
changedPropertyIndex += sourceProps.slice(changedPropertyIndex + 1).indexOf(data.propertyName) + 1;
parentProps = "$" + sourceProps.slice(0, changedPropertyIndex + 1).join("$");
}
}
if (this.options.expression) {
var expressionValue = this._getExpressionValue(this.options.expression, false, undefined);
if (expressionValue instanceof Error) {
trace_1.write(expressionValue.message, trace_1.categories.Binding, trace_1.messageType.error);
} else {
this.updateTarget(expressionValue);
}
} else {
if (changedPropertyIndex > -1) {
var props = sourceProps.slice(changedPropertyIndex + 1);
var propsLength = props.length;
if (propsLength > 0) {
var value = data.value;
for (var i = 0; i < propsLength; i++) {
value = value[props[i]];
}
this.updateTarget(value);
} else if (data.propertyName === this.sourceOptions.property) {
this.updateTarget(data.value);
}
}
}
if (changedPropertyIndex > -1 && changedPropertyIndex < sourcePropsLength - 1) {
var probablyChangedObject = this.propertyChangeListeners.get(parentProps);
if (probablyChangedObject && probablyChangedObject !== data.object[sourceProps[changedPropertyIndex]]) {
for (var i = sourcePropsLength - 1; i > changedPropertyIndex; i--) {
var prop = "$" + sourceProps.slice(0, i + 1).join("$");
if (this.propertyChangeListeners.has(prop)) {
weak_event_listener_1.removeWeakEventListener(this.propertyChangeListeners.get(prop), observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
this.propertyChangeListeners.delete(prop);
}
}
var newProps = sourceProps.slice(changedPropertyIndex + 1);
var newObject = data.object[sourceProps[changedPropertyIndex]];
if (!types.isNullOrUndefined(newObject) && typeof newObject === "object") {
this.addPropertyChangeListeners(new WeakRef(newObject), newProps, parentProps);
}
}
}
};
Binding.prototype.prepareContextForExpression = function(model, expression, newProps) {
var parentViewAndIndex;
var parentView;
var addedProps = newProps || [];
if (expression.indexOf(bc.bindingValueKey) > -1) {
model[bc.bindingValueKey] = model;
addedProps.push(bc.bindingValueKey);
}
if (expression.indexOf(bc.parentValueKey) > -1) {
parentView = this.getParentView(this.target.get(), bc.parentValueKey).view;
if (parentView) {
model[bc.parentValueKey] = parentView.bindingContext;
addedProps.push(bc.parentValueKey);
}
}
var parentsArray = expression.match(binding_builder_1.parentsRegex);
if (parentsArray) {
for (var i = 0; i < parentsArray.length; i++) {
parentViewAndIndex = this.getParentView(this.target.get(), parentsArray[i]);
if (parentViewAndIndex.view) {
model[bc.parentsValueKey] = model[bc.parentsValueKey] || {};
model[bc.parentsValueKey][parentViewAndIndex.index] = parentViewAndIndex.view.bindingContext;
addedProps.push(bc.parentsValueKey);
}
}
}
};
Binding.prototype.getSourcePropertyValue = function() {
if (this.options.expression) {
var changedModel = {};
changedModel[bc.bindingValueKey] = this.source ? this.source.get() : undefined;
var expressionValue = this._getExpressionValue(this.options.expression, false, changedModel);
if (expressionValue instanceof Error) {
trace_1.write(expressionValue.message, trace_1.categories.Binding, trace_1.messageType.error);
} else {
return expressionValue;
}
}
if (this.sourceOptions) {
var sourceOptionsInstance = this.sourceOptions.instance.get();
if (this.sourceOptions.property === bc.bindingValueKey) {
return sourceOptionsInstance;
} else if (sourceOptionsInstance instanceof observable_1.Observable && (this.sourceOptions.property && this.sourceOptions.property !== "")) {
return sourceOptionsInstance.get(this.sourceOptions.property);
} else if (sourceOptionsInstance && this.sourceOptions.property && this.sourceOptions.property !== "" && this.sourceOptions.property in sourceOptionsInstance) {
return sourceOptionsInstance[this.sourceOptions.property];
} else {
trace_1.write("Property: '" + this.sourceOptions.property + "' is invalid or does not exist. SourceProperty: '" + this.options.sourceProperty + "'", trace_1.categories.Binding, trace_1.messageType.error);
}
}
return null;
};
Binding.prototype.clearBinding = function() {
this.clearSource();
this.updateTarget(properties_1.unsetValue);
};
Binding.prototype.updateTarget = function(value) {
if (this.updating) {
return;
}
this.updateOptions(this.targetOptions, types.isNullOrUndefined(value) ? properties_1.unsetValue : value);
};
Binding.prototype.updateSource = function(value) {
if (this.updating || !this.source || !this.source.get()) {
return;
}
this.updateOptions(this.sourceOptions, value);
};
Binding.prototype.getParentView = function(target, property) {
if (!target) {
return {
view: null,
index: null
};
}
var result;
if (property === bc.parentValueKey) {
result = target.parent;
}
var index = null;
if (property.indexOf(bc.parentsValueKey) === 0) {
result = target.parent;
var indexParams = paramsRegex.exec(property);
if (indexParams && indexParams.length > 1) {
index = indexParams[2];
}
if (!isNaN(index)) {
var indexAsInt = parseInt(index);
while (indexAsInt > 0) {
result = result.parent;
indexAsInt--;
}
} else if (types.isString(index)) {
while (result && result.typeName !== index) {
result = result.parent;
}
}
}
return {
view: result,
index: index
};
};
Binding.prototype.resolveOptions = function(obj, properties) {
var objectsAndProperties = this.resolveObjectsAndProperties(obj, properties);
if (objectsAndProperties.length > 0) {
var resolvedObj = objectsAndProperties[objectsAndProperties.length - 1].instance;
var prop = objectsAndProperties[objectsAndProperties.length - 1].property;
return {
instance: new WeakRef(this.sourceAsObject(resolvedObj)),
property: prop
};
}
return null;
};
Binding.prototype.updateOptions = function(options, value) {
var optionsInstance;
if (options && options.instance) {
optionsInstance = options.instance.get();
}
if (!optionsInstance) {
return;
}
this.updating = true;
try {
if (isEventOrGesture(options.property, optionsInstance) && types.isFunction(value)) {
optionsInstance.off(options.property, null, optionsInstance.bindingContext);
optionsInstance.on(options.property, value, optionsInstance.bindingContext);
} else if (optionsInstance instanceof observable_1.Observable) {
optionsInstance.set(options.property, value);
} else {
optionsInstance[options.property] = value;
}
} catch (ex) {
trace_1.write("Binding error while setting property " + options.property + " of " + optionsInstance + ": " + ex, trace_1.categories.Binding, trace_1.messageType.error);
}
this.updating = false;
};
return Binding;
}();
exports.Binding = Binding;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var handlersForEventName = new Map();
var sourcesMap = new WeakMap();
var TargetHandlerPair = function() {
function TargetHandlerPair(target, handler) {
this.tagetRef = new WeakRef(target);
this.handler = handler;
}
return TargetHandlerPair;
}();
function getHandlerForEventName(eventName) {
var handler = handlersForEventName.get(eventName);
if (!handler) {
handler = function(eventData) {
var source = eventData.object;
var sourceEventMap = sourcesMap.get(source);
if (!sourceEventMap) {
source.removeEventListener(eventName, handlersForEventName.get(eventName));
return;
}
var targetHandlerPairList = sourceEventMap.get(eventName);
if (!targetHandlerPairList) {
return;
}
var deadPairsIndexes = [];
for (var i = 0; i < targetHandlerPairList.length; i++) {
var pair = targetHandlerPairList[i];
var target = pair.tagetRef.get();
if (target) {
pair.handler.call(target, eventData);
} else {
deadPairsIndexes.push(i);
}
}
if (deadPairsIndexes.length === targetHandlerPairList.length) {
source.removeEventListener(eventName, handlersForEventName.get(eventName));
sourceEventMap.delete(eventName);
} else {
for (var j = deadPairsIndexes.length - 1; j >= 0; j--) {
targetHandlerPairList.splice(deadPairsIndexes[j], 1);
}
}
};
handlersForEventName.set(eventName, handler);
}
return handler;
}
function validateArgs(source, eventName, handler, target) {
if (!source) {
throw new Error("source is null or undefined");
}
if (!target) {
throw new Error("target is null or undefined");
}
if (typeof eventName !== "string") {
throw new Error("eventName is not a string");
}
if (typeof handler !== "function") {
throw new Error("handler is not a function");
}
}
function addWeakEventListener(source, eventName, handler, target) {
validateArgs(source, eventName, handler, target);
var shouldAttach = false;
var sourceEventMap = sourcesMap.get(source);
if (!sourceEventMap) {
sourceEventMap = new Map();
sourcesMap.set(source, sourceEventMap);
shouldAttach = true;
}
var pairList = sourceEventMap.get(eventName);
if (!pairList) {
pairList = new Array();
sourceEventMap.set(eventName, pairList);
shouldAttach = true;
}
pairList.push(new TargetHandlerPair(target, handler));
if (shouldAttach) {
source.addEventListener(eventName, getHandlerForEventName(eventName));
}
}
exports.addWeakEventListener = addWeakEventListener;
function removeWeakEventListener(source, eventName, handler, target) {
validateArgs(source, eventName, handler, target);
var handlerForEventWithName = handlersForEventName.get(eventName);
if (!handlerForEventWithName) {
return;
}
var sourceEventMap = sourcesMap.get(source);
if (!sourceEventMap) {
return;
}
var targetHandlerPairList = sourceEventMap.get(eventName);
if (!targetHandlerPairList) {
return;
}
var targetHandlerPairsToRemove = [];
for (var i = 0; i < targetHandlerPairList.length; i++) {
var pair = targetHandlerPairList[i];
var registeredTarget = pair.tagetRef.get();
if (!registeredTarget || registeredTarget === target && handler === pair.handler) {
targetHandlerPairsToRemove.push(i);
}
}
if (targetHandlerPairsToRemove.length === targetHandlerPairList.length) {
source.removeEventListener(eventName, handlerForEventWithName);
sourceEventMap.delete(eventName);
} else {
for (var j = targetHandlerPairsToRemove.length - 1; j >= 0; j--) {
targetHandlerPairList.splice(targetHandlerPairsToRemove[j], 1);
}
}
}
exports.removeWeakEventListener = removeWeakEventListener;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var expressionSymbolsRegex = /[\+\-\*\/%\?:<>=!\|&\(\)^~]/;
var bindingConstants;
(function(bindingConstants) {
bindingConstants.sourceProperty = "sourceProperty";
bindingConstants.targetProperty = "targetProperty";
bindingConstants.expression = "expression";
bindingConstants.twoWay = "twoWay";
bindingConstants.source = "source";
bindingConstants.bindingValueKey = "$value";
bindingConstants.parentValueKey = "$parent";
bindingConstants.parentsValueKey = "$parents";
bindingConstants.newPropertyValueKey = "$newPropertyValue";
})(bindingConstants = exports.bindingConstants || (exports.bindingConstants = {}));
var hasEqualSignRegex = /=+/;
var equalSignComparisionOperatorsRegex = /(==|===|>=|<=|!=|!==)/;
exports.parentsRegex = /\$parents\s*\[\s*(['"]*)\w*\1\s*\]/g;
function isNamedParam(value) {
var equalSignIndex = value.search(hasEqualSignRegex);
if (equalSignIndex > -1) {
var equalSignSurround = value.substr(equalSignIndex > 0 ? equalSignIndex - 1 : 0, 3);
if (equalSignSurround.search(equalSignComparisionOperatorsRegex) === -1) {
return true;
}
}
return false;
}
function areNamedParams(params) {
var i;
for (i = 0; i < params.length; i++) {
if (isNamedParam(params[i])) {
return true;
}
}
return false;
}
var namedParamConstants = {
propName: "propName",
propValue: "propValue"
};
function getPropertyNameValuePair(param, knownOptions, callback) {
var nameValuePair = {};
var propertyName = param.substr(0, param.indexOf("=")).trim();
var propertyValue = param.substr(param.indexOf("=") + 1).trim();
if (knownOptions) {
if (!propertyName) {
propertyName = knownOptions.defaultProperty;
} else {
propertyName = propertyName in knownOptions ? propertyName : null;
}
}
if (propertyName) {
if (callback) {
nameValuePair = callback(propertyName, propertyValue);
} else {
nameValuePair[namedParamConstants.propName] = propertyName;
nameValuePair[namedParamConstants.propValue] = propertyValue;
}
return nameValuePair;
}
return null;
}
function parseNamedProperties(parameterList, knownOptions, callback) {
var result = {};
var i;
for (i = 0; i < parameterList.length; i++) {
var nameValuePair = getPropertyNameValuePair(parameterList[i], knownOptions, callback);
if (nameValuePair) {
result[nameValuePair[namedParamConstants.propName]] = nameValuePair[namedParamConstants.propValue];
}
}
return result;
}
function getParamsArray(value) {
var result = [];
var i;
var skipComma = 0;
var indexReached = 0;
var singleQuoteBlock, doubleQuoteBlock = false;
for (i = 0; i < value.length; i++) {
if (value[i] === '"') {
doubleQuoteBlock = !doubleQuoteBlock;
}
if (value[i] === "'") {
singleQuoteBlock = !singleQuoteBlock;
}
if (value[i] === "(" || value[i] === "[") {
skipComma++;
}
if (value[i] === ")" || value[i] === "]") {
skipComma--;
}
if (value[i] === "," && skipComma === 0 && !(singleQuoteBlock || doubleQuoteBlock)) {
result.push(value.substr(indexReached, i - indexReached));
indexReached = i + 1;
}
}
result.push(value.substr(indexReached));
return result;
}
function isExpression(expression) {
if (expression.search(expressionSymbolsRegex) > -1) {
var parentsMatches = expression.match(exports.parentsRegex);
if (parentsMatches) {
var restOfExpression = expression.substr(expression.indexOf(parentsMatches[0]) + parentsMatches[0].length);
if (!(restOfExpression.search(expressionSymbolsRegex) > -1)) {
return false;
}
}
return true;
}
return false;
}
function getBindingOptions(name, value) {
var namedParams = [];
var params = getParamsArray(value);
if (!areNamedParams(params)) {
if (params.length === 1) {
var trimmedValue = params[0].trim();
var sourceProp;
if (isExpression(trimmedValue)) {
sourceProp = bindingConstants.bindingValueKey;
namedParams.push(bindingConstants.expression + " = " + trimmedValue);
} else {
sourceProp = trimmedValue;
}
namedParams.push(bindingConstants.sourceProperty + " = " + sourceProp);
namedParams.push(bindingConstants.twoWay + " = true");
} else {
namedParams.push(bindingConstants.sourceProperty + " = " + params[0].trim());
namedParams.push(bindingConstants.expression + " = " + params[1].trim());
var twoWay = params[2] ? params[2].toLowerCase().trim() === "true" : true;
namedParams.push(bindingConstants.twoWay + " = " + twoWay);
}
} else {
namedParams = params;
}
var bindingPropertyHandler = function(prop, value) {
var result = {};
result[namedParamConstants.propName] = prop;
if (prop === bindingConstants.twoWay) {
if (value === "true") {
result[namedParamConstants.propValue] = true;
} else {
result[namedParamConstants.propValue] = false;
}
} else {
result[namedParamConstants.propValue] = value;
}
return result;
};
var bindingOptionsParameters = parseNamedProperties(namedParams, xmlBindingProperties, bindingPropertyHandler);
var bindOptions = {
targetProperty: name
};
for (var prop in bindingOptionsParameters) {
if (bindingOptionsParameters.hasOwnProperty(prop)) {
bindOptions[prop] = bindingOptionsParameters[prop];
}
}
if (bindOptions[bindingConstants.twoWay] === undefined) {
bindOptions[bindingConstants.twoWay] = true;
}
return bindOptions;
}
exports.getBindingOptions = getBindingOptions;
var xmlBindingProperties = {
sourceProperty: true,
expression: true,
twoWay: true,
source: true,
defaultProperty: bindingConstants.sourceProperty
};
}, function(module, exports, __webpack_require__) {
var esprima = __webpack_require__(41).esprima;
var Path = __webpack_require__(42).Path;
(function(global) {
"use strict";
var expressionParseCache = Object.create(null);
function getExpression(expressionText) {
var expression = expressionParseCache[expressionText];
if (!expression) {
var delegate = new ASTDelegate();
esprima.parse(expressionText, delegate);
expression = new Expression(delegate);
expressionParseCache[expressionText] = expression;
}
return expression;
}
function Literal(value) {
this.value = value;
this.valueFn_ = undefined;
}
Literal.prototype = {
valueFn: function() {
if (!this.valueFn_) {
var value = this.value;
this.valueFn_ = function() {
return value;
};
}
return this.valueFn_;
}
};
function IdentPath(name) {
this.name = name;
this.path = Path.get(name);
}
IdentPath.prototype = {
valueFn: function() {
if (!this.valueFn_) {
var name = this.name;
var path = this.path;
this.valueFn_ = function(model, observer, changedModel) {
if (observer) observer.addPath(model, path);
if (changedModel) {
var result = path.getValueFrom(changedModel);
if (result !== undefined) {
return result;
}
}
return path.getValueFrom(model);
};
}
return this.valueFn_;
},
setValue: function(model, newValue) {
if (this.path.length == 1) {
model = findScope(model, this.path[0]);
}
return this.path.setValueFrom(model, newValue);
}
};
function MemberExpression(object, property, accessor) {
this.computed = accessor == "[";
this.dynamicDeps = typeof object == "function" || object.dynamicDeps || this.computed && !(property instanceof Literal);
this.simplePath = !this.dynamicDeps && (property instanceof IdentPath || property instanceof Literal) && (object instanceof MemberExpression || object instanceof IdentPath);
this.object = this.simplePath ? object : getFn(object);
this.property = !this.computed || this.simplePath ? property : getFn(property);
}
MemberExpression.prototype = {
get fullPath() {
if (!this.fullPath_) {
var parts = this.object instanceof MemberExpression ? this.object.fullPath.slice() : [ this.object.name ];
parts.push(this.property instanceof IdentPath ? this.property.name : this.property.value);
this.fullPath_ = Path.get(parts);
}
return this.fullPath_;
},
valueFn: function() {
if (!this.valueFn_) {
var object = this.object;
if (this.simplePath) {
var path = this.fullPath;
this.valueFn_ = function(model, observer) {
if (observer) observer.addPath(model, path);
return path.getValueFrom(model);
};
} else if (!this.computed) {
var path = Path.get(this.property.name);
this.valueFn_ = function(model, observer, filterRegistry) {
var context = object(model, observer, filterRegistry);
if (observer) observer.addPath(context, path);
return path.getValueFrom(context);
};
} else {
var property = this.property;
this.valueFn_ = function(model, observer, filterRegistry) {
var context = object(model, observer, filterRegistry);
var propName = property(model, observer, filterRegistry);
if (observer) observer.addPath(context, [ propName ]);
return context ? context[propName] : undefined;
};
}
}
return this.valueFn_;
},
setValue: function(model, newValue) {
if (this.simplePath) {
this.fullPath.setValueFrom(model, newValue);
return newValue;
}
var object = this.object(model);
var propName = this.property instanceof IdentPath ? this.property.name : this.property(model);
return object[propName] = newValue;
}
};
function Filter(name, args) {
this.name = name;
this.args = [];
for (var i = 0; i < args.length; i++) {
this.args[i] = getFn(args[i]);
}
}
Filter.prototype = {
transform: function(model, observer, filterRegistry, toModelDirection, initialArgs) {
var fn = filterRegistry[this.name];
var context = model;
if (fn) {
context = undefined;
} else {
fn = context[this.name];
if (!fn) {
console.error("Cannot find function or filter: " + this.name);
return;
}
}
if (toModelDirection) {
fn = fn.toModel;
} else if (typeof fn.toView == "function") {
fn = fn.toView;
}
if (typeof fn != "function") {
console.error("Cannot find function or filter: " + this.name);
return;
}
var args = initialArgs || [];
for (var i = 0; i < this.args.length; i++) {
args.push(getFn(this.args[i])(model, observer, filterRegistry));
}
return fn.apply(context, args);
}
};
function notImplemented() {
throw Error("Not Implemented");
}
var unaryOperators = {
"+": function(v) {
return +v;
},
"-": function(v) {
return -v;
},
"!": function(v) {
return !v;
}
};
var binaryOperators = {
"+": function(l, r) {
return l + r;
},
"-": function(l, r) {
return l - r;
},
"*": function(l, r) {
return l * r;
},
"/": function(l, r) {
return l / r;
},
"%": function(l, r) {
return l % r;
},
"<": function(l, r) {
return l < r;
},
">": function(l, r) {
return l > r;
},
"<=": function(l, r) {
return l <= r;
},
">=": function(l, r) {
return l >= r;
},
"==": function(l, r) {
return l == r;
},
"!=": function(l, r) {
return l != r;
},
"===": function(l, r) {
return l === r;
},
"!==": function(l, r) {
return l !== r;
},
"&&": function(l, r) {
return l && r;
},
"||": function(l, r) {
return l || r;
}
};
function getFn(arg) {
return typeof arg == "function" ? arg : arg.valueFn();
}
function ASTDelegate() {
this.expression = null;
this.filters = [];
this.deps = {};
this.currentPath = undefined;
this.scopeIdent = undefined;
this.indexIdent = undefined;
this.dynamicDeps = false;
}
ASTDelegate.prototype = {
createUnaryExpression: function(op, argument) {
if (!unaryOperators[op]) throw Error("Disallowed operator: " + op);
argument = getFn(argument);
return function(model, observer, filterRegistry) {
return unaryOperators[op](argument(model, observer, filterRegistry));
};
},
createBinaryExpression: function(op, left, right) {
if (!binaryOperators[op]) throw Error("Disallowed operator: " + op);
left = getFn(left);
right = getFn(right);
switch (op) {
case "||":
this.dynamicDeps = true;
return function(model, observer, filterRegistry) {
return left(model, observer, filterRegistry) || right(model, observer, filterRegistry);
};

case "&&":
this.dynamicDeps = true;
return function(model, observer, filterRegistry) {
return left(model, observer, filterRegistry) && right(model, observer, filterRegistry);
};
}
return function(model, observer, filterRegistry) {
return binaryOperators[op](left(model, observer, filterRegistry), right(model, observer, filterRegistry));
};
},
createConditionalExpression: function(test, consequent, alternate) {
test = getFn(test);
consequent = getFn(consequent);
alternate = getFn(alternate);
this.dynamicDeps = true;
return function(model, observer, filterRegistry) {
return test(model, observer, filterRegistry) ? consequent(model, observer, filterRegistry) : alternate(model, observer, filterRegistry);
};
},
createIdentifier: function(name) {
var ident = new IdentPath(name);
ident.type = "Identifier";
return ident;
},
createMemberExpression: function(accessor, object, property) {
var ex = new MemberExpression(object, property, accessor);
if (ex.dynamicDeps) this.dynamicDeps = true;
return ex;
},
createCallExpression: function(expression, args) {
if (!(expression instanceof IdentPath)) throw Error("Only identifier function invocations are allowed");
var filter = new Filter(expression.name, args);
return function(model, observer, filterRegistry) {
return filter.transform(model, observer, filterRegistry, false);
};
},
createLiteral: function(token) {
return new Literal(token.value);
},
createArrayExpression: function(elements) {
for (var i = 0; i < elements.length; i++) elements[i] = getFn(elements[i]);
return function(model, observer, filterRegistry) {
var arr = [];
for (var i = 0; i < elements.length; i++) arr.push(elements[i](model, observer, filterRegistry));
return arr;
};
},
createProperty: function(kind, key, value) {
return {
key: key instanceof IdentPath ? key.name : key.value,
value: value
};
},
createObjectExpression: function(properties) {
for (var i = 0; i < properties.length; i++) properties[i].value = getFn(properties[i].value);
return function(model, observer, filterRegistry) {
var obj = {};
for (var i = 0; i < properties.length; i++) obj[properties[i].key] = properties[i].value(model, observer, filterRegistry);
return obj;
};
},
createFilter: function(name, args) {
this.filters.push(new Filter(name, args));
},
createAsExpression: function(expression, scopeIdent) {
this.expression = expression;
this.scopeIdent = scopeIdent;
},
createInExpression: function(scopeIdent, indexIdent, expression) {
this.expression = expression;
this.scopeIdent = scopeIdent;
this.indexIdent = indexIdent;
},
createTopLevel: function(expression) {
this.expression = expression;
},
createThisExpression: notImplemented
};
function Expression(delegate) {
this.scopeIdent = delegate.scopeIdent;
this.indexIdent = delegate.indexIdent;
if (!delegate.expression) throw Error("No expression found.");
this.expression = delegate.expression;
getFn(this.expression);
this.filters = delegate.filters;
this.dynamicDeps = delegate.dynamicDeps;
}
Expression.prototype = {
getValue: function(model, isBackConvert, changedModel, observer) {
var value = getFn(this.expression)(model.context, observer, changedModel);
for (var i = 0; i < this.filters.length; i++) {
value = this.filters[i].transform(model.context, observer, model.context, isBackConvert, [ value ]);
}
return value;
},
setValue: function(model, newValue, filterRegistry) {
var count = this.filters ? this.filters.length : 0;
while (count-- > 0) {
newValue = this.filters[count].transform(model, undefined, filterRegistry, true, [ newValue ]);
}
if (this.expression.setValue) return this.expression.setValue(model, newValue);
}
};
function convertStylePropertyName(name) {
return String(name).replace(/[A-Z]/g, function(c) {
return "-" + c.toLowerCase();
});
}
var parentScopeName = "@" + Math.random().toString(36).slice(2);
function findScope(model, prop) {
while (model[parentScopeName] && !Object.prototype.hasOwnProperty.call(model, prop)) {
model = model[parentScopeName];
}
return model;
}
function isLiteralExpression(pathString) {
switch (pathString) {
case "":
return false;

case "false":
case "null":
case "true":
return true;
}
if (!isNaN(Number(pathString))) return true;
return false;
}
function PolymerExpressions() {}
PolymerExpressions.prototype = {
styleObject: function(value) {
var parts = [];
for (var key in value) {
parts.push(convertStylePropertyName(key) + ": " + value[key]);
}
return parts.join("; ");
},
tokenList: function(value) {
var tokens = [];
for (var key in value) {
if (value[key]) tokens.push(key);
}
return tokens.join(" ");
},
prepareInstancePositionChanged: function(template) {
var indexIdent = template.polymerExpressionIndexIdent_;
if (!indexIdent) return;
return function(templateInstance, index) {
templateInstance.model[indexIdent] = index;
};
},
prepareInstanceModel: function(template) {
var scopeName = template.polymerExpressionScopeIdent_;
if (!scopeName) return;
var parentScope = template.templateInstance ? template.templateInstance.model : template.model;
var indexName = template.polymerExpressionIndexIdent_;
return function(model) {
return createScopeObject(parentScope, model, scopeName, indexName);
};
}
};
var createScopeObject = "__proto__" in {} ? function(parentScope, model, scopeName, indexName) {
var scope = {};
scope[scopeName] = model;
scope[indexName] = undefined;
scope[parentScopeName] = parentScope;
scope.__proto__ = parentScope;
return scope;
} : function(parentScope, model, scopeName, indexName) {
var scope = Object.create(parentScope);
Object.defineProperty(scope, scopeName, {
value: model,
configurable: true,
writable: true
});
Object.defineProperty(scope, indexName, {
value: undefined,
configurable: true,
writable: true
});
Object.defineProperty(scope, parentScopeName, {
value: parentScope,
configurable: true,
writable: true
});
return scope;
};
global.PolymerExpressions = PolymerExpressions;
PolymerExpressions.getExpression = getExpression;
})(module.exports);
}, function(module, exports) {
(function(global) {
"use strict";
var Token, TokenName, Syntax, Messages, source, index, length, delegate, lookahead, state;
Token = {
BooleanLiteral: 1,
EOF: 2,
Identifier: 3,
Keyword: 4,
NullLiteral: 5,
NumericLiteral: 6,
Punctuator: 7,
StringLiteral: 8
};
TokenName = {};
TokenName[Token.BooleanLiteral] = "Boolean";
TokenName[Token.EOF] = "<end>";
TokenName[Token.Identifier] = "Identifier";
TokenName[Token.Keyword] = "Keyword";
TokenName[Token.NullLiteral] = "Null";
TokenName[Token.NumericLiteral] = "Numeric";
TokenName[Token.Punctuator] = "Punctuator";
TokenName[Token.StringLiteral] = "String";
Syntax = {
ArrayExpression: "ArrayExpression",
BinaryExpression: "BinaryExpression",
CallExpression: "CallExpression",
ConditionalExpression: "ConditionalExpression",
EmptyStatement: "EmptyStatement",
ExpressionStatement: "ExpressionStatement",
Identifier: "Identifier",
Literal: "Literal",
LabeledStatement: "LabeledStatement",
LogicalExpression: "LogicalExpression",
MemberExpression: "MemberExpression",
ObjectExpression: "ObjectExpression",
Program: "Program",
Property: "Property",
ThisExpression: "ThisExpression",
UnaryExpression: "UnaryExpression"
};
Messages = {
UnexpectedToken: "Unexpected token %0",
UnknownLabel: "Undefined label '%0'",
Redeclaration: "%0 '%1' has already been declared"
};
function assert(condition, message) {
if (!condition) {
throw new Error("ASSERT: " + message);
}
}
function isDecimalDigit(ch) {
return ch >= 48 && ch <= 57;
}
function isWhiteSpace(ch) {
return ch === 32 || ch === 9 || ch === 11 || ch === 12 || ch === 160 || ch >= 5760 && " ᠎             　\ufeff".indexOf(String.fromCharCode(ch)) > 0;
}
function isLineTerminator(ch) {
return ch === 10 || ch === 13 || ch === 8232 || ch === 8233;
}
function isIdentifierStart(ch) {
return ch === 36 || ch === 95 || ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
}
function isIdentifierPart(ch) {
return ch === 36 || ch === 95 || ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 48 && ch <= 57;
}
function isKeyword(id) {
return id === "this";
}
function skipWhitespace() {
while (index < length && isWhiteSpace(source.charCodeAt(index))) {
++index;
}
}
function getIdentifier() {
var start, ch;
start = index++;
while (index < length) {
ch = source.charCodeAt(index);
if (isIdentifierPart(ch)) {
++index;
} else {
break;
}
}
return source.slice(start, index);
}
function scanIdentifier() {
var start, id, type;
start = index;
id = getIdentifier();
if (id.length === 1) {
type = Token.Identifier;
} else if (isKeyword(id)) {
type = Token.Keyword;
} else if (id === "null") {
type = Token.NullLiteral;
} else if (id === "true" || id === "false") {
type = Token.BooleanLiteral;
} else {
type = Token.Identifier;
}
return {
type: type,
value: id,
range: [ start, index ]
};
}
function scanPunctuator() {
var start = index, code = source.charCodeAt(index), code2, ch1 = source[index], ch2;
switch (code) {
case 46:
case 40:
case 41:
case 59:
case 44:
case 123:
case 125:
case 91:
case 93:
case 58:
case 63:
++index;
return {
type: Token.Punctuator,
value: String.fromCharCode(code),
range: [ start, index ]
};

default:
code2 = source.charCodeAt(index + 1);
if (code2 === 61) {
switch (code) {
case 37:
case 38:
case 42:
case 43:
case 45:
case 47:
case 60:
case 62:
case 124:
index += 2;
return {
type: Token.Punctuator,
value: String.fromCharCode(code) + String.fromCharCode(code2),
range: [ start, index ]
};

case 33:
case 61:
index += 2;
if (source.charCodeAt(index) === 61) {
++index;
}
return {
type: Token.Punctuator,
value: source.slice(start, index),
range: [ start, index ]
};

default:
break;
}
}
break;
}
ch2 = source[index + 1];
if (ch1 === ch2 && "&|".indexOf(ch1) >= 0) {
index += 2;
return {
type: Token.Punctuator,
value: ch1 + ch2,
range: [ start, index ]
};
}
if ("<>=!+-*%&|^/".indexOf(ch1) >= 0) {
++index;
return {
type: Token.Punctuator,
value: ch1,
range: [ start, index ]
};
}
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
function scanNumericLiteral() {
var number, start, ch;
ch = source[index];
assert(isDecimalDigit(ch.charCodeAt(0)) || ch === ".", "Numeric literal must start with a decimal digit or a decimal point");
start = index;
number = "";
if (ch !== ".") {
number = source[index++];
ch = source[index];
if (number === "0") {
if (ch && isDecimalDigit(ch.charCodeAt(0))) {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
}
while (isDecimalDigit(source.charCodeAt(index))) {
number += source[index++];
}
ch = source[index];
}
if (ch === ".") {
number += source[index++];
while (isDecimalDigit(source.charCodeAt(index))) {
number += source[index++];
}
ch = source[index];
}
if (ch === "e" || ch === "E") {
number += source[index++];
ch = source[index];
if (ch === "+" || ch === "-") {
number += source[index++];
}
if (isDecimalDigit(source.charCodeAt(index))) {
while (isDecimalDigit(source.charCodeAt(index))) {
number += source[index++];
}
} else {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
}
if (isIdentifierStart(source.charCodeAt(index))) {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
return {
type: Token.NumericLiteral,
value: parseFloat(number),
range: [ start, index ]
};
}
function scanStringLiteral() {
var str = "", quote, start, ch, octal = false;
quote = source[index];
assert(quote === "'" || quote === '"', "String literal must starts with a quote");
start = index;
++index;
while (index < length) {
ch = source[index++];
if (ch === quote) {
quote = "";
break;
} else if (ch === "\\") {
ch = source[index++];
if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
switch (ch) {
case "n":
str += "\n";
break;

case "r":
str += "\r";
break;

case "t":
str += "\t";
break;

case "b":
str += "\b";
break;

case "f":
str += "\f";
break;

case "v":
str += "\v";
break;

default:
str += ch;
break;
}
} else {
if (ch === "\r" && source[index] === "\n") {
++index;
}
}
} else if (isLineTerminator(ch.charCodeAt(0))) {
break;
} else {
str += ch;
}
}
if (quote !== "") {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
return {
type: Token.StringLiteral,
value: str,
octal: octal,
range: [ start, index ]
};
}
function isIdentifierName(token) {
return token.type === Token.Identifier || token.type === Token.Keyword || token.type === Token.BooleanLiteral || token.type === Token.NullLiteral;
}
function advance() {
var ch;
skipWhitespace();
if (index >= length) {
return {
type: Token.EOF,
range: [ index, index ]
};
}
ch = source.charCodeAt(index);
if (ch === 40 || ch === 41 || ch === 58) {
return scanPunctuator();
}
if (ch === 39 || ch === 34) {
return scanStringLiteral();
}
if (isIdentifierStart(ch)) {
return scanIdentifier();
}
if (ch === 46) {
if (isDecimalDigit(source.charCodeAt(index + 1))) {
return scanNumericLiteral();
}
return scanPunctuator();
}
if (isDecimalDigit(ch)) {
return scanNumericLiteral();
}
return scanPunctuator();
}
function lex() {
var token;
token = lookahead;
index = token.range[1];
lookahead = advance();
index = token.range[1];
return token;
}
function peek() {
var pos;
pos = index;
lookahead = advance();
index = pos;
}
function throwError(token, messageFormat) {
var error, args = Array.prototype.slice.call(arguments, 2), msg = messageFormat.replace(/%(\d)/g, function(whole, index) {
assert(index < args.length, "Message reference must be in range");
return args[index];
});
error = new Error(msg);
error.index = index;
error.description = msg;
throw error;
}
function throwUnexpected(token) {
throwError(token, Messages.UnexpectedToken, token.value);
}
function expect(value) {
var token = lex();
if (token.type !== Token.Punctuator || token.value !== value) {
throwUnexpected(token);
}
}
function match(value) {
return lookahead.type === Token.Punctuator && lookahead.value === value;
}
function matchKeyword(keyword) {
return lookahead.type === Token.Keyword && lookahead.value === keyword;
}
function consumeSemicolon() {
if (source.charCodeAt(index) === 59) {
lex();
return;
}
skipWhitespace();
if (match(";")) {
lex();
return;
}
if (lookahead.type !== Token.EOF && !match("}")) {
throwUnexpected(lookahead);
}
}
function parseArrayInitialiser() {
var elements = [];
expect("[");
while (!match("]")) {
if (match(",")) {
lex();
elements.push(null);
} else {
elements.push(parseExpression());
if (!match("]")) {
expect(",");
}
}
}
expect("]");
return delegate.createArrayExpression(elements);
}
function parseObjectPropertyKey() {
var token;
skipWhitespace();
token = lex();
if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
return delegate.createLiteral(token);
}
return delegate.createIdentifier(token.value);
}
function parseObjectProperty() {
var token, key;
token = lookahead;
skipWhitespace();
if (token.type === Token.EOF || token.type === Token.Punctuator) {
throwUnexpected(token);
}
key = parseObjectPropertyKey();
expect(":");
return delegate.createProperty("init", key, parseExpression());
}
function parseObjectInitialiser() {
var properties = [];
expect("{");
while (!match("}")) {
properties.push(parseObjectProperty());
if (!match("}")) {
expect(",");
}
}
expect("}");
return delegate.createObjectExpression(properties);
}
function parseGroupExpression() {
var expr;
expect("(");
expr = parseExpression();
expect(")");
return expr;
}
function parsePrimaryExpression() {
var type, token, expr;
if (match("(")) {
return parseGroupExpression();
}
type = lookahead.type;
if (type === Token.Identifier) {
expr = delegate.createIdentifier(lex().value);
} else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
expr = delegate.createLiteral(lex());
} else if (type === Token.Keyword) {
if (matchKeyword("this")) {
lex();
expr = delegate.createThisExpression();
}
} else if (type === Token.BooleanLiteral) {
token = lex();
token.value = token.value === "true";
expr = delegate.createLiteral(token);
} else if (type === Token.NullLiteral) {
token = lex();
token.value = null;
expr = delegate.createLiteral(token);
} else if (match("[")) {
expr = parseArrayInitialiser();
} else if (match("{")) {
expr = parseObjectInitialiser();
}
if (expr) {
return expr;
}
throwUnexpected(lex());
}
function parseArguments() {
var args = [];
expect("(");
if (!match(")")) {
while (index < length) {
args.push(parseExpression());
if (match(")")) {
break;
}
expect(",");
}
}
expect(")");
return args;
}
function parseNonComputedProperty() {
var token;
token = lex();
if (!isIdentifierName(token)) {
throwUnexpected(token);
}
return delegate.createIdentifier(token.value);
}
function parseNonComputedMember() {
expect(".");
return parseNonComputedProperty();
}
function parseComputedMember() {
var expr;
expect("[");
expr = parseExpression();
expect("]");
return expr;
}
function parseLeftHandSideExpression() {
var expr, args, property;
expr = parsePrimaryExpression();
while (true) {
if (match("[")) {
property = parseComputedMember();
expr = delegate.createMemberExpression("[", expr, property);
} else if (match(".")) {
property = parseNonComputedMember();
expr = delegate.createMemberExpression(".", expr, property);
} else if (match("(")) {
args = parseArguments();
expr = delegate.createCallExpression(expr, args);
} else {
break;
}
}
return expr;
}
var parsePostfixExpression = parseLeftHandSideExpression;
function parseUnaryExpression() {
var token, expr;
if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
expr = parsePostfixExpression();
} else if (match("+") || match("-") || match("!")) {
token = lex();
expr = parseUnaryExpression();
expr = delegate.createUnaryExpression(token.value, expr);
} else if (matchKeyword("delete") || matchKeyword("void") || matchKeyword("typeof")) {
throwError({}, Messages.UnexpectedToken);
} else {
expr = parsePostfixExpression();
}
return expr;
}
function binaryPrecedence(token) {
var prec = 0;
if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
return 0;
}
switch (token.value) {
case "||":
prec = 1;
break;

case "&&":
prec = 2;
break;

case "==":
case "!=":
case "===":
case "!==":
prec = 6;
break;

case "<":
case ">":
case "<=":
case ">=":
case "instanceof":
prec = 7;
break;

case "in":
prec = 7;
break;

case "+":
case "-":
prec = 9;
break;

case "*":
case "/":
case "%":
prec = 11;
break;

default:
break;
}
return prec;
}
function parseBinaryExpression() {
var expr, token, prec, stack, right, operator, left, i;
left = parseUnaryExpression();
token = lookahead;
prec = binaryPrecedence(token);
if (prec === 0) {
return left;
}
token.prec = prec;
lex();
right = parseUnaryExpression();
stack = [ left, token, right ];
while ((prec = binaryPrecedence(lookahead)) > 0) {
while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {
right = stack.pop();
operator = stack.pop().value;
left = stack.pop();
expr = delegate.createBinaryExpression(operator, left, right);
stack.push(expr);
}
token = lex();
token.prec = prec;
stack.push(token);
expr = parseUnaryExpression();
stack.push(expr);
}
i = stack.length - 1;
expr = stack[i];
while (i > 1) {
expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
i -= 2;
}
return expr;
}
function parseConditionalExpression() {
var expr, consequent, alternate;
expr = parseBinaryExpression();
if (match("?")) {
lex();
consequent = parseConditionalExpression();
expect(":");
alternate = parseConditionalExpression();
expr = delegate.createConditionalExpression(expr, consequent, alternate);
}
return expr;
}
var parseExpression = parseConditionalExpression;
function parseFilter() {
var identifier, args;
identifier = lex();
if (identifier.type !== Token.Identifier) {
throwUnexpected(identifier);
}
args = match("(") ? parseArguments() : [];
return delegate.createFilter(identifier.value, args);
}
function parseFilters() {
while (match("|")) {
lex();
parseFilter();
}
}
function parseTopLevel() {
skipWhitespace();
peek();
var expr = parseExpression();
if (expr) {
if (lookahead.value === "," || lookahead.value == "in" && expr.type === Syntax.Identifier) {
parseInExpression(expr);
} else {
parseFilters();
if (lookahead.value === "as") {
parseAsExpression(expr);
} else {
delegate.createTopLevel(expr);
}
}
}
if (lookahead.type !== Token.EOF) {
throwUnexpected(lookahead);
}
}
function parseAsExpression(expr) {
lex();
var identifier = lex().value;
delegate.createAsExpression(expr, identifier);
}
function parseInExpression(identifier) {
var indexName;
if (lookahead.value === ",") {
lex();
if (lookahead.type !== Token.Identifier) throwUnexpected(lookahead);
indexName = lex().value;
}
lex();
var expr = parseExpression();
parseFilters();
delegate.createInExpression(identifier.name, indexName, expr);
}
function parse(code, inDelegate) {
delegate = inDelegate;
source = code;
index = 0;
length = source.length;
lookahead = null;
state = {
labelSet: {}
};
return parseTopLevel();
}
global.esprima = {
parse: parse
};
})(module.exports);
}, function(module, exports) {
"use strict";
function detectEval() {
if (typeof chrome !== "undefined" && chrome.app && chrome.app.runtime) {
return false;
}
if (typeof navigator != "undefined" && navigator.getDeviceStorage) {
return false;
}
try {
var f = new Function("", "return true;");
return f();
} catch (ex) {
return false;
}
}
var hasEval = detectEval();
function isIndex(s) {
return +s === s >>> 0 && s !== "";
}
function toNumber(s) {
return +s;
}
function isObject(obj) {
return obj === Object(obj);
}
var numberIsNaN = Number.isNaN || function(value) {
return typeof value === "number" && isNaN(value);
};
function areSameValue(left, right) {
if (left === right) return left !== 0 || 1 / left === 1 / right;
if (numberIsNaN(left) && numberIsNaN(right)) return true;
return left !== left && right !== right;
}
var createObject = "__proto__" in {} ? function(obj) {
return obj;
} : function(obj) {
var proto = obj.__proto__;
if (!proto) return obj;
var newObject = Object.create(proto);
Object.getOwnPropertyNames(obj).forEach(function(name) {
Object.defineProperty(newObject, name, Object.getOwnPropertyDescriptor(obj, name));
});
return newObject;
};
var identStart = "[$_a-zA-Z]";
var identPart = "[$_a-zA-Z0-9]";
var identRegExp = new RegExp("^" + identStart + "+" + identPart + "*" + "$");
function getPathCharType(char) {
if (char === undefined) return "eof";
var code = char.charCodeAt(0);
switch (code) {
case 91:
case 93:
case 46:
case 34:
case 39:
case 48:
return char;

case 95:
case 36:
return "ident";

case 32:
case 9:
case 10:
case 13:
case 160:
case 65279:
case 8232:
case 8233:
return "ws";
}
if (97 <= code && code <= 122 || 65 <= code && code <= 90) return "ident";
if (49 <= code && code <= 57) return "number";
return "else";
}
var pathStateMachine = {
beforePath: {
ws: [ "beforePath" ],
ident: [ "inIdent", "append" ],
"[": [ "beforeElement" ],
eof: [ "afterPath" ]
},
inPath: {
ws: [ "inPath" ],
".": [ "beforeIdent" ],
"[": [ "beforeElement" ],
eof: [ "afterPath" ]
},
beforeIdent: {
ws: [ "beforeIdent" ],
ident: [ "inIdent", "append" ]
},
inIdent: {
ident: [ "inIdent", "append" ],
0: [ "inIdent", "append" ],
number: [ "inIdent", "append" ],
ws: [ "inPath", "push" ],
".": [ "beforeIdent", "push" ],
"[": [ "beforeElement", "push" ],
eof: [ "afterPath", "push" ]
},
beforeElement: {
ws: [ "beforeElement" ],
0: [ "afterZero", "append" ],
number: [ "inIndex", "append" ],
"'": [ "inSingleQuote", "append", "" ],
'"': [ "inDoubleQuote", "append", "" ]
},
afterZero: {
ws: [ "afterElement", "push" ],
"]": [ "inPath", "push" ]
},
inIndex: {
0: [ "inIndex", "append" ],
number: [ "inIndex", "append" ],
ws: [ "afterElement" ],
"]": [ "inPath", "push" ]
},
inSingleQuote: {
"'": [ "afterElement" ],
eof: [ "error" ],
else: [ "inSingleQuote", "append" ]
},
inDoubleQuote: {
'"': [ "afterElement" ],
eof: [ "error" ],
else: [ "inDoubleQuote", "append" ]
},
afterElement: {
ws: [ "afterElement" ],
"]": [ "inPath", "push" ]
}
};
function noop() {}
function parsePath(path) {
var keys = [];
var index = -1;
var c, newChar, key, type, transition, action, typeMap, mode = "beforePath";
var actions = {
push: function() {
if (key === undefined) return;
keys.push(key);
key = undefined;
},
append: function() {
if (key === undefined) key = newChar; else key += newChar;
}
};
function maybeUnescapeQuote() {
if (index >= path.length) return;
var nextChar = path[index + 1];
if (mode == "inSingleQuote" && nextChar == "'" || mode == "inDoubleQuote" && nextChar == '"') {
index++;
newChar = nextChar;
actions.append();
return true;
}
}
while (mode) {
index++;
c = path[index];
if (c == "\\" && maybeUnescapeQuote(mode)) continue;
type = getPathCharType(c);
typeMap = pathStateMachine[mode];
transition = typeMap[type] || typeMap["else"] || "error";
if (transition == "error") return;
mode = transition[0];
action = actions[transition[1]] || noop;
newChar = transition[2] === undefined ? c : transition[2];
action();
if (mode === "afterPath") {
return keys;
}
}
return;
}
function isIdent(s) {
return identRegExp.test(s);
}
var constructorIsPrivate = {};
function Path(parts, privateToken) {
if (privateToken !== constructorIsPrivate) throw Error("Use Path.get to retrieve path objects");
for (var i = 0; i < parts.length; i++) {
this.push(String(parts[i]));
}
if (hasEval && this.length) {
this.getValueFrom = this.compiledGetValueFromFn();
}
}
var pathCache = {};
function getPath(pathString) {
if (pathString instanceof Path) return pathString;
if (pathString == null || pathString.length == 0) pathString = "";
if (typeof pathString != "string") {
if (isIndex(pathString.length)) {
return new Path(pathString, constructorIsPrivate);
}
pathString = String(pathString);
}
var path = pathCache[pathString];
if (path) return path;
var parts = parsePath(pathString);
if (!parts) return invalidPath;
var path = new Path(parts, constructorIsPrivate);
pathCache[pathString] = path;
return path;
}
Path.get = getPath;
function formatAccessor(key) {
if (isIndex(key)) {
return "[" + key + "]";
} else {
return '["' + key.replace(/"/g, '\\"') + '"]';
}
}
Path.prototype = createObject({
__proto__: [],
valid: true,
toString: function() {
var pathString = "";
for (var i = 0; i < this.length; i++) {
var key = this[i];
if (isIdent(key)) {
pathString += i ? "." + key : key;
} else {
pathString += formatAccessor(key);
}
}
return pathString;
},
getValueFrom: function(obj, directObserver) {
for (var i = 0; i < this.length; i++) {
if (obj == null) return;
obj = obj[this[i]];
}
return obj;
},
iterateObjects: function(obj, observe) {
for (var i = 0; i < this.length; i++) {
if (i) obj = obj[this[i - 1]];
if (!isObject(obj)) return;
observe(obj, this[i]);
}
},
compiledGetValueFromFn: function() {
var str = "";
var pathString = "obj";
str += "if (obj != null";
var i = 0;
var key;
for (;i < this.length - 1; i++) {
key = this[i];
pathString += isIdent(key) ? "." + key : formatAccessor(key);
str += " &&\n     " + pathString + " != null";
}
str += ")\n";
var key = this[i];
pathString += isIdent(key) ? "." + key : formatAccessor(key);
str += "  return " + pathString + ";\nelse\n  return undefined;";
return new Function("obj", str);
},
setValueFrom: function(obj, value) {
if (!this.length) return false;
for (var i = 0; i < this.length - 1; i++) {
if (!isObject(obj)) return false;
obj = obj[this[i]];
}
if (!isObject(obj)) return false;
obj[this[i]] = value;
return true;
}
});
var invalidPath = new Path("", constructorIsPrivate);
invalidPath.valid = false;
invalidPath.getValueFrom = invalidPath.setValueFrom = function() {};
exports.Path = Path;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var properties_1 = __webpack_require__(31);
var css_1 = __webpack_require__(44);
var css_selector_1 = __webpack_require__(46);
var trace_1 = __webpack_require__(15);
var file_system_1 = __webpack_require__(19);
var application = __webpack_require__(3);
var keyframeAnimationModule;
function ensureKeyframeAnimationModule() {
if (!keyframeAnimationModule) {
keyframeAnimationModule = __webpack_require__(48);
}
}
var cssAnimationParserModule;
function ensureCssAnimationParserModule() {
if (!cssAnimationParserModule) {
cssAnimationParserModule = __webpack_require__(52);
}
}
function mergeCssSelectors() {
applicationCssSelectors = applicationSelectors.slice();
applicationCssSelectors.push.apply(applicationCssSelectors, applicationAdditionalSelectors);
applicationCssSelectorVersion++;
}
exports.mergeCssSelectors = mergeCssSelectors;
var applicationCssSelectors = [];
var applicationCssSelectorVersion = 0;
var applicationSelectors = [];
var applicationAdditionalSelectors = [];
var applicationKeyframes = {};
var animationsSymbol = Symbol("animations");
var pattern = /('|")(.*?)\1/;
function onCssChanged(args) {
if (args.cssText) {
var parsed = createSelectorsFromCss(args.cssText, args.cssFile, applicationKeyframes);
if (parsed) {
applicationAdditionalSelectors.push.apply(applicationAdditionalSelectors, parsed);
mergeCssSelectors();
}
} else if (args.cssFile) {
loadCss(args.cssFile);
}
}
function onLiveSync(args) {
loadCss(application.getCssFileName());
}
function loadCss(cssFile) {
if (!cssFile) {
return undefined;
}
var result;
var cssFileName = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, cssFile);
if (file_system_1.File.exists(cssFileName)) {
var file = file_system_1.File.fromPath(cssFileName);
var applicationCss = file.readTextSync();
if (applicationCss) {
result = createSelectorsFromCss(applicationCss, cssFileName, applicationKeyframes);
applicationSelectors = result;
mergeCssSelectors();
}
}
}
application.on("cssChanged", onCssChanged);
application.on("livesync", onLiveSync);
function loadCssOnLaunch() {
loadCss(application.getCssFileName());
application.off("launch", loadCssOnLaunch);
}
if (application.hasLaunched()) {
loadCssOnLaunch();
} else {
application.on("launch", loadCssOnLaunch);
}
var CssState = function() {
function CssState(view, match) {
this.view = view;
this.match = match;
}
Object.defineProperty(CssState.prototype, "changeMap", {
get: function() {
return this.match.changeMap;
},
enumerable: true,
configurable: true
});
CssState.prototype.apply = function() {
var _this = this;
this.view._cancelAllAnimations();
properties_1.resetCSSProperties(this.view.style);
var matchingSelectors = this.match.selectors.filter(function(sel) {
return sel.dynamic ? sel.match(_this.view) : true;
});
if (this.view.inlineStyleSelector) {
matchingSelectors.push(this.view.inlineStyleSelector);
}
matchingSelectors.forEach(function(s) {
return _this.applyDescriptors(s.ruleset);
});
this._pendingKeyframeAnimations = matchingSelectors;
this.playPendingKeyframeAnimations();
};
CssState.prototype.playPendingKeyframeAnimations = function() {
var _this = this;
if (this._pendingKeyframeAnimations && this.view.nativeView) {
this._pendingKeyframeAnimations.forEach(function(s) {
return _this.playKeyframeAnimationsFromRuleSet(s.ruleset);
});
this._pendingKeyframeAnimations = null;
}
};
CssState.prototype.applyDescriptors = function(ruleset) {
var _this = this;
var style = this.view.style;
ruleset.declarations.forEach(function(d) {
try {
var cssPropName = "css:" + d.property;
if (cssPropName in style) {
style[cssPropName] = d.value;
} else {
_this.view[d.property] = d.value;
}
} catch (e) {
trace_1.write("Failed to apply property [" + d.property + "] with value [" + d.value + "] to " + _this.view + ". " + e, trace_1.categories.Error, trace_1.messageType.error);
}
});
};
CssState.prototype.playKeyframeAnimationsFromRuleSet = function(ruleset) {
var _this = this;
var ruleAnimations = ruleset[animationsSymbol];
if (ruleAnimations) {
ensureKeyframeAnimationModule();
var _loop_1 = function(animationInfo) {
var animation = keyframeAnimationModule.KeyframeAnimation.keyframeAnimationFromInfo(animationInfo);
if (animation) {
this_1.view._registerAnimation(animation);
animation.play(this_1.view).then(function() {
_this.view._unregisterAnimation(animation);
}).catch(function(e) {
_this.view._unregisterAnimation(animation);
});
}
};
var this_1 = this;
for (var _i = 0, ruleAnimations_1 = ruleAnimations; _i < ruleAnimations_1.length; _i++) {
var animationInfo = ruleAnimations_1[_i];
_loop_1(animationInfo);
}
}
};
return CssState;
}();
exports.CssState = CssState;
var StyleScope = function() {
function StyleScope() {
this._statesByKey = {};
this._viewIdToKey = {};
this._css = "";
this._localCssSelectors = [];
this._localCssSelectorVersion = 0;
this._localCssSelectorsAppliedVersion = 0;
this._applicationCssSelectorsAppliedVersion = 0;
this._keyframes = {};
}
Object.defineProperty(StyleScope.prototype, "css", {
get: function() {
return this._css;
},
set: function(value) {
this._cssFileName = undefined;
this.setCss(value);
},
enumerable: true,
configurable: true
});
StyleScope.prototype.addCss = function(cssString, cssFileName) {
this.appendCss(cssString, cssFileName);
};
StyleScope.prototype.setCss = function(cssString, cssFileName) {
this._css = cssString;
this._reset();
this._localCssSelectors = createSelectorsFromCss(this._css, cssFileName, this._keyframes);
this._localCssSelectorVersion++;
this.ensureSelectors();
};
StyleScope.prototype.appendCss = function(cssString, cssFileName) {
if (!cssString) {
return;
}
this._css = this._css + cssString;
this._reset();
var parsedCssSelectors = createSelectorsFromCss(cssString, cssFileName, this._keyframes);
this._localCssSelectors.push.apply(this._localCssSelectors, parsedCssSelectors);
this._localCssSelectorVersion++;
this.ensureSelectors();
};
StyleScope.prototype.getKeyframeAnimationWithName = function(animationName) {
var keyframes = this._keyframes[animationName];
if (keyframes !== undefined) {
ensureKeyframeAnimationModule();
var animation = new keyframeAnimationModule.KeyframeAnimationInfo();
ensureCssAnimationParserModule();
animation.keyframes = cssAnimationParserModule.CssAnimationParser.keyframesArrayFromCSS(keyframes);
return animation;
}
return undefined;
};
StyleScope.prototype.ensureSelectors = function() {
var toMerge;
if (this._applicationCssSelectorsAppliedVersion !== applicationCssSelectorVersion || this._localCssSelectorVersion !== this._localCssSelectorsAppliedVersion || !this._mergedCssSelectors) {
toMerge = [];
toMerge.push(applicationCssSelectors);
this._applicationCssSelectorsAppliedVersion = applicationCssSelectorVersion;
toMerge.push(this._localCssSelectors);
this._localCssSelectorsAppliedVersion = this._localCssSelectorVersion;
for (var keyframe in applicationKeyframes) {
this._keyframes[keyframe] = applicationKeyframes[keyframe];
}
}
if (toMerge && toMerge.length > 0) {
this._mergedCssSelectors = toMerge.filter(function(m) {
return !!m;
}).reduce(function(merged, next) {
return merged.concat(next);
}, []);
this._applyKeyframesOnSelectors();
this._selectors = new css_selector_1.SelectorsMap(this._mergedCssSelectors);
}
return this._getSelectorsVersion();
};
StyleScope.prototype.applySelectors = function(view) {
this.ensureSelectors();
var state = this._selectors.query(view);
var nextState = new CssState(view, state);
view._setCssState(nextState);
};
StyleScope.prototype.query = function(node) {
this.ensureSelectors();
return this._selectors.query(node).selectors;
};
StyleScope.prototype._reset = function() {
this._statesByKey = {};
this._viewIdToKey = {};
};
StyleScope.prototype._getSelectorsVersion = function() {
return 1e5 * this._applicationCssSelectorsAppliedVersion + this._localCssSelectorsAppliedVersion;
};
StyleScope.prototype._applyKeyframesOnSelectors = function() {
for (var i = this._mergedCssSelectors.length - 1; i >= 0; i--) {
var ruleset = this._mergedCssSelectors[i];
var animations = ruleset[animationsSymbol];
if (animations !== undefined && animations.length) {
ensureCssAnimationParserModule();
for (var _i = 0, animations_1 = animations; _i < animations_1.length; _i++) {
var animation = animations_1[_i];
var keyframe = this._keyframes[animation.name];
if (keyframe !== undefined) {
animation.keyframes = cssAnimationParserModule.CssAnimationParser.keyframesArrayFromCSS(keyframe);
}
}
}
}
};
StyleScope.prototype.getAnimations = function(ruleset) {
return ruleset[animationsSymbol];
};
return StyleScope;
}();
exports.StyleScope = StyleScope;
function createSelectorsFromCss(css, cssFileName, keyframes) {
try {
var pageCssSyntaxTree = css ? css_1.parse(css, {
source: cssFileName
}) : null;
var pageCssSelectors = [];
if (pageCssSyntaxTree) {
pageCssSelectors = pageCssSelectors.concat(createSelectorsFromImports(pageCssSyntaxTree, keyframes));
pageCssSelectors = pageCssSelectors.concat(createSelectorsFromSyntaxTree(pageCssSyntaxTree, keyframes));
}
return pageCssSelectors;
} catch (e) {
trace_1.write("Css styling failed: " + e, trace_1.categories.Error, trace_1.messageType.error);
}
}
function createSelectorsFromImports(tree, keyframes) {
var selectors = [];
if (tree !== null && tree !== undefined) {
var imports = tree["stylesheet"]["rules"].filter(function(r) {
return r.type === "import";
});
for (var i = 0; i < imports.length; i++) {
var importItem = imports[i]["import"];
var match = importItem && importItem.match(pattern);
var url = match && match[2];
if (url !== null && url !== undefined) {
var appDirectory = file_system_1.knownFolders.currentApp().path;
var fileName = resolveFileNameFromUrl(url, appDirectory, file_system_1.File.exists);
if (fileName !== null) {
var file = file_system_1.File.fromPath(fileName);
var text = file.readTextSync();
if (text) {
selectors = selectors.concat(createSelectorsFromCss(text, fileName, keyframes));
}
}
}
}
}
return selectors;
}
function createSelectorsFromSyntaxTree(ast, keyframes) {
var nodes = ast.stylesheet.rules;
nodes.filter(isKeyframe).forEach(function(node) {
return keyframes[node.name] = node;
});
var rulesets = css_selector_1.fromAstNodes(nodes);
if (rulesets && rulesets.length) {
ensureCssAnimationParserModule();
rulesets.forEach(function(rule) {
return rule[animationsSymbol] = cssAnimationParserModule.CssAnimationParser.keyframeAnimationsFromCSSDeclarations(rule.declarations);
});
}
return rulesets;
}
function resolveFileNameFromUrl(url, appDirectory, fileExists) {
var fileName = typeof url === "string" ? url.trim() : "";
if (fileName.indexOf("~/") === 0) {
fileName = fileName.replace("~/", "");
}
var local = file_system_1.path.join(appDirectory, fileName);
if (fileExists(local)) {
return local;
}
var external = file_system_1.path.join(appDirectory, "tns_modules", fileName);
if (fileExists(external)) {
return external;
}
return null;
}
exports.resolveFileNameFromUrl = resolveFileNameFromUrl;
function applyInlineStyle(view, styleStr) {
var localStyle = "local { " + styleStr + " }";
var inlineRuleSet = createSelectorsFromCss(localStyle, null, {});
var style = view.style;
inlineRuleSet[0].declarations.forEach(function(d) {
var name = d.property;
try {
if (name in style) {
style[name] = d.value;
} else {
view[name] = d.value;
}
} catch (e) {
trace_1.write("Failed to apply property [" + d.property + "] with value [" + d.value + "] to " + view + ". " + e, trace_1.categories.Error, trace_1.messageType.error);
}
});
}
exports.applyInlineStyle = applyInlineStyle;
function isKeyframe(node) {
return node.type === "keyframes";
}
var InlineSelector = function(_super) {
__extends(InlineSelector, _super);
function InlineSelector(ruleSet) {
var _this = _super.call(this) || this;
_this.specificity = 16777216;
_this.rarity = 0;
_this.dynamic = false;
_this.ruleset = ruleSet;
return _this;
}
InlineSelector.prototype.match = function(node) {
return true;
};
return InlineSelector;
}(css_selector_1.SelectorCore);
}, function(module, exports, __webpack_require__) {
exports.parse = __webpack_require__(45);
}, function(module, exports) {
var commentre = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
module.exports = function(css, options) {
options = options || {};
var lineno = 1;
var column = 1;
function updatePosition(str) {
var lines = str.match(/\n/g);
if (lines) lineno += lines.length;
var i = str.lastIndexOf("\n");
column = ~i ? str.length - i : column + str.length;
}
function position() {
var start = {
line: lineno,
column: column
};
return function(node) {
node.position = new Position(start);
whitespace();
return node;
};
}
function Position(start) {
this.start = start;
this.end = {
line: lineno,
column: column
};
this.source = options.source;
}
Position.prototype.content = css;
var errorsList = [];
function error(msg) {
var err = new Error(options.source + ":" + lineno + ":" + column + ": " + msg);
err.reason = msg;
err.filename = options.source;
err.line = lineno;
err.column = column;
err.source = css;
if (options.silent) {
errorsList.push(err);
} else {
throw err;
}
}
function stylesheet() {
var rulesList = rules();
return {
type: "stylesheet",
stylesheet: {
rules: rulesList,
parsingErrors: errorsList
}
};
}
function open() {
return match(/^{\s*/);
}
function close() {
return match(/^}/);
}
function rules() {
var node;
var rules = [];
whitespace();
comments(rules);
while (css.length && css.charAt(0) != "}" && (node = atrule() || rule())) {
if (node !== false) {
rules.push(node);
comments(rules);
}
}
return rules;
}
function match(re) {
var m = re.exec(css);
if (!m) return;
var str = m[0];
updatePosition(str);
css = css.slice(str.length);
return m;
}
function whitespace() {
match(/^\s*/);
}
function comments(rules) {
var c;
rules = rules || [];
while (c = comment()) {
if (c !== false) {
rules.push(c);
}
}
return rules;
}
function comment() {
var pos = position();
if ("/" != css.charAt(0) || "*" != css.charAt(1)) return;
var i = 2;
while ("" != css.charAt(i) && ("*" != css.charAt(i) || "/" != css.charAt(i + 1))) ++i;
i += 2;
if ("" === css.charAt(i - 1)) {
return error("End of comment missing");
}
var str = css.slice(2, i - 2);
column += 2;
updatePosition(str);
css = css.slice(i);
column += 2;
return pos({
type: "comment",
comment: str
});
}
function selector() {
var m = match(/^([^{]+)/);
if (!m) return;
return trim(m[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g, "").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, function(m) {
return m.replace(/,/g, "‌");
}).split(/\s*(?![^(]*\)),\s*/).map(function(s) {
return s.replace(/\u200C/g, ",");
});
}
function declaration() {
var pos = position();
var prop = match(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
if (!prop) return;
prop = trim(prop[0]);
if (!match(/^:\s*/)) return error("property missing ':'");
var val = match(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/);
var ret = pos({
type: "declaration",
property: prop.replace(commentre, ""),
value: val ? trim(val[0]).replace(commentre, "") : ""
});
match(/^[;\s]*/);
return ret;
}
function declarations() {
var decls = [];
if (!open()) return error("missing '{'");
comments(decls);
var decl;
while (decl = declaration()) {
if (decl !== false) {
decls.push(decl);
comments(decls);
}
}
if (!close()) return error("missing '}'");
return decls;
}
function keyframe() {
var m;
var vals = [];
var pos = position();
while (m = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/)) {
vals.push(m[1]);
match(/^,\s*/);
}
if (!vals.length) return;
return pos({
type: "keyframe",
values: vals,
declarations: declarations()
});
}
function atkeyframes() {
var pos = position();
var m = match(/^@([-\w]+)?keyframes\s*/);
if (!m) return;
var vendor = m[1];
var m = match(/^([-\w]+)\s*/);
if (!m) return error("@keyframes missing name");
var name = m[1];
if (!open()) return error("@keyframes missing '{'");
var frame;
var frames = comments();
while (frame = keyframe()) {
frames.push(frame);
frames = frames.concat(comments());
}
if (!close()) return error("@keyframes missing '}'");
return pos({
type: "keyframes",
name: name,
vendor: vendor,
keyframes: frames
});
}
function atsupports() {
var pos = position();
var m = match(/^@supports *([^{]+)/);
if (!m) return;
var supports = trim(m[1]);
if (!open()) return error("@supports missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@supports missing '}'");
return pos({
type: "supports",
supports: supports,
rules: style
});
}
function athost() {
var pos = position();
var m = match(/^@host\s*/);
if (!m) return;
if (!open()) return error("@host missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@host missing '}'");
return pos({
type: "host",
rules: style
});
}
function atmedia() {
var pos = position();
var m = match(/^@media *([^{]+)/);
if (!m) return;
var media = trim(m[1]);
if (!open()) return error("@media missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@media missing '}'");
return pos({
type: "media",
media: media,
rules: style
});
}
function atcustommedia() {
var pos = position();
var m = match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
if (!m) return;
return pos({
type: "custom-media",
name: trim(m[1]),
media: trim(m[2])
});
}
function atpage() {
var pos = position();
var m = match(/^@page */);
if (!m) return;
var sel = selector() || [];
if (!open()) return error("@page missing '{'");
var decls = comments();
var decl;
while (decl = declaration()) {
decls.push(decl);
decls = decls.concat(comments());
}
if (!close()) return error("@page missing '}'");
return pos({
type: "page",
selectors: sel,
declarations: decls
});
}
function atdocument() {
var pos = position();
var m = match(/^@([-\w]+)?document *([^{]+)/);
if (!m) return;
var vendor = trim(m[1]);
var doc = trim(m[2]);
if (!open()) return error("@document missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@document missing '}'");
return pos({
type: "document",
document: doc,
vendor: vendor,
rules: style
});
}
function atfontface() {
var pos = position();
var m = match(/^@font-face\s*/);
if (!m) return;
if (!open()) return error("@font-face missing '{'");
var decls = comments();
var decl;
while (decl = declaration()) {
decls.push(decl);
decls = decls.concat(comments());
}
if (!close()) return error("@font-face missing '}'");
return pos({
type: "font-face",
declarations: decls
});
}
var atimport = _compileAtrule("import");
var atcharset = _compileAtrule("charset");
var atnamespace = _compileAtrule("namespace");
function _compileAtrule(name) {
var re = new RegExp("^@" + name + "\\s*([^;]+);");
return function() {
var pos = position();
var m = match(re);
if (!m) return;
var ret = {
type: name
};
ret[name] = m[1].trim();
return pos(ret);
};
}
function atrule() {
if (css[0] != "@") return;
return atkeyframes() || atmedia() || atcustommedia() || atsupports() || atimport() || atcharset() || atnamespace() || atdocument() || atpage() || athost() || atfontface();
}
function rule() {
var pos = position();
var sel = selector();
if (!sel) return error("selector missing");
comments();
return pos({
type: "rule",
selectors: sel,
declarations: declarations()
});
}
return addParent(stylesheet());
};
function trim(str) {
return str ? str.replace(/^\s+|\s+$/g, "") : "";
}
function addParent(obj, parent) {
var isNode = obj && typeof obj.type === "string";
var childParent = isNode ? obj : parent;
for (var k in obj) {
var value = obj[k];
if (Array.isArray(value)) {
value.forEach(function(v) {
addParent(v, childParent);
});
} else if (value && typeof value === "object") {
addParent(value, childParent);
}
}
if (isNode) {
Object.defineProperty(obj, "parent", {
configurable: true,
writable: true,
enumerable: false,
value: parent || null
});
}
return obj;
}
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var types_1 = __webpack_require__(17);
var utils_1 = __webpack_require__(14);
var selectorParser = __webpack_require__(47);
var Match;
(function(Match) {
Match.Dynamic = true;
Match.Static = false;
})(Match || (Match = {}));
function getNodeDirectSibling(node) {
if (!node.parent || !node.parent.getChildIndex || !node.parent.getChildAt) {
return null;
}
var nodeIndex = node.parent.getChildIndex(node);
if (nodeIndex === 0) {
return null;
}
return node.parent.getChildAt(nodeIndex - 1);
}
function SelectorProperties(specificity, rarity, dynamic) {
if (dynamic === void 0) {
dynamic = false;
}
return function(cls) {
cls.prototype.specificity = specificity;
cls.prototype.rarity = rarity;
cls.prototype.combinator = "";
cls.prototype.dynamic = dynamic;
return cls;
};
}
var SelectorCore = function() {
function SelectorCore() {}
SelectorCore.prototype.lookupSort = function(sorter, base) {
sorter.sortAsUniversal(base || this);
};
return SelectorCore;
}();
SelectorCore = __decorate([ SelectorProperties(0, 0, Match.Static) ], SelectorCore);
exports.SelectorCore = SelectorCore;
var SimpleSelector = function(_super) {
__extends(SimpleSelector, _super);
function SimpleSelector() {
return _super !== null && _super.apply(this, arguments) || this;
}
SimpleSelector.prototype.accumulateChanges = function(node, map) {
if (!this.dynamic) {
return this.match(node);
} else if (this.mayMatch(node)) {
this.trackChanges(node, map);
return true;
}
return false;
};
SimpleSelector.prototype.mayMatch = function(node) {
return this.match(node);
};
SimpleSelector.prototype.trackChanges = function(node, map) {};
return SimpleSelector;
}(SelectorCore);
exports.SimpleSelector = SimpleSelector;
function wrap(text) {
return text ? " " + text + " " : "";
}
var InvalidSelector = function(_super) {
__extends(InvalidSelector, _super);
function InvalidSelector(e) {
var _this = _super.call(this) || this;
_this.e = e;
return _this;
}
InvalidSelector.prototype.toString = function() {
return "<error: " + this.e + ">";
};
InvalidSelector.prototype.match = function(node) {
return false;
};
InvalidSelector.prototype.lookupSort = function(sorter, base) {};
return InvalidSelector;
}(SimpleSelector);
InvalidSelector = __decorate([ SelectorProperties(0, 4, Match.Static) ], InvalidSelector);
exports.InvalidSelector = InvalidSelector;
var UniversalSelector = function(_super) {
__extends(UniversalSelector, _super);
function UniversalSelector() {
return _super !== null && _super.apply(this, arguments) || this;
}
UniversalSelector.prototype.toString = function() {
return "*" + wrap(this.combinator);
};
UniversalSelector.prototype.match = function(node) {
return true;
};
return UniversalSelector;
}(SimpleSelector);
UniversalSelector = __decorate([ SelectorProperties(0, 0, Match.Static) ], UniversalSelector);
exports.UniversalSelector = UniversalSelector;
var IdSelector = function(_super) {
__extends(IdSelector, _super);
function IdSelector(id) {
var _this = _super.call(this) || this;
_this.id = id;
return _this;
}
IdSelector.prototype.toString = function() {
return "#" + this.id + wrap(this.combinator);
};
IdSelector.prototype.match = function(node) {
return node.id === this.id;
};
IdSelector.prototype.lookupSort = function(sorter, base) {
sorter.sortById(this.id, base || this);
};
return IdSelector;
}(SimpleSelector);
IdSelector = __decorate([ SelectorProperties(65536, 3, Match.Static) ], IdSelector);
exports.IdSelector = IdSelector;
var TypeSelector = function(_super) {
__extends(TypeSelector, _super);
function TypeSelector(cssType) {
var _this = _super.call(this) || this;
_this.cssType = cssType;
return _this;
}
TypeSelector.prototype.toString = function() {
return "" + this.cssType + wrap(this.combinator);
};
TypeSelector.prototype.match = function(node) {
return node.cssType === this.cssType;
};
TypeSelector.prototype.lookupSort = function(sorter, base) {
sorter.sortByType(this.cssType, base || this);
};
return TypeSelector;
}(SimpleSelector);
TypeSelector = __decorate([ SelectorProperties(1, 1, Match.Static) ], TypeSelector);
exports.TypeSelector = TypeSelector;
var ClassSelector = function(_super) {
__extends(ClassSelector, _super);
function ClassSelector(cssClass) {
var _this = _super.call(this) || this;
_this.cssClass = cssClass;
return _this;
}
ClassSelector.prototype.toString = function() {
return "." + this.cssClass + wrap(this.combinator);
};
ClassSelector.prototype.match = function(node) {
return node.cssClasses && node.cssClasses.has(this.cssClass);
};
ClassSelector.prototype.lookupSort = function(sorter, base) {
sorter.sortByClass(this.cssClass, base || this);
};
return ClassSelector;
}(SimpleSelector);
ClassSelector = __decorate([ SelectorProperties(256, 2, Match.Static) ], ClassSelector);
exports.ClassSelector = ClassSelector;
var AttributeSelector = function(_super) {
__extends(AttributeSelector, _super);
function AttributeSelector(attribute, test, value) {
var _this = _super.call(this) || this;
_this.attribute = attribute;
_this.test = test;
_this.value = value;
if (!test) {
_this.match = function(node) {
return !types_1.isNullOrUndefined(node[attribute]);
};
return _this;
}
if (!value) {
_this.match = function(node) {
return false;
};
}
var escapedValue = utils_1.escapeRegexSymbols(value);
var regexp = null;
switch (test) {
case "^=":
regexp = new RegExp("^" + escapedValue);
break;

case "$=":
regexp = new RegExp(escapedValue + "$");
break;

case "*=":
regexp = new RegExp(escapedValue);
break;

case "=":
regexp = new RegExp("^" + escapedValue + "$");
break;

case "~=":
if (/\s/.test(value)) {
_this.match = function(node) {
return false;
};
return _this;
}
regexp = new RegExp("(^|\\s)" + escapedValue + "(\\s|$)");
break;

case "|=":
regexp = new RegExp("^" + escapedValue + "(-|$)");
break;
}
if (regexp) {
_this.match = function(node) {
return regexp.test(node[attribute] + "");
};
return _this;
} else {
_this.match = function(node) {
return false;
};
return _this;
}
}
AttributeSelector.prototype.toString = function() {
return "[" + this.attribute + wrap(this.test) + (this.test && this.value || "") + "]" + wrap(this.combinator);
};
AttributeSelector.prototype.match = function(node) {
return false;
};
AttributeSelector.prototype.mayMatch = function(node) {
return true;
};
AttributeSelector.prototype.trackChanges = function(node, map) {
map.addAttribute(node, this.attribute);
};
return AttributeSelector;
}(SimpleSelector);
AttributeSelector = __decorate([ SelectorProperties(256, 0, Match.Dynamic) ], AttributeSelector);
exports.AttributeSelector = AttributeSelector;
var PseudoClassSelector = function(_super) {
__extends(PseudoClassSelector, _super);
function PseudoClassSelector(cssPseudoClass) {
var _this = _super.call(this) || this;
_this.cssPseudoClass = cssPseudoClass;
return _this;
}
PseudoClassSelector.prototype.toString = function() {
return ":" + this.cssPseudoClass + wrap(this.combinator);
};
PseudoClassSelector.prototype.match = function(node) {
return node.cssPseudoClasses && node.cssPseudoClasses.has(this.cssPseudoClass);
};
PseudoClassSelector.prototype.mayMatch = function(node) {
return true;
};
PseudoClassSelector.prototype.trackChanges = function(node, map) {
map.addPseudoClass(node, this.cssPseudoClass);
};
return PseudoClassSelector;
}(SimpleSelector);
PseudoClassSelector = __decorate([ SelectorProperties(256, 0, Match.Dynamic) ], PseudoClassSelector);
exports.PseudoClassSelector = PseudoClassSelector;
var SimpleSelectorSequence = function(_super) {
__extends(SimpleSelectorSequence, _super);
function SimpleSelectorSequence(selectors) {
var _this = _super.call(this) || this;
_this.selectors = selectors;
_this.specificity = selectors.reduce(function(sum, sel) {
return sel.specificity + sum;
}, 0);
_this.head = _this.selectors.reduce(function(prev, curr) {
return !prev || curr.rarity > prev.rarity ? curr : prev;
}, null);
_this.dynamic = selectors.some(function(sel) {
return sel.dynamic;
});
return _this;
}
SimpleSelectorSequence.prototype.toString = function() {
return "" + this.selectors.join("") + wrap(this.combinator);
};
SimpleSelectorSequence.prototype.match = function(node) {
return this.selectors.every(function(sel) {
return sel.match(node);
});
};
SimpleSelectorSequence.prototype.mayMatch = function(node) {
return this.selectors.every(function(sel) {
return sel.mayMatch(node);
});
};
SimpleSelectorSequence.prototype.trackChanges = function(node, map) {
this.selectors.forEach(function(sel) {
return sel.trackChanges(node, map);
});
};
SimpleSelectorSequence.prototype.lookupSort = function(sorter, base) {
this.head.lookupSort(sorter, base || this);
};
return SimpleSelectorSequence;
}(SimpleSelector);
exports.SimpleSelectorSequence = SimpleSelectorSequence;
var Selector = function(_super) {
__extends(Selector, _super);
function Selector(selectors) {
var _this = _super.call(this) || this;
_this.selectors = selectors;
var supportedCombinator = [ undefined, " ", ">", "+" ];
var siblingGroup;
var lastGroup;
var groups = [];
selectors.reverse().forEach(function(sel) {
if (supportedCombinator.indexOf(sel.combinator) === -1) {
throw new Error('Unsupported combinator "' + sel.combinator + '".');
}
if (sel.combinator === undefined || sel.combinator === " ") {
groups.push(lastGroup = [ siblingGroup = [] ]);
}
if (sel.combinator === ">") {
lastGroup.push(siblingGroup = []);
}
siblingGroup.push(sel);
});
_this.groups = groups.map(function(g) {
return new Selector.ChildGroup(g.map(function(sg) {
return new Selector.SiblingGroup(sg);
}));
});
_this.last = selectors[0];
_this.specificity = selectors.reduce(function(sum, sel) {
return sel.specificity + sum;
}, 0);
_this.dynamic = selectors.some(function(sel) {
return sel.dynamic;
});
return _this;
}
Selector.prototype.toString = function() {
return this.selectors.join("");
};
Selector.prototype.match = function(node) {
return this.groups.every(function(group, i) {
if (i === 0) {
node = group.match(node);
return !!node;
} else {
var ancestor = node;
while (ancestor = ancestor.parent) {
if (node = group.match(ancestor)) {
return true;
}
}
return false;
}
});
};
Selector.prototype.lookupSort = function(sorter, base) {
this.last.lookupSort(sorter, this);
};
Selector.prototype.accumulateChanges = function(node, map) {
if (!this.dynamic) {
return this.match(node);
}
var bounds = [];
var mayMatch = this.groups.every(function(group, i) {
if (i === 0) {
var nextNode = group.mayMatch(node);
bounds.push({
left: node,
right: node
});
node = nextNode;
return !!node;
} else {
var ancestor = node;
while (ancestor = ancestor.parent) {
var nextNode = group.mayMatch(ancestor);
if (nextNode) {
bounds.push({
left: ancestor,
right: null
});
node = nextNode;
return true;
}
}
return false;
}
});
if (!mayMatch) {
return false;
}
if (!map) {
return mayMatch;
}
for (var i = 0; i < this.groups.length; i++) {
var group_1 = this.groups[i];
if (!group_1.dynamic) {
continue;
}
var bound = bounds[i];
var node_1 = bound.left;
do {
if (group_1.mayMatch(node_1)) {
group_1.trackChanges(node_1, map);
}
} while (node_1 !== bound.right && (node_1 = node_1.parent));
}
return mayMatch;
};
return Selector;
}(SelectorCore);
exports.Selector = Selector;
(function(Selector) {
var ChildGroup = function() {
function ChildGroup(selectors) {
this.selectors = selectors;
this.dynamic = selectors.some(function(sel) {
return sel.dynamic;
});
}
ChildGroup.prototype.match = function(node) {
return this.selectors.every(function(sel, i) {
return (i === 0 ? node : node = node.parent) && !!sel.match(node);
}) ? node : null;
};
ChildGroup.prototype.mayMatch = function(node) {
return this.selectors.every(function(sel, i) {
return (i === 0 ? node : node = node.parent) && !!sel.mayMatch(node);
}) ? node : null;
};
ChildGroup.prototype.trackChanges = function(node, map) {
this.selectors.forEach(function(sel, i) {
return (i === 0 ? node : node = node.parent) && sel.trackChanges(node, map);
});
};
return ChildGroup;
}();
Selector.ChildGroup = ChildGroup;
var SiblingGroup = function() {
function SiblingGroup(selectors) {
this.selectors = selectors;
this.dynamic = selectors.some(function(sel) {
return sel.dynamic;
});
}
SiblingGroup.prototype.match = function(node) {
return this.selectors.every(function(sel, i) {
return (i === 0 ? node : node = getNodeDirectSibling(node)) && sel.match(node);
}) ? node : null;
};
SiblingGroup.prototype.mayMatch = function(node) {
return this.selectors.every(function(sel, i) {
return (i === 0 ? node : node = getNodeDirectSibling(node)) && sel.mayMatch(node);
}) ? node : null;
};
SiblingGroup.prototype.trackChanges = function(node, map) {
this.selectors.forEach(function(sel, i) {
return (i === 0 ? node : node = getNodeDirectSibling(node)) && sel.trackChanges(node, map);
});
};
return SiblingGroup;
}();
Selector.SiblingGroup = SiblingGroup;
})(Selector = exports.Selector || (exports.Selector = {}));
exports.Selector = Selector;
var RuleSet = function() {
function RuleSet(selectors, declarations) {
var _this = this;
this.selectors = selectors;
this.declarations = declarations;
this.selectors.forEach(function(sel) {
return sel.ruleset = _this;
});
}
RuleSet.prototype.toString = function() {
return this.selectors.join(", ") + " {" + this.declarations.map(function(d, i) {
return "" + (i === 0 ? " " : "") + d.property + ": " + d.value;
}).join("; ") + " }";
};
RuleSet.prototype.lookupSort = function(sorter) {
this.selectors.forEach(function(sel) {
return sel.lookupSort(sorter);
});
};
return RuleSet;
}();
exports.RuleSet = RuleSet;
function fromAstNodes(astRules) {
return astRules.filter(isRule).map(function(rule) {
var declarations = rule.declarations.filter(isDeclaration).map(createDeclaration);
var selectors = rule.selectors.map(createSelector);
var ruleset = new RuleSet(selectors, declarations);
return ruleset;
});
}
exports.fromAstNodes = fromAstNodes;
function createDeclaration(decl) {
return {
property: decl.property.toLowerCase(),
value: decl.value
};
}
function createSelector(sel) {
try {
var ast = selectorParser.parse(sel);
if (ast.length === 0) {
return new InvalidSelector(new Error("Empty selector"));
}
var selectors = ast.map(createSimpleSelector);
var sequences = [];
for (var seqStart = 0, seqEnd = 0, last = selectors.length - 1; seqEnd <= last; seqEnd++) {
var sel_1 = selectors[seqEnd];
var astComb = ast[seqEnd].comb;
if (astComb || seqEnd === last) {
if (seqStart === seqEnd) {
sel_1.combinator = astComb;
sequences.push(sel_1);
} else {
var sequence = new SimpleSelectorSequence(selectors.slice(seqStart, seqEnd + 1));
sequence.combinator = astComb;
sequences.push(sequence);
}
seqStart = seqEnd + 1;
}
}
if (sequences.length === 1) {
return sequences[0];
} else {
return new Selector(sequences);
}
} catch (e) {
return new InvalidSelector(e);
}
}
function createSimpleSelector(sel) {
if (selectorParser.isUniversal(sel)) {
return new UniversalSelector();
} else if (selectorParser.isId(sel)) {
return new IdSelector(sel.ident);
} else if (selectorParser.isType(sel)) {
return new TypeSelector(sel.ident.replace(/-/, "").toLowerCase());
} else if (selectorParser.isClass(sel)) {
return new ClassSelector(sel.ident);
} else if (selectorParser.isPseudo(sel)) {
return new PseudoClassSelector(sel.ident);
} else if (selectorParser.isAttribute(sel)) {
if (sel.test) {
return new AttributeSelector(sel.prop, sel.test, sel.value);
} else {
return new AttributeSelector(sel.prop);
}
}
}
function isRule(node) {
return node.type === "rule";
}
function isDeclaration(node) {
return node.type === "declaration";
}
var SelectorsMap = function() {
function SelectorsMap(rulesets) {
var _this = this;
this.id = {};
this.class = {};
this.type = {};
this.universal = [];
this.position = 0;
rulesets.forEach(function(rule) {
return rule.lookupSort(_this);
});
}
SelectorsMap.prototype.query = function(node) {
var _this = this;
var selectorClasses = [ this.universal, this.id[node.id], this.type[node.cssType] ];
if (node.cssClasses) {
node.cssClasses.forEach(function(c) {
return selectorClasses.push(_this.class[c]);
});
}
var selectors = selectorClasses.filter(function(arr) {
return !!arr;
}).reduce(function(cur, next) {
return cur.concat(next);
}, []);
var selectorsMatch = new SelectorsMatch();
selectorsMatch.selectors = selectors.filter(function(sel) {
return sel.sel.accumulateChanges(node, selectorsMatch);
}).sort(function(a, b) {
return a.sel.specificity - b.sel.specificity || a.pos - b.pos;
}).map(function(docSel) {
return docSel.sel;
});
return selectorsMatch;
};
SelectorsMap.prototype.sortById = function(id, sel) {
this.addToMap(this.id, id, sel);
};
SelectorsMap.prototype.sortByClass = function(cssClass, sel) {
this.addToMap(this.class, cssClass, sel);
};
SelectorsMap.prototype.sortByType = function(cssType, sel) {
this.addToMap(this.type, cssType, sel);
};
SelectorsMap.prototype.sortAsUniversal = function(sel) {
this.universal.push(this.makeDocSelector(sel));
};
SelectorsMap.prototype.addToMap = function(map, head, sel) {
this.position++;
var list = map[head];
if (list) {
list.push(this.makeDocSelector(sel));
} else {
map[head] = [ this.makeDocSelector(sel) ];
}
};
SelectorsMap.prototype.makeDocSelector = function(sel) {
return {
sel: sel,
pos: this.position++
};
};
return SelectorsMap;
}();
exports.SelectorsMap = SelectorsMap;
var SelectorsMatch = function() {
function SelectorsMatch() {
this.changeMap = new Map();
}
SelectorsMatch.prototype.addAttribute = function(node, attribute) {
var deps = this.properties(node);
if (!deps.attributes) {
deps.attributes = new Set();
}
deps.attributes.add(attribute);
};
SelectorsMatch.prototype.addPseudoClass = function(node, pseudoClass) {
var deps = this.properties(node);
if (!deps.pseudoClasses) {
deps.pseudoClasses = new Set();
}
deps.pseudoClasses.add(pseudoClass);
};
SelectorsMatch.prototype.properties = function(node) {
var set = this.changeMap.get(node);
if (!set) {
this.changeMap.set(node, set = {});
}
return set;
};
return SelectorsMatch;
}();
exports.SelectorsMatch = SelectorsMatch;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
function isUniversal(sel) {
return sel.type === "*";
}
exports.isUniversal = isUniversal;
function isType(sel) {
return sel.type === "";
}
exports.isType = isType;
function isClass(sel) {
return sel.type === ".";
}
exports.isClass = isClass;
function isId(sel) {
return sel.type === "#";
}
exports.isId = isId;
function isPseudo(sel) {
return sel.type === ":";
}
exports.isPseudo = isPseudo;
function isAttribute(sel) {
return sel.type === "[]";
}
exports.isAttribute = isAttribute;
var regex = /(\s*)(?:(\*)|(#|\.|:|\b)([_-\w][_-\w\d]*)|\[\s*([_-\w][_-\w\d]*)\s*(?:(=|\^=|\$=|\*=|\~=|\|=)\s*(?:([_-\w][_-\w\d]*)|"((?:[^\\"]|\\(?:"|n|r|f|\\|0-9a-f))*)"|'((?:[^\\']|\\(?:'|n|r|f|\\|0-9a-f))*)')\s*)?\])(?:\s*(\+|~|>|\s))?/g;
function parse(selector) {
var selectors = [];
var result;
var lastIndex = regex.lastIndex = 0;
while (result = regex.exec(selector)) {
var pos = result.index;
if (lastIndex !== pos) {
throw new Error("Unexpected characters at index, near: " + lastIndex + ": " + result.input.substr(lastIndex, 32));
} else if (!result[0] || result[0].length === 0) {
throw new Error("Last selector match got zero character result at index " + lastIndex + ", near: " + result.input.substr(lastIndex, 32));
}
pos += getLeadingWhiteSpace(result).length;
lastIndex = regex.lastIndex;
var type = getType(result);
var selector_1 = void 0;
switch (type) {
case "*":
selector_1 = {
pos: pos,
type: type
};
break;

case "#":
case ".":
case ":":
case "":
var ident = getIdentifier(result);
selector_1 = {
pos: pos,
type: type,
ident: ident
};
break;

case "[]":
var prop = getProperty(result);
var test = getPropertyTest(result);
var value = getPropertyValue(result);
selector_1 = test ? {
pos: pos,
type: type,
prop: prop,
test: test,
value: value
} : {
pos: pos,
type: type,
prop: prop
};
break;

default:
throw new Error("Unhandled type.");
}
var comb = getCombinator(result);
if (comb) {
selector_1.comb = comb;
}
selectors.push(selector_1);
}
if (selectors.length > 0) {
delete selectors[selectors.length - 1].comb;
}
return selectors;
}
exports.parse = parse;
function getLeadingWhiteSpace(result) {
return result[1] || "";
}
function getType(result) {
return result[5] && "[]" || result[2] || result[3];
}
function getIdentifier(result) {
return result[4];
}
function getProperty(result) {
return result[5];
}
function getPropertyTest(result) {
return result[6] || undefined;
}
function getPropertyValue(result) {
return result[7] || result[8] || result[9];
}
function getCombinator(result) {
return result[result.length - 1] || undefined;
}
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var properties_1 = __webpack_require__(31);
var animation_1 = __webpack_require__(49);
var style_properties_1 = __webpack_require__(28);
var KeyframeDeclaration = function() {
function KeyframeDeclaration() {}
return KeyframeDeclaration;
}();
exports.KeyframeDeclaration = KeyframeDeclaration;
var KeyframeInfo = function() {
function KeyframeInfo() {}
return KeyframeInfo;
}();
exports.KeyframeInfo = KeyframeInfo;
var KeyframeAnimationInfo = function() {
function KeyframeAnimationInfo() {
this.name = "";
this.duration = .3;
this.delay = 0;
this.iterations = 1;
this.curve = "ease";
this.isForwards = false;
this.isReverse = false;
}
return KeyframeAnimationInfo;
}();
exports.KeyframeAnimationInfo = KeyframeAnimationInfo;
var KeyframeAnimation = function() {
function KeyframeAnimation() {
this.delay = 0;
this.iterations = 1;
}
KeyframeAnimation.keyframeAnimationFromInfo = function(info) {
var animations = new Array();
var length = info.keyframes.length;
var startDuration = 0;
if (info.isReverse) {
for (var index_1 = length - 1; index_1 >= 0; index_1--) {
var keyframe = info.keyframes[index_1];
startDuration = KeyframeAnimation.parseKeyframe(info, keyframe, animations, startDuration);
}
} else {
for (var index_2 = 0; index_2 < length; index_2++) {
var keyframe = info.keyframes[index_2];
startDuration = KeyframeAnimation.parseKeyframe(info, keyframe, animations, startDuration);
}
for (var index_3 = length - 1; index_3 > 0; index_3--) {
var a1 = animations[index_3];
var a2 = animations[index_3 - 1];
if (a2["curve"] !== undefined) {
a1["curve"] = a2["curve"];
a2["curve"] = undefined;
}
}
}
for (var index_4 = 1; index_4 < length; index_4++) {
var a = animations[index_4];
if (a["curve"] === undefined) {
a["curve"] = info.curve;
}
}
var animation = new KeyframeAnimation();
animation.delay = info.delay;
animation.iterations = info.iterations;
animation.animations = animations;
animation._isForwards = info.isForwards;
return animation;
};
KeyframeAnimation.parseKeyframe = function(info, keyframe, animations, startDuration) {
var animation = {};
for (var _i = 0, _a = keyframe.declarations; _i < _a.length; _i++) {
var declaration = _a[_i];
animation[declaration.property] = declaration.value;
}
var duration = keyframe.duration;
if (duration === 0) {
duration = .01;
} else {
duration = info.duration * duration - startDuration;
startDuration += duration;
}
animation.duration = info.isReverse ? info.duration - duration : duration;
animation.curve = keyframe.curve;
animation.forceLayer = true;
animation.valueSource = "keyframe";
animations.push(animation);
return startDuration;
};
Object.defineProperty(KeyframeAnimation.prototype, "isPlaying", {
get: function() {
return this._isPlaying;
},
enumerable: true,
configurable: true
});
KeyframeAnimation.prototype.cancel = function() {
if (this._isPlaying) {
this._isPlaying = false;
for (var i = this._nativeAnimations.length - 1; i >= 0; i--) {
var animation = this._nativeAnimations[i];
if (animation.isPlaying) {
animation.cancel();
}
}
if (this._nativeAnimations.length > 0) {
var animation = this._nativeAnimations[0];
this._resetAnimationValues(this._target, animation);
}
this._rejectAnimationFinishedPromise();
}
};
KeyframeAnimation.prototype.play = function(view) {
var _this = this;
if (this._isPlaying) {
throw new Error("Animation is already playing.");
}
var animationFinishedPromise = new Promise(function(resolve, reject) {
_this._resolve = resolve;
_this._reject = reject;
});
this._isPlaying = true;
this._nativeAnimations = new Array();
this._target = view;
if (this.delay !== 0) {
setTimeout(function() {
return _this.animate(view, 0, _this.iterations);
}, this.delay);
} else {
this.animate(view, 0, this.iterations);
}
return animationFinishedPromise;
};
KeyframeAnimation.prototype.animate = function(view, index, iterations) {
var _this = this;
if (!this._isPlaying) {
return;
}
if (index === 0) {
var animation = this.animations[0];
if ("backgroundColor" in animation) {
view.style[style_properties_1.backgroundColorProperty.keyframe] = animation.backgroundColor;
}
if ("scale" in animation) {
view.style[style_properties_1.scaleXProperty.keyframe] = animation.scale.x;
view.style[style_properties_1.scaleYProperty.keyframe] = animation.scale.y;
}
if ("translate" in animation) {
view.style[style_properties_1.translateXProperty.keyframe] = animation.translate.x;
view.style[style_properties_1.translateYProperty.keyframe] = animation.translate.y;
}
if ("rotate" in animation) {
view.style[style_properties_1.rotateProperty.keyframe] = animation.rotate;
}
if ("opacity" in animation) {
view.style[style_properties_1.opacityProperty.keyframe] = animation.opacity;
}
setTimeout(function() {
return _this.animate(view, 1, iterations);
}, 1);
} else if (index < 0 || index >= this.animations.length) {
iterations -= 1;
if (iterations > 0) {
this.animate(view, 0, iterations);
} else {
if (this._isForwards === false) {
var animation = this.animations[this.animations.length - 1];
this._resetAnimationValues(view, animation);
}
this._resolveAnimationFinishedPromise();
}
} else {
var animationDef = this.animations[index];
animationDef.target = view;
var animation = new animation_1.Animation([ animationDef ]);
animation.play().then(function() {
_this.animate(view, index + 1, iterations);
}).catch(function(error) {
if (error.message.indexOf("Animation cancelled") < 0) {
throw error;
}
});
this._nativeAnimations.push(animation);
}
};
KeyframeAnimation.prototype._resolveAnimationFinishedPromise = function() {
this._nativeAnimations = new Array();
this._isPlaying = false;
this._target = null;
this._resolve();
};
KeyframeAnimation.prototype._rejectAnimationFinishedPromise = function() {
this._nativeAnimations = new Array();
this._isPlaying = false;
this._target = null;
this._reject(new Error("Animation cancelled."));
};
KeyframeAnimation.prototype._resetAnimationValues = function(view, animation) {
if ("backgroundColor" in animation) {
view.style[style_properties_1.backgroundColorProperty.keyframe] = properties_1.unsetValue;
}
if ("scale" in animation) {
view.style[style_properties_1.scaleXProperty.keyframe] = properties_1.unsetValue;
view.style[style_properties_1.scaleYProperty.keyframe] = properties_1.unsetValue;
}
if ("translate" in animation) {
view.style[style_properties_1.translateXProperty.keyframe] = properties_1.unsetValue;
view.style[style_properties_1.translateYProperty.keyframe] = properties_1.unsetValue;
}
if ("rotate" in animation) {
view.style[style_properties_1.rotateProperty.keyframe] = properties_1.unsetValue;
}
if ("opacity" in animation) {
view.style[style_properties_1.opacityProperty.keyframe] = properties_1.unsetValue;
}
};
return KeyframeAnimation;
}();
exports.KeyframeAnimation = KeyframeAnimation;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var animation_common_1 = __webpack_require__(50);
var style_properties_1 = __webpack_require__(28);
var utils_1 = __webpack_require__(14);
var lazy_1 = __webpack_require__(51);
__export(__webpack_require__(50));
var argbEvaluator;
function ensureArgbEvaluator() {
if (!argbEvaluator) {
argbEvaluator = new android.animation.ArgbEvaluator();
}
}
var easeIn = lazy_1.default(function() {
return new android.view.animation.AccelerateInterpolator(1);
});
var easeOut = lazy_1.default(function() {
return new android.view.animation.DecelerateInterpolator(1);
});
var easeInOut = lazy_1.default(function() {
return new android.view.animation.AccelerateDecelerateInterpolator();
});
var linear = lazy_1.default(function() {
return new android.view.animation.LinearInterpolator();
});
var bounce = lazy_1.default(function() {
return new android.view.animation.BounceInterpolator();
});
var keyPrefix = "ui.animation.";
var propertyKeys = {};
propertyKeys[animation_common_1.Properties.backgroundColor] = Symbol(keyPrefix + animation_common_1.Properties.backgroundColor);
propertyKeys[animation_common_1.Properties.opacity] = Symbol(keyPrefix + animation_common_1.Properties.opacity);
propertyKeys[animation_common_1.Properties.rotate] = Symbol(keyPrefix + animation_common_1.Properties.rotate);
propertyKeys[animation_common_1.Properties.scale] = Symbol(keyPrefix + animation_common_1.Properties.scale);
propertyKeys[animation_common_1.Properties.translate] = Symbol(keyPrefix + animation_common_1.Properties.translate);
function _resolveAnimationCurve(curve) {
switch (curve) {
case "easeIn":
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Animation curve resolved to android.view.animation.AccelerateInterpolator(1).", animation_common_1.traceCategories.Animation);
}
return easeIn();

case "easeOut":
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Animation curve resolved to android.view.animation.DecelerateInterpolator(1).", animation_common_1.traceCategories.Animation);
}
return easeOut();

case "easeInOut":
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Animation curve resolved to android.view.animation.AccelerateDecelerateInterpolator().", animation_common_1.traceCategories.Animation);
}
return easeInOut();

case "linear":
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Animation curve resolved to android.view.animation.LinearInterpolator().", animation_common_1.traceCategories.Animation);
}
return linear();

case "spring":
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Animation curve resolved to android.view.animation.BounceInterpolator().", animation_common_1.traceCategories.Animation);
}
return bounce();

case "ease":
return android.support.v4.view.animation.PathInterpolatorCompat.create(.25, .1, .25, 1);

default:
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Animation curve resolved to original: " + curve, animation_common_1.traceCategories.Animation);
}
if (curve instanceof animation_common_1.CubicBezierAnimationCurve) {
return android.support.v4.view.animation.PathInterpolatorCompat.create(curve.x1, curve.y1, curve.x2, curve.y2);
} else if (curve && curve.getInterpolation) {
return curve;
} else if (curve instanceof android.view.animation.LinearInterpolator) {
return curve;
} else {
throw new Error("Invalid animation curve: " + curve);
}
}
}
exports._resolveAnimationCurve = _resolveAnimationCurve;
var Animation = function(_super) {
__extends(Animation, _super);
function Animation(animationDefinitions, playSequentially) {
var _this = _super.call(this, animationDefinitions, playSequentially) || this;
_this._valueSource = "animation";
if (animationDefinitions.length > 0 && animationDefinitions[0].valueSource !== undefined) {
_this._valueSource = animationDefinitions[0].valueSource;
}
var that = new WeakRef(_this);
_this._animatorListener = new android.animation.Animator.AnimatorListener({
onAnimationStart: function(animator) {
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("MainAnimatorListener.onAndroidAnimationStart(" + animator + ")", animation_common_1.traceCategories.Animation);
}
},
onAnimationRepeat: function(animator) {
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("MainAnimatorListener.onAnimationRepeat(" + animator + ")", animation_common_1.traceCategories.Animation);
}
},
onAnimationEnd: function(animator) {
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("MainAnimatorListener.onAnimationEnd(" + animator + ")", animation_common_1.traceCategories.Animation);
}
var thisRef = that.get();
if (thisRef) {
thisRef._onAndroidAnimationEnd();
}
},
onAnimationCancel: function(animator) {
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("MainAnimatorListener.onAnimationCancel(" + animator + ")", animation_common_1.traceCategories.Animation);
}
var thisRef = that.get();
if (thisRef) {
thisRef._onAndroidAnimationCancel();
}
}
});
return _this;
}
Animation.prototype.play = function() {
var animationFinishedPromise = _super.prototype.play.call(this);
this._animators = new Array();
this._propertyUpdateCallbacks = new Array();
this._propertyResetCallbacks = new Array();
for (var i = 0, length_1 = this._propertyAnimations.length; i < length_1; i++) {
this._createAnimators(this._propertyAnimations[i]);
}
this._nativeAnimatorsArray = Array.create(android.animation.Animator, this._animators.length);
for (var i = 0, length_2 = this._animators.length; i < length_2; i++) {
this._nativeAnimatorsArray[i] = this._animators[i];
}
this._animatorSet = new android.animation.AnimatorSet();
this._animatorSet.addListener(this._animatorListener);
if (this._animators.length > 0) {
if (this._playSequentially) {
this._animatorSet.playSequentially(this._nativeAnimatorsArray);
} else {
this._animatorSet.playTogether(this._nativeAnimatorsArray);
}
}
this._enableHardwareAcceleration();
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Starting " + this._nativeAnimatorsArray.length + " animations " + (this._playSequentially ? "sequentially." : "together."), animation_common_1.traceCategories.Animation);
}
this._animatorSet.setupStartValues();
this._animatorSet.start();
return animationFinishedPromise;
};
Animation.prototype.cancel = function() {
_super.prototype.cancel.call(this);
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Cancelling AnimatorSet.", animation_common_1.traceCategories.Animation);
}
this._animatorSet.cancel();
};
Animation.prototype._resolveAnimationCurve = function(curve) {
return _resolveAnimationCurve(curve);
};
Animation.prototype._onAndroidAnimationEnd = function() {
if (!this.isPlaying) {
return;
}
var i = 0;
var length = this._propertyUpdateCallbacks.length;
for (;i < length; i++) {
this._propertyUpdateCallbacks[i]();
}
this._disableHardwareAcceleration();
this._resolveAnimationFinishedPromise();
};
Animation.prototype._onAndroidAnimationCancel = function() {
var i = 0;
var length = this._propertyResetCallbacks.length;
for (;i < length; i++) {
this._propertyResetCallbacks[i]();
}
this._disableHardwareAcceleration();
this._rejectAnimationFinishedPromise();
};
Animation.prototype._createAnimators = function(propertyAnimation) {
if (!propertyAnimation.target.nativeView) {
return;
}
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Creating ObjectAnimator(s) for animation: " + Animation._getAnimationInfo(propertyAnimation) + "...", animation_common_1.traceCategories.Animation);
}
if (propertyAnimation.target === null || propertyAnimation.target === undefined) {
throw new Error("Animation target cannot be null or undefined; property: " + propertyAnimation.property + "; value: " + propertyAnimation.value + ";");
}
if (propertyAnimation.property === null || propertyAnimation.property === undefined) {
throw new Error("Animation property cannot be null or undefined; target: " + propertyAnimation.target + "; value: " + propertyAnimation.value + ";");
}
if (propertyAnimation.value === null || propertyAnimation.value === undefined) {
throw new Error("Animation value cannot be null or undefined; target: " + propertyAnimation.target + "; property: " + propertyAnimation.property + ";");
}
var nativeArray;
var nativeView = propertyAnimation.target.nativeView;
var animators = new Array();
var propertyUpdateCallbacks = new Array();
var propertyResetCallbacks = new Array();
var originalValue1;
var originalValue2;
var density = utils_1.layout.getDisplayDensity();
var xyObjectAnimators;
var animatorSet;
var key = propertyKeys[propertyAnimation.property];
if (key) {
propertyAnimation.target[key] = propertyAnimation;
}
function checkAnimation(cb) {
return function() {
if (propertyAnimation.target[key] === propertyAnimation) {
delete propertyAnimation.target[key];
cb();
}
};
}
var setLocal = this._valueSource === "animation";
switch (propertyAnimation.property) {
case animation_common_1.Properties.opacity:
originalValue1 = nativeView.getAlpha();
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value;
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style[setLocal ? style_properties_1.opacityProperty.name : style_properties_1.opacityProperty.keyframe] = propertyAnimation.value;
}));
propertyResetCallbacks.push(checkAnimation(function() {
if (setLocal) {
propertyAnimation.target.style[style_properties_1.opacityProperty.name] = originalValue1;
} else {
propertyAnimation.target.style[style_properties_1.opacityProperty.keyframe] = originalValue1;
}
if (propertyAnimation.target.nativeView) {
propertyAnimation.target[style_properties_1.opacityProperty.setNative](propertyAnimation.target.style.opacity);
}
}));
animators.push(android.animation.ObjectAnimator.ofFloat(nativeView, "alpha", nativeArray));
break;

case animation_common_1.Properties.backgroundColor:
ensureArgbEvaluator();
originalValue1 = propertyAnimation.target.backgroundColor;
nativeArray = Array.create(java.lang.Object, 2);
nativeArray[0] = propertyAnimation.target.backgroundColor ? java.lang.Integer.valueOf(propertyAnimation.target.backgroundColor.argb) : java.lang.Integer.valueOf(-1);
nativeArray[1] = java.lang.Integer.valueOf(propertyAnimation.value.argb);
var animator = android.animation.ValueAnimator.ofObject(argbEvaluator, nativeArray);
animator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener({
onAnimationUpdate: function(animator) {
var argb = animator.getAnimatedValue().intValue();
propertyAnimation.target.style[setLocal ? style_properties_1.backgroundColorProperty.name : style_properties_1.backgroundColorProperty.keyframe] = new animation_common_1.Color(argb);
}
}));
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style[setLocal ? style_properties_1.backgroundColorProperty.name : style_properties_1.backgroundColorProperty.keyframe] = propertyAnimation.value;
}));
propertyResetCallbacks.push(checkAnimation(function() {
if (setLocal) {
propertyAnimation.target.style[style_properties_1.backgroundColorProperty.name] = originalValue1;
} else {
propertyAnimation.target.style[style_properties_1.backgroundColorProperty.keyframe] = originalValue1;
if (propertyAnimation.target.nativeView && propertyAnimation.target[style_properties_1.backgroundColorProperty.setNative]) {
propertyAnimation.target[style_properties_1.backgroundColorProperty.setNative](propertyAnimation.target.style.backgroundColor);
}
}
}));
animators.push(animator);
break;

case animation_common_1.Properties.translate:
xyObjectAnimators = Array.create(android.animation.Animator, 2);
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.x * density;
xyObjectAnimators[0] = android.animation.ObjectAnimator.ofFloat(nativeView, "translationX", nativeArray);
xyObjectAnimators[0].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.y * density;
xyObjectAnimators[1] = android.animation.ObjectAnimator.ofFloat(nativeView, "translationY", nativeArray);
xyObjectAnimators[1].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
originalValue1 = nativeView.getTranslationX() / density;
originalValue2 = nativeView.getTranslationY() / density;
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style[setLocal ? style_properties_1.translateXProperty.name : style_properties_1.translateXProperty.keyframe] = propertyAnimation.value.x;
propertyAnimation.target.style[setLocal ? style_properties_1.translateYProperty.name : style_properties_1.translateYProperty.keyframe] = propertyAnimation.value.y;
}));
propertyResetCallbacks.push(checkAnimation(function() {
if (setLocal) {
propertyAnimation.target.style[style_properties_1.translateXProperty.name] = originalValue1;
propertyAnimation.target.style[style_properties_1.translateYProperty.name] = originalValue2;
} else {
propertyAnimation.target.style[style_properties_1.translateXProperty.keyframe] = originalValue1;
propertyAnimation.target.style[style_properties_1.translateYProperty.keyframe] = originalValue2;
if (propertyAnimation.target.nativeView) {
propertyAnimation.target[style_properties_1.translateXProperty.setNative](propertyAnimation.target.style.translateX);
propertyAnimation.target[style_properties_1.translateYProperty.setNative](propertyAnimation.target.style.translateY);
}
}
}));
animatorSet = new android.animation.AnimatorSet();
animatorSet.playTogether(xyObjectAnimators);
animatorSet.setupStartValues();
animators.push(animatorSet);
break;

case animation_common_1.Properties.scale:
xyObjectAnimators = Array.create(android.animation.Animator, 2);
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.x;
xyObjectAnimators[0] = android.animation.ObjectAnimator.ofFloat(nativeView, "scaleX", nativeArray);
xyObjectAnimators[0].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.y;
xyObjectAnimators[1] = android.animation.ObjectAnimator.ofFloat(nativeView, "scaleY", nativeArray);
xyObjectAnimators[1].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
originalValue1 = nativeView.getScaleX();
originalValue2 = nativeView.getScaleY();
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style[setLocal ? style_properties_1.scaleXProperty.name : style_properties_1.scaleXProperty.keyframe] = propertyAnimation.value.x;
propertyAnimation.target.style[setLocal ? style_properties_1.scaleYProperty.name : style_properties_1.scaleYProperty.keyframe] = propertyAnimation.value.y;
}));
propertyResetCallbacks.push(checkAnimation(function() {
if (setLocal) {
propertyAnimation.target.style[style_properties_1.scaleXProperty.name] = originalValue1;
propertyAnimation.target.style[style_properties_1.scaleYProperty.name] = originalValue2;
} else {
propertyAnimation.target.style[style_properties_1.scaleXProperty.keyframe] = originalValue1;
propertyAnimation.target.style[style_properties_1.scaleYProperty.keyframe] = originalValue2;
if (propertyAnimation.target.nativeView) {
propertyAnimation.target[style_properties_1.scaleXProperty.setNative](propertyAnimation.target.style.scaleX);
propertyAnimation.target[style_properties_1.scaleYProperty.setNative](propertyAnimation.target.style.scaleY);
}
}
}));
animatorSet = new android.animation.AnimatorSet();
animatorSet.playTogether(xyObjectAnimators);
animatorSet.setupStartValues();
animators.push(animatorSet);
break;

case animation_common_1.Properties.rotate:
originalValue1 = nativeView.getRotation();
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value;
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style[setLocal ? style_properties_1.rotateProperty.name : style_properties_1.rotateProperty.keyframe] = propertyAnimation.value;
}));
propertyResetCallbacks.push(checkAnimation(function() {
if (setLocal) {
propertyAnimation.target.style[style_properties_1.rotateProperty.name] = originalValue1;
} else {
propertyAnimation.target.style[style_properties_1.rotateProperty.keyframe] = originalValue1;
if (propertyAnimation.target.nativeView) {
propertyAnimation.target[style_properties_1.rotateProperty.setNative](propertyAnimation.target.style.rotate);
}
}
}));
animators.push(android.animation.ObjectAnimator.ofFloat(nativeView, "rotation", nativeArray));
break;

default:
throw new Error("Cannot animate " + propertyAnimation.property);
}
for (var i = 0, length_3 = animators.length; i < length_3; i++) {
if (propertyAnimation.duration !== undefined) {
animators[i].setDuration(propertyAnimation.duration);
}
if (propertyAnimation.delay !== undefined) {
animators[i].setStartDelay(propertyAnimation.delay);
}
if (propertyAnimation.iterations !== undefined && animators[i] instanceof android.animation.ValueAnimator) {
animators[i].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
}
if (propertyAnimation.curve !== undefined) {
animators[i].setInterpolator(propertyAnimation.curve);
}
if (animation_common_1.traceEnabled()) {
animation_common_1.traceWrite("Animator created: " + animators[i], animation_common_1.traceCategories.Animation);
}
}
this._animators = this._animators.concat(animators);
this._propertyUpdateCallbacks = this._propertyUpdateCallbacks.concat(propertyUpdateCallbacks);
this._propertyResetCallbacks = this._propertyResetCallbacks.concat(propertyResetCallbacks);
};
Animation._getAndroidRepeatCount = function(iterations) {
return iterations === Number.POSITIVE_INFINITY ? android.view.animation.Animation.INFINITE : iterations - 1;
};
Animation.prototype._enableHardwareAcceleration = function() {
for (var i = 0, length_4 = this._propertyAnimations.length; i < length_4; i++) {
var cache = this._propertyAnimations[i].target.nativeView;
if (cache) {
var layerType = cache.getLayerType();
if (layerType !== android.view.View.LAYER_TYPE_HARDWARE) {
cache.layerType = layerType;
cache.setLayerType(android.view.View.LAYER_TYPE_HARDWARE, null);
}
}
}
};
Animation.prototype._disableHardwareAcceleration = function() {
for (var i = 0, length_5 = this._propertyAnimations.length; i < length_5; i++) {
var cache = this._propertyAnimations[i].target.nativeView;
if (cache && cache.layerType !== undefined) {
cache.setLayerType(cache.layerType, null);
cache.layerType = undefined;
}
}
};
return Animation;
}(animation_common_1.AnimationBase);
exports.Animation = Animation;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var color_1 = __webpack_require__(24);
exports.Color = color_1.Color;
var trace_1 = __webpack_require__(15);
exports.traceEnabled = trace_1.isEnabled;
exports.traceWrite = trace_1.write;
exports.traceCategories = trace_1.categories;
var Properties;
(function(Properties) {
Properties.opacity = "opacity";
Properties.backgroundColor = "backgroundColor";
Properties.translate = "translate";
Properties.rotate = "rotate";
Properties.scale = "scale";
})(Properties = exports.Properties || (exports.Properties = {}));
var CubicBezierAnimationCurve = function() {
function CubicBezierAnimationCurve(x1, y1, x2, y2) {
this.x1 = x1;
this.y1 = y1;
this.x2 = x2;
this.y2 = y2;
}
return CubicBezierAnimationCurve;
}();
exports.CubicBezierAnimationCurve = CubicBezierAnimationCurve;
var AnimationBase = function() {
function AnimationBase(animationDefinitions, playSequentially) {
if (!animationDefinitions || animationDefinitions.length === 0) {
throw new Error("No animation definitions specified");
}
if (trace_1.isEnabled()) {
trace_1.write("Analyzing " + animationDefinitions.length + " animation definitions...", trace_1.categories.Animation);
}
this._propertyAnimations = new Array();
for (var i = 0, length_1 = animationDefinitions.length; i < length_1; i++) {
if (animationDefinitions[i].curve) {
animationDefinitions[i].curve = this._resolveAnimationCurve(animationDefinitions[i].curve);
}
this._propertyAnimations = this._propertyAnimations.concat(AnimationBase._createPropertyAnimations(animationDefinitions[i]));
}
if (this._propertyAnimations.length === 0) {
throw new Error("Nothing to animate.");
}
if (trace_1.isEnabled()) {
trace_1.write("Created " + this._propertyAnimations.length + " individual property animations.", trace_1.categories.Animation);
}
this._playSequentially = playSequentially;
}
AnimationBase.prototype.play = function() {
var _this = this;
if (this.isPlaying) {
throw new Error("Animation is already playing.");
}
var animationFinishedPromise = new Promise(function(resolve, reject) {
_this._resolve = resolve;
_this._reject = reject;
});
this.fixupAnimationPromise(animationFinishedPromise);
this._isPlaying = true;
return animationFinishedPromise;
};
AnimationBase.prototype.fixupAnimationPromise = function(promise) {
var _this = this;
promise.cancel = function() {
_this.cancel();
};
var _then = promise.then;
promise.then = function() {
var r = _then.apply(promise, arguments);
_this.fixupAnimationPromise(r);
return r;
};
var _catch = promise.catch;
promise.catch = function() {
var r = _catch.apply(promise, arguments);
_this.fixupAnimationPromise(r);
return r;
};
};
AnimationBase.prototype.cancel = function() {
if (!this.isPlaying) {
throw new Error("Animation is not currently playing.");
}
};
Object.defineProperty(AnimationBase.prototype, "isPlaying", {
get: function() {
return this._isPlaying;
},
enumerable: true,
configurable: true
});
AnimationBase.prototype._resolveAnimationFinishedPromise = function() {
this._isPlaying = false;
this._resolve();
};
AnimationBase.prototype._rejectAnimationFinishedPromise = function() {
this._isPlaying = false;
this._reject(new Error("Animation cancelled."));
};
AnimationBase._createPropertyAnimations = function(animationDefinition) {
if (!animationDefinition.target) {
throw new Error("No animation target specified.");
}
for (var item in animationDefinition) {
if (animationDefinition[item] === undefined) {
continue;
}
if ((item === Properties.opacity || item === Properties.rotate || item === "duration" || item === "delay" || item === "iterations") && typeof animationDefinition[item] !== "number") {
throw new Error("Property " + item + " must be valid number. Value: " + animationDefinition[item]);
} else if ((item === Properties.scale || item === Properties.translate) && (typeof animationDefinition[item].x !== "number" || typeof animationDefinition[item].y !== "number")) {
throw new Error("Property " + item + " must be valid Pair. Value: " + animationDefinition[item]);
} else if (item === Properties.backgroundColor && !color_1.Color.isValid(animationDefinition.backgroundColor)) {
throw new Error("Property " + item + " must be valid color. Value: " + animationDefinition[item]);
}
}
var propertyAnimations = new Array();
if (animationDefinition.opacity !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.opacity,
value: animationDefinition.opacity,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.backgroundColor !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.backgroundColor,
value: typeof animationDefinition.backgroundColor === "string" ? new color_1.Color(animationDefinition.backgroundColor) : animationDefinition.backgroundColor,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.translate !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.translate,
value: animationDefinition.translate,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.scale !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.scale,
value: animationDefinition.scale,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.rotate !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.rotate,
value: animationDefinition.rotate,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (propertyAnimations.length === 0) {
throw new Error("No animation property specified.");
}
return propertyAnimations;
};
AnimationBase._getAnimationInfo = function(animation) {
return JSON.stringify({
target: animation.target.id,
property: animation.property,
value: animation.value,
duration: animation.duration,
delay: animation.delay,
iterations: animation.iterations,
curve: animation.curve
});
};
return AnimationBase;
}();
exports.AnimationBase = AnimationBase;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
function lazy(action) {
var _value;
return function() {
return _value || (_value = action());
};
}
exports.default = lazy;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var color_1 = __webpack_require__(24);
var keyframe_animation_1 = __webpack_require__(48);
var converters_1 = __webpack_require__(53);
var animationProperties = {
"animation-name": function(info, declaration) {
return info.name = declaration.value;
},
"animation-duration": function(info, declaration) {
return info.duration = converters_1.timeConverter(declaration.value);
},
"animation-delay": function(info, declaration) {
return info.delay = converters_1.timeConverter(declaration.value);
},
"animation-timing-function": function(info, declaration) {
return info.curve = converters_1.animationTimingFunctionConverter(declaration.value);
},
"animation-iteration-count": function(info, declaration) {
return declaration.value === "infinite" ? info.iterations = Number.MAX_VALUE : info.iterations = converters_1.numberConverter(declaration.value);
},
"animation-direction": function(info, declaration) {
return info.isReverse = declaration.value === "reverse";
},
"animation-fill-mode": function(info, declaration) {
return info.isForwards = declaration.value === "forwards";
}
};
var CssAnimationParser = function() {
function CssAnimationParser() {}
CssAnimationParser.keyframeAnimationsFromCSSDeclarations = function(declarations) {
var animations = new Array();
var animationInfo = undefined;
if (declarations === null || declarations === undefined) {
return undefined;
}
for (var _i = 0, declarations_1 = declarations; _i < declarations_1.length; _i++) {
var declaration = declarations_1[_i];
if (declaration.property === "animation") {
keyframeAnimationsFromCSSProperty(declaration.value, animations);
} else {
var propertyHandler = animationProperties[declaration.property];
if (propertyHandler) {
if (animationInfo === undefined) {
animationInfo = new keyframe_animation_1.KeyframeAnimationInfo();
animations.push(animationInfo);
}
propertyHandler(animationInfo, declaration);
}
}
}
return animations.length === 0 ? undefined : animations;
};
CssAnimationParser.keyframesArrayFromCSS = function(cssKeyframes) {
var parsedKeyframes = new Array();
for (var _i = 0, _a = cssKeyframes.keyframes; _i < _a.length; _i++) {
var keyframe = _a[_i];
var declarations = parseKeyframeDeclarations(keyframe);
for (var _b = 0, _c = keyframe.values; _b < _c.length; _b++) {
var time_1 = _c[_b];
if (time_1 === "from") {
time_1 = 0;
} else if (time_1 === "to") {
time_1 = 1;
} else {
time_1 = parseFloat(time_1) / 100;
if (time_1 < 0) {
time_1 = 0;
}
if (time_1 > 100) {
time_1 = 100;
}
}
var current = parsedKeyframes[time_1];
if (current === undefined) {
current = {};
current.duration = time_1;
parsedKeyframes[time_1] = current;
}
for (var _d = 0, _e = keyframe.declarations; _d < _e.length; _d++) {
var declaration = _e[_d];
if (declaration.property === "animation-timing-function") {
current.curve = converters_1.animationTimingFunctionConverter(declaration.value);
}
}
current.declarations = declarations;
}
}
var array = new Array();
for (var parsedKeyframe in parsedKeyframes) {
array.push(parsedKeyframes[parsedKeyframe]);
}
array.sort(function(a, b) {
return a.duration - b.duration;
});
return array;
};
return CssAnimationParser;
}();
exports.CssAnimationParser = CssAnimationParser;
function keyframeAnimationsFromCSSProperty(value, animations) {
if (typeof value === "string") {
var values = value.split(/[,]+/);
for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
var parsedValue = values_1[_i];
var animationInfo = new keyframe_animation_1.KeyframeAnimationInfo();
var arr = parsedValue.trim().split(/[ ]+/);
if (arr.length > 0) {
animationInfo.name = arr[0];
}
if (arr.length > 1) {
animationInfo.duration = converters_1.timeConverter(arr[1]);
}
if (arr.length > 2) {
animationInfo.curve = converters_1.animationTimingFunctionConverter(arr[2]);
}
if (arr.length > 3) {
animationInfo.delay = converters_1.timeConverter(arr[3]);
}
if (arr.length > 4) {
animationInfo.iterations = parseInt(arr[4]);
}
if (arr.length > 5) {
animationInfo.isReverse = arr[4] === "reverse";
}
if (arr.length > 6) {
animationInfo.isForwards = arr[5] === "forwards";
}
if (arr.length > 7) {
throw new Error("Invalid value for animation: " + value);
}
animations.push(animationInfo);
}
}
}
function getTransformationValues(value) {
var newTransform = converters_1.transformConverter(value);
var array = new Array();
var values = undefined;
for (var transform in newTransform) {
switch (transform) {
case "scaleX":
array.push({
propertyName: "scaleX",
value: parseFloat(newTransform[transform])
});
break;

case "scaleY":
array.push({
propertyName: "scaleY",
value: parseFloat(newTransform[transform])
});
break;

case "scale":
case "scale3d":
values = newTransform[transform].split(",");
if (values.length === 2 || values.length === 3) {
array.push({
propertyName: "scaleX",
value: parseFloat(values[0])
});
array.push({
propertyName: "scaleY",
value: parseFloat(values[1])
});
}
break;

case "translateX":
array.push({
propertyName: "translateX",
value: parseFloat(newTransform[transform])
});
break;

case "translateY":
array.push({
propertyName: "translateY",
value: parseFloat(newTransform[transform])
});
break;

case "translate":
case "translate3d":
values = newTransform[transform].split(",");
if (values.length === 2 || values.length === 3) {
array.push({
propertyName: "translateX",
value: parseFloat(values[0])
});
array.push({
propertyName: "translateY",
value: parseFloat(values[1])
});
}
break;

case "rotate":
var text = newTransform[transform];
var val = parseFloat(text);
if (text.slice(-3) === "rad") {
val = val * (180 / Math.PI);
}
array.push({
propertyName: "rotate",
value: val
});
break;

case "none":
array.push({
propertyName: "scaleX",
value: 1
});
array.push({
propertyName: "scaleY",
value: 1
});
array.push({
propertyName: "translateX",
value: 0
});
array.push({
propertyName: "translateY",
value: 0
});
array.push({
propertyName: "rotate",
value: 0
});
break;
}
}
return array;
}
function parseKeyframeDeclarations(keyframe) {
var declarations = {};
var transforms = {
scale: undefined,
translate: undefined
};
for (var _i = 0, _a = keyframe.declarations; _i < _a.length; _i++) {
var declaration = _a[_i];
var propertyName = declaration.property;
var value = declaration.value;
if (propertyName === "opacity") {
declarations[propertyName] = parseFloat(value);
} else if (propertyName === "transform") {
var values = getTransformationValues(value);
if (values) {
for (var _b = 0, values_2 = values; _b < values_2.length; _b++) {
var pair = values_2[_b];
if (!preprocessAnimationValues(pair.propertyName, pair.value, transforms)) {
declarations[pair.propertyName] = pair.value;
}
}
}
delete declarations[propertyName];
} else if (propertyName === "backgroundColor" || propertyName === "background-color") {
declarations["backgroundColor"] = new color_1.Color(value);
} else {
declarations[propertyName] = value;
}
}
if (transforms.scale !== undefined) {
declarations["scale"] = transforms.scale;
}
if (transforms.translate !== undefined) {
declarations["translate"] = transforms.translate;
}
var array = new Array();
for (var declaration in declarations) {
var keyframeDeclaration = {};
keyframeDeclaration.property = declaration;
keyframeDeclaration.value = declarations[declaration];
array.push(keyframeDeclaration);
}
return array;
}
function preprocessAnimationValues(propertyName, value, transforms) {
if (propertyName === "scaleX") {
if (transforms.scale === undefined) {
transforms.scale = {
x: 1,
y: 1
};
}
transforms.scale.x = value;
return true;
}
if (propertyName === "scaleY") {
if (transforms.scale === undefined) {
transforms.scale = {
x: 1,
y: 1
};
}
transforms.scale.y = value;
return true;
}
if (propertyName === "translateX") {
if (transforms.translate === undefined) {
transforms.translate = {
x: 0,
y: 0
};
}
transforms.translate.x = value;
return true;
}
if (propertyName === "translateY") {
if (transforms.translate === undefined) {
transforms.translate = {
x: 0,
y: 0
};
}
transforms.translate.y = value;
return true;
}
return false;
}
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var color_1 = __webpack_require__(24);
var animation_1 = __webpack_require__(49);
function colorConverter(value) {
return new color_1.Color(value);
}
exports.colorConverter = colorConverter;
function floatConverter(value) {
var result = parseFloat(value);
return result;
}
exports.floatConverter = floatConverter;
function fontSizeConverter(value) {
return floatConverter(value);
}
exports.fontSizeConverter = fontSizeConverter;
exports.numberConverter = parseFloat;
function opacityConverter(value) {
var result = parseFloat(value);
result = Math.max(0, result);
result = Math.min(1, result);
return result;
}
exports.opacityConverter = opacityConverter;
function timeConverter(value) {
var result = parseFloat(value);
if (value.indexOf("ms") === -1) {
result = result * 1e3;
}
return Math.max(0, result);
}
exports.timeConverter = timeConverter;
function bezieArgumentConverter(value) {
var result = parseFloat(value);
result = Math.max(0, result);
result = Math.min(1, result);
return result;
}
exports.bezieArgumentConverter = bezieArgumentConverter;
function animationTimingFunctionConverter(value) {
var result = "ease";
switch (value) {
case "ease":
result = "ease";
break;

case "linear":
result = "linear";
break;

case "ease-in":
result = "easeIn";
break;

case "ease-out":
result = "easeOut";
break;

case "ease-in-out":
result = "easeInOut";
break;

case "spring":
result = "spring";
break;

default:
if (value.indexOf("cubic-bezier(") === 0) {
var bezierArr = value.substring(13).split(/[,]+/);
if (bezierArr.length !== 4) {
throw new Error("Invalid value for animation: " + value);
}
result = new animation_1.CubicBezierAnimationCurve(bezieArgumentConverter(bezierArr[0]), bezieArgumentConverter(bezierArr[1]), bezieArgumentConverter(bezierArr[2]), bezieArgumentConverter(bezierArr[3]));
} else {
throw new Error("Invalid value for animation: " + value);
}
break;
}
return result;
}
exports.animationTimingFunctionConverter = animationTimingFunctionConverter;
function transformConverter(value) {
if (value === "none") {
var operations = {};
operations[value] = value;
return operations;
} else if (typeof value === "string") {
var operations = {};
var operator = "";
var pos = 0;
while (pos < value.length) {
if (value[pos] === " " || value[pos] === ",") {
pos++;
} else if (value[pos] === "(") {
var start = pos + 1;
while (pos < value.length && value[pos] !== ")") {
pos++;
}
var operand = value.substring(start, pos);
operations[operator] = operand.trim();
operator = "";
pos++;
} else {
operator += value[pos++];
}
}
return operations;
} else {
return undefined;
}
}
exports.transformConverter = transformConverter;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var gestures_common_1 = __webpack_require__(55);
var utils_1 = __webpack_require__(14);
__export(__webpack_require__(55));
var TapAndDoubleTapGestureListener;
function initializeTapAndDoubleTapGestureListener() {
if (TapAndDoubleTapGestureListener) {
return;
}
var TapAndDoubleTapGestureListenerImpl = function(_super) {
__extends(TapAndDoubleTapGestureListenerImpl, _super);
function TapAndDoubleTapGestureListenerImpl(observer, target, type) {
var _this = _super.call(this) || this;
_this._observer = observer;
_this._target = target;
_this._type = type;
return global.__native(_this);
}
TapAndDoubleTapGestureListenerImpl.prototype.onSingleTapUp = function(motionEvent) {
if (this._type & gestures_common_1.GestureTypes.tap) {
var args = _getArgs(gestures_common_1.GestureTypes.tap, this._target, motionEvent);
_executeCallback(this._observer, args);
}
return true;
};
TapAndDoubleTapGestureListenerImpl.prototype.onDoubleTap = function(motionEvent) {
if (this._type & gestures_common_1.GestureTypes.doubleTap) {
var args = _getArgs(gestures_common_1.GestureTypes.doubleTap, this._target, motionEvent);
_executeCallback(this._observer, args);
}
return true;
};
TapAndDoubleTapGestureListenerImpl.prototype.onDown = function(motionEvent) {
return true;
};
TapAndDoubleTapGestureListenerImpl.prototype.onLongPress = function(motionEvent) {
if (this._type & gestures_common_1.GestureTypes.longPress) {
var args = _getArgs(gestures_common_1.GestureTypes.longPress, this._target, motionEvent);
_executeCallback(this._observer, args);
}
};
return TapAndDoubleTapGestureListenerImpl;
}(android.view.GestureDetector.SimpleOnGestureListener);
TapAndDoubleTapGestureListener = TapAndDoubleTapGestureListenerImpl;
}
var PinchGestureListener;
function initializePinchGestureListener() {
if (PinchGestureListener) {
return;
}
var PinchGestureListenerImpl = function(_super) {
__extends(PinchGestureListenerImpl, _super);
function PinchGestureListenerImpl(observer, target) {
var _this = _super.call(this) || this;
_this._observer = observer;
_this._target = target;
_this._density = utils_1.layout.getDisplayDensity();
return global.__native(_this);
}
PinchGestureListenerImpl.prototype.onScaleBegin = function(detector) {
this._scale = detector.getScaleFactor();
var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, gestures_common_1.GestureStateTypes.began);
_executeCallback(this._observer, args);
return true;
};
PinchGestureListenerImpl.prototype.onScale = function(detector) {
this._scale *= detector.getScaleFactor();
var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, gestures_common_1.GestureStateTypes.changed);
_executeCallback(this._observer, args);
return true;
};
PinchGestureListenerImpl.prototype.onScaleEnd = function(detector) {
this._scale *= detector.getScaleFactor();
var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, gestures_common_1.GestureStateTypes.ended);
_executeCallback(this._observer, args);
};
return PinchGestureListenerImpl;
}(android.view.ScaleGestureDetector.SimpleOnScaleGestureListener);
PinchGestureListener = PinchGestureListenerImpl;
}
var SwipeGestureListener;
function initializeSwipeGestureListener() {
if (SwipeGestureListener) {
return;
}
var SwipeGestureListenerImpl = function(_super) {
__extends(SwipeGestureListenerImpl, _super);
function SwipeGestureListenerImpl(observer, target) {
var _this = _super.call(this) || this;
_this._observer = observer;
_this._target = target;
return global.__native(_this);
}
SwipeGestureListenerImpl.prototype.onDown = function(motionEvent) {
return true;
};
SwipeGestureListenerImpl.prototype.onFling = function(initialEvent, currentEvent, velocityX, velocityY) {
var result = false;
var args;
try {
var deltaY = currentEvent.getY() - initialEvent.getY();
var deltaX = currentEvent.getX() - initialEvent.getX();
if (Math.abs(deltaX) > Math.abs(deltaY)) {
if (Math.abs(deltaX) > SWIPE_THRESHOLD && Math.abs(velocityX) > SWIPE_VELOCITY_THRESHOLD) {
if (deltaX > 0) {
args = _getSwipeArgs(gestures_common_1.SwipeDirection.right, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
} else {
args = _getSwipeArgs(gestures_common_1.SwipeDirection.left, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
}
}
} else {
if (Math.abs(deltaY) > SWIPE_THRESHOLD && Math.abs(velocityY) > SWIPE_VELOCITY_THRESHOLD) {
if (deltaY > 0) {
args = _getSwipeArgs(gestures_common_1.SwipeDirection.down, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
} else {
args = _getSwipeArgs(gestures_common_1.SwipeDirection.up, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
}
}
}
} catch (ex) {}
return result;
};
return SwipeGestureListenerImpl;
}(android.view.GestureDetector.SimpleOnGestureListener);
SwipeGestureListener = SwipeGestureListenerImpl;
}
var SWIPE_THRESHOLD = 100;
var SWIPE_VELOCITY_THRESHOLD = 100;
var INVALID_POINTER_ID = -1;
var TO_DEGREES = 180 / Math.PI;
function observe(target, type, callback, context) {
var observer = new GesturesObserver(target, callback, context);
observer.observe(type);
return observer;
}
exports.observe = observe;
var GesturesObserver = function(_super) {
__extends(GesturesObserver, _super);
function GesturesObserver() {
return _super !== null && _super.apply(this, arguments) || this;
}
GesturesObserver.prototype.observe = function(type) {
var _this = this;
if (this.target) {
this.type = type;
this._onTargetLoaded = function(args) {
_this._attach(_this.target, type);
};
this._onTargetUnloaded = function(args) {
_this._detach();
};
this.target.on("loaded", this._onTargetLoaded);
this.target.on("unloaded", this._onTargetUnloaded);
if (this.target.isLoaded) {
this._attach(this.target, type);
}
}
};
GesturesObserver.prototype.disconnect = function() {
this._detach();
if (this.target) {
this.target.off("loaded", this._onTargetLoaded);
this.target.off("unloaded", this._onTargetUnloaded);
this._onTargetLoaded = null;
this._onTargetUnloaded = null;
}
_super.prototype.disconnect.call(this);
};
GesturesObserver.prototype._detach = function() {
this._notifyTouch = false;
this._simpleGestureDetector = null;
this._scaleGestureDetector = null;
this._swipeGestureDetector = null;
this._panGestureDetector = null;
this._rotateGestureDetector = null;
this._eventData = null;
};
GesturesObserver.prototype._attach = function(target, type) {
this._detach();
if (type & gestures_common_1.GestureTypes.tap || type & gestures_common_1.GestureTypes.doubleTap || type & gestures_common_1.GestureTypes.longPress) {
initializeTapAndDoubleTapGestureListener();
this._simpleGestureDetector = new android.support.v4.view.GestureDetectorCompat(target._context, new TapAndDoubleTapGestureListener(this, this.target, type));
}
if (type & gestures_common_1.GestureTypes.pinch) {
initializePinchGestureListener();
this._scaleGestureDetector = new android.view.ScaleGestureDetector(target._context, new PinchGestureListener(this, this.target));
}
if (type & gestures_common_1.GestureTypes.swipe) {
initializeSwipeGestureListener();
this._swipeGestureDetector = new android.support.v4.view.GestureDetectorCompat(target._context, new SwipeGestureListener(this, this.target));
}
if (type & gestures_common_1.GestureTypes.pan) {
this._panGestureDetector = new CustomPanGestureDetector(this, this.target);
}
if (type & gestures_common_1.GestureTypes.rotation) {
this._rotateGestureDetector = new CustomRotateGestureDetector(this, this.target);
}
if (type & gestures_common_1.GestureTypes.touch) {
this._notifyTouch = true;
}
};
GesturesObserver.prototype.androidOnTouchEvent = function(motionEvent) {
if (this._notifyTouch) {
if (!this._eventData) {
this._eventData = new TouchGestureEventData();
}
this._eventData.prepare(this.target, motionEvent);
_executeCallback(this, this._eventData);
}
if (this._simpleGestureDetector) {
this._simpleGestureDetector.onTouchEvent(motionEvent);
}
if (this._scaleGestureDetector) {
this._scaleGestureDetector.onTouchEvent(motionEvent);
}
if (this._swipeGestureDetector) {
this._swipeGestureDetector.onTouchEvent(motionEvent);
}
if (this._panGestureDetector) {
this._panGestureDetector.onTouchEvent(motionEvent);
}
if (this._rotateGestureDetector) {
this._rotateGestureDetector.onTouchEvent(motionEvent);
}
};
return GesturesObserver;
}(gestures_common_1.GesturesObserverBase);
exports.GesturesObserver = GesturesObserver;
function _getArgs(type, view, e) {
return {
type: type,
view: view,
android: e,
ios: undefined,
object: view,
eventName: gestures_common_1.toString(type)
};
}
function _getSwipeArgs(direction, view, initialEvent, currentEvent) {
return {
type: gestures_common_1.GestureTypes.swipe,
view: view,
android: {
initial: initialEvent,
current: currentEvent
},
direction: direction,
ios: undefined,
object: view,
eventName: gestures_common_1.toString(gestures_common_1.GestureTypes.swipe)
};
}
function _getPanArgs(deltaX, deltaY, view, state, initialEvent, currentEvent) {
return {
type: gestures_common_1.GestureTypes.pan,
view: view,
android: {
initial: initialEvent,
current: currentEvent
},
deltaX: deltaX,
deltaY: deltaY,
ios: undefined,
object: view,
eventName: gestures_common_1.toString(gestures_common_1.GestureTypes.pan),
state: state
};
}
function _executeCallback(observer, args) {
if (observer && observer.callback) {
observer.callback.call(observer._context, args);
}
}
var PinchGestureEventData = function() {
function PinchGestureEventData(view, android, scale, object, state) {
this.view = view;
this.android = android;
this.scale = scale;
this.object = object;
this.state = state;
this.type = gestures_common_1.GestureTypes.pinch;
this.eventName = gestures_common_1.toString(gestures_common_1.GestureTypes.pinch);
}
PinchGestureEventData.prototype.getFocusX = function() {
return this.android.getFocusX() / utils_1.layout.getDisplayDensity();
};
PinchGestureEventData.prototype.getFocusY = function() {
return this.android.getFocusY() / utils_1.layout.getDisplayDensity();
};
return PinchGestureEventData;
}();
var CustomPanGestureDetector = function() {
function CustomPanGestureDetector(observer, target) {
this.observer = observer;
this.target = target;
this.isTracking = false;
this.density = utils_1.layout.getDisplayDensity();
}
CustomPanGestureDetector.prototype.onTouchEvent = function(event) {
switch (event.getActionMasked()) {
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
this.trackStop(event, false);
break;

case android.view.MotionEvent.ACTION_DOWN:
case android.view.MotionEvent.ACTION_POINTER_DOWN:
case android.view.MotionEvent.ACTION_POINTER_UP:
this.trackStop(event, true);
break;

case android.view.MotionEvent.ACTION_MOVE:
if (!this.isTracking) {
this.trackStart(event);
}
this.trackChange(event);
break;
}
return true;
};
CustomPanGestureDetector.prototype.trackStop = function(currentEvent, cahceEvent) {
if (this.isTracking) {
var args = _getPanArgs(this.deltaX, this.deltaY, this.target, gestures_common_1.GestureStateTypes.ended, null, currentEvent);
_executeCallback(this.observer, args);
this.deltaX = undefined;
this.deltaY = undefined;
this.isTracking = false;
}
if (cahceEvent) {
this.lastEventCache = currentEvent;
} else {
this.lastEventCache = undefined;
}
};
CustomPanGestureDetector.prototype.trackStart = function(currentEvent) {
var inital = this.getEventCoordinates(this.lastEventCache ? this.lastEventCache : currentEvent);
this.initialX = inital.x;
this.initialY = inital.y;
this.isTracking = true;
var args = _getPanArgs(0, 0, this.target, gestures_common_1.GestureStateTypes.began, null, currentEvent);
_executeCallback(this.observer, args);
};
CustomPanGestureDetector.prototype.trackChange = function(currentEvent) {
var current = this.getEventCoordinates(currentEvent);
this.deltaX = current.x - this.initialX;
this.deltaY = current.y - this.initialY;
var args = _getPanArgs(this.deltaX, this.deltaY, this.target, gestures_common_1.GestureStateTypes.changed, null, currentEvent);
_executeCallback(this.observer, args);
};
CustomPanGestureDetector.prototype.getEventCoordinates = function(event) {
var count = event.getPointerCount();
if (count === 1) {
return {
x: event.getRawX() / this.density,
y: event.getRawY() / this.density
};
} else {
var offX = event.getRawX() - event.getX();
var offY = event.getRawY() - event.getY();
var res = {
x: 0,
y: 0
};
for (var i = 0; i < count; i++) {
res.x += event.getX(i) + offX;
res.y += event.getY(i) + offY;
}
res.x /= count * this.density;
res.y /= count * this.density;
return res;
}
};
return CustomPanGestureDetector;
}();
var CustomRotateGestureDetector = function() {
function CustomRotateGestureDetector(observer, target) {
this.observer = observer;
this.target = target;
this.trackedPtrId1 = INVALID_POINTER_ID;
this.trackedPtrId2 = INVALID_POINTER_ID;
}
Object.defineProperty(CustomRotateGestureDetector.prototype, "isTracking", {
get: function() {
return this.trackedPtrId1 !== INVALID_POINTER_ID && this.trackedPtrId2 !== INVALID_POINTER_ID;
},
enumerable: true,
configurable: true
});
CustomRotateGestureDetector.prototype.onTouchEvent = function(event) {
var pointerID = event.getPointerId(event.getActionIndex());
var wasTracking = this.isTracking;
switch (event.getActionMasked()) {
case android.view.MotionEvent.ACTION_DOWN:
case android.view.MotionEvent.ACTION_POINTER_DOWN:
var assigned = false;
if (this.trackedPtrId1 === INVALID_POINTER_ID && pointerID !== this.trackedPtrId2) {
this.trackedPtrId1 = pointerID;
assigned = true;
} else if (this.trackedPtrId2 === INVALID_POINTER_ID && pointerID !== this.trackedPtrId1) {
this.trackedPtrId2 = pointerID;
assigned = true;
}
if (assigned && this.isTracking) {
this.angle = 0;
this.initalPointersAngle = this.getPointersAngle(event);
this.executeCallback(event, gestures_common_1.GestureStateTypes.began);
}
break;

case android.view.MotionEvent.ACTION_MOVE:
if (this.isTracking) {
this.updateAngle(event);
this.executeCallback(event, gestures_common_1.GestureStateTypes.changed);
}
break;

case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_POINTER_UP:
if (pointerID === this.trackedPtrId1) {
this.trackedPtrId1 = INVALID_POINTER_ID;
} else if (pointerID === this.trackedPtrId2) {
this.trackedPtrId2 = INVALID_POINTER_ID;
}
if (wasTracking && !this.isTracking) {
this.executeCallback(event, gestures_common_1.GestureStateTypes.ended);
}
break;

case android.view.MotionEvent.ACTION_CANCEL:
this.trackedPtrId1 = INVALID_POINTER_ID;
this.trackedPtrId2 = INVALID_POINTER_ID;
if (wasTracking) {
this.executeCallback(event, gestures_common_1.GestureStateTypes.cancelled);
}
break;
}
return true;
};
CustomRotateGestureDetector.prototype.executeCallback = function(event, state) {
var args = {
type: gestures_common_1.GestureTypes.rotation,
view: this.target,
android: event,
rotation: this.angle,
ios: undefined,
object: this.target,
eventName: gestures_common_1.toString(gestures_common_1.GestureTypes.rotation),
state: state
};
_executeCallback(this.observer, args);
};
CustomRotateGestureDetector.prototype.updateAngle = function(event) {
var newPointersAngle = this.getPointersAngle(event);
var result = (newPointersAngle - this.initalPointersAngle) * TO_DEGREES % 360;
if (result < -180) {
result += 360;
}
if (result > 180) {
result -= 360;
}
this.angle = result;
};
CustomRotateGestureDetector.prototype.getPointersAngle = function(event) {
var firstX = event.getX(event.findPointerIndex(this.trackedPtrId1));
var firstY = event.getY(event.findPointerIndex(this.trackedPtrId1));
var secondX = event.getX(event.findPointerIndex(this.trackedPtrId2));
var secondY = event.getY(event.findPointerIndex(this.trackedPtrId2));
return Math.atan2(secondY - firstY, secondX - firstX);
};
return CustomRotateGestureDetector;
}();
var Pointer = function() {
function Pointer(id, event) {
this.event = event;
this.ios = undefined;
this.android = id;
}
Pointer.prototype.getX = function() {
return this.event.getX(this.android) / utils_1.layout.getDisplayDensity();
};
Pointer.prototype.getY = function() {
return this.event.getY(this.android) / utils_1.layout.getDisplayDensity();
};
return Pointer;
}();
var TouchGestureEventData = function() {
function TouchGestureEventData() {
this.eventName = gestures_common_1.toString(gestures_common_1.GestureTypes.touch);
this.type = gestures_common_1.GestureTypes.touch;
this.ios = undefined;
}
TouchGestureEventData.prototype.prepare = function(view, e) {
this.view = view;
this.object = view;
this.android = e;
this.action = this.getActionType(e);
this._activePointers = undefined;
this._allPointers = undefined;
};
TouchGestureEventData.prototype.getPointerCount = function() {
return this.android.getPointerCount();
};
TouchGestureEventData.prototype.getActivePointers = function() {
if (!this._activePointers) {
this._activePointers = [ new Pointer(this.android.getActionIndex(), this.android) ];
}
return this._activePointers;
};
TouchGestureEventData.prototype.getAllPointers = function() {
if (!this._allPointers) {
this._allPointers = [];
for (var i = 0; i < this.getPointerCount(); i++) {
this._allPointers.push(new Pointer(i, this.android));
}
}
return this._allPointers;
};
TouchGestureEventData.prototype.getX = function() {
return this.getActivePointers()[0].getX();
};
TouchGestureEventData.prototype.getY = function() {
return this.getActivePointers()[0].getY();
};
TouchGestureEventData.prototype.getActionType = function(e) {
switch (e.getActionMasked()) {
case android.view.MotionEvent.ACTION_DOWN:
case android.view.MotionEvent.ACTION_POINTER_DOWN:
return gestures_common_1.TouchAction.down;

case android.view.MotionEvent.ACTION_MOVE:
return gestures_common_1.TouchAction.move;

case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_POINTER_UP:
return gestures_common_1.TouchAction.up;

case android.view.MotionEvent.ACTION_CANCEL:
return gestures_common_1.TouchAction.cancel;
}
return "";
};
return TouchGestureEventData;
}();
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var GestureTypes;
(function(GestureTypes) {
GestureTypes[GestureTypes["tap"] = 1] = "tap";
GestureTypes[GestureTypes["doubleTap"] = 2] = "doubleTap";
GestureTypes[GestureTypes["pinch"] = 4] = "pinch";
GestureTypes[GestureTypes["pan"] = 8] = "pan";
GestureTypes[GestureTypes["swipe"] = 16] = "swipe";
GestureTypes[GestureTypes["rotation"] = 32] = "rotation";
GestureTypes[GestureTypes["longPress"] = 64] = "longPress";
GestureTypes[GestureTypes["touch"] = 128] = "touch";
})(GestureTypes = exports.GestureTypes || (exports.GestureTypes = {}));
var GestureStateTypes;
(function(GestureStateTypes) {
GestureStateTypes[GestureStateTypes["cancelled"] = 0] = "cancelled";
GestureStateTypes[GestureStateTypes["began"] = 1] = "began";
GestureStateTypes[GestureStateTypes["changed"] = 2] = "changed";
GestureStateTypes[GestureStateTypes["ended"] = 3] = "ended";
})(GestureStateTypes = exports.GestureStateTypes || (exports.GestureStateTypes = {}));
var SwipeDirection;
(function(SwipeDirection) {
SwipeDirection[SwipeDirection["right"] = 1] = "right";
SwipeDirection[SwipeDirection["left"] = 2] = "left";
SwipeDirection[SwipeDirection["up"] = 4] = "up";
SwipeDirection[SwipeDirection["down"] = 8] = "down";
})(SwipeDirection = exports.SwipeDirection || (exports.SwipeDirection = {}));
var TouchAction;
(function(TouchAction) {
TouchAction.down = "down";
TouchAction.up = "up";
TouchAction.move = "move";
TouchAction.cancel = "cancel";
})(TouchAction = exports.TouchAction || (exports.TouchAction = {}));
function toString(type, separator) {
var types = new Array();
if (type & GestureTypes.tap) {
types.push("tap");
}
if (type & GestureTypes.doubleTap) {
types.push("doubleTap");
}
if (type & GestureTypes.pinch) {
types.push("pinch");
}
if (type & GestureTypes.pan) {
types.push("pan");
}
if (type & GestureTypes.swipe) {
types.push("swipe");
}
if (type & GestureTypes.rotation) {
types.push("rotation");
}
if (type & GestureTypes.longPress) {
types.push("longPress");
}
if (type & GestureTypes.touch) {
types.push("touch");
}
return types.join(separator);
}
exports.toString = toString;
function fromString(type) {
var t = type.trim().toLowerCase();
if (t === "tap") {
return GestureTypes.tap;
} else if (t === "doubletap") {
return GestureTypes.doubleTap;
} else if (t === "pinch") {
return GestureTypes.pinch;
} else if (t === "pan") {
return GestureTypes.pan;
} else if (t === "swipe") {
return GestureTypes.swipe;
} else if (t === "rotation") {
return GestureTypes.rotation;
} else if (t === "longpress") {
return GestureTypes.longPress;
} else if (t === "touch") {
return GestureTypes.touch;
}
return undefined;
}
exports.fromString = fromString;
var GesturesObserverBase = function() {
function GesturesObserverBase(target, callback, context) {
this._target = target;
this._callback = callback;
this._context = context;
}
Object.defineProperty(GesturesObserverBase.prototype, "callback", {
get: function() {
return this._callback;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GesturesObserverBase.prototype, "target", {
get: function() {
return this._target;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GesturesObserverBase.prototype, "context", {
get: function() {
return this._context;
},
enumerable: true,
configurable: true
});
GesturesObserverBase.prototype.disconnect = function() {
if (this.target) {
var list = this.target.getGestureObservers(this.type);
if (list && list.length > 0) {
for (var i = 0; i < list.length; i++) {
if (list[i].callback === this.callback) {
break;
}
}
list.length = 0;
this.target._gestureObservers[this.type] = undefined;
delete this.target._gestureObservers[this.type];
}
}
this._target = null;
this._callback = null;
this._context = null;
};
return GesturesObserverBase;
}();
exports.GesturesObserverBase = GesturesObserverBase;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var platform_1 = __webpack_require__(22);
var file_system_1 = __webpack_require__(19);
var trace = __webpack_require__(15);
var appModule = __webpack_require__(3);
var MIN_WH = "minWH";
var MIN_W = "minW";
var MIN_H = "minH";
var PRIORITY_STEP = 1e4;
var minWidthHeightQualifier = {
isMatch: function(value) {
return value.indexOf(MIN_WH) === 0;
},
getMatchValue: function(value, context) {
var numVal = parseInt(value.substr(MIN_WH.length));
if (isNaN(numVal)) {
return -1;
}
var actualLength = Math.min(context.width, context.height);
if (actualLength < numVal) {
return -1;
}
return PRIORITY_STEP - (actualLength - numVal);
}
};
var minWidthQualifier = {
isMatch: function(value) {
return value.indexOf(MIN_W) === 0 && value.indexOf(MIN_WH) < 0;
},
getMatchValue: function(value, context) {
var numVal = parseInt(value.substr(MIN_W.length));
if (isNaN(numVal)) {
return -1;
}
var actualWidth = context.width;
if (actualWidth < numVal) {
return -1;
}
return PRIORITY_STEP - (actualWidth - numVal);
}
};
var minHeightQualifier = {
isMatch: function(value) {
return value.indexOf(MIN_H) === 0 && value.indexOf(MIN_WH) < 0;
},
getMatchValue: function(value, context) {
var numVal = parseInt(value.substr(MIN_H.length));
if (isNaN(numVal)) {
return -1;
}
var actualHeight = context.height;
if (actualHeight < numVal) {
return -1;
}
return PRIORITY_STEP - (actualHeight - numVal);
}
};
var platformQualifier = {
isMatch: function(value) {
return value === "android" || value === "ios";
},
getMatchValue: function(value, context) {
return value === context.os.toLowerCase() ? 1 : -1;
}
};
var orientationQualifier = {
isMatch: function(value) {
return value === "land" || value === "port";
},
getMatchValue: function(value, context) {
var isLandscape = context.width > context.height ? 1 : -1;
return value === "land" ? isLandscape : -isLandscape;
}
};
var supportedQualifiers = [ minWidthHeightQualifier, minWidthQualifier, minHeightQualifier, orientationQualifier, platformQualifier ];
var FileNameResolver = function() {
function FileNameResolver(context) {
this._cache = {};
this._context = context;
}
FileNameResolver.prototype.resolveFileName = function(path, ext) {
var key = path + ext;
var result = this._cache[key];
if (result === undefined) {
result = this.resolveFileNameImpl(path, ext);
this._cache[key] = result;
}
return result;
};
FileNameResolver.prototype.clearCache = function() {
this._cache = {};
};
FileNameResolver.prototype.resolveFileNameImpl = function(path, ext) {
var result = null;
path = file_system_1.path.normalize(path);
ext = "." + ext;
var candidates = this.getFileCandidatesFromFolder(path, ext);
result = _findFileMatch(path, ext, candidates, this._context);
return result;
};
FileNameResolver.prototype.getFileCandidatesFromFolder = function(path, ext) {
var candidates = new Array();
var folderPath = path.substring(0, path.lastIndexOf(file_system_1.path.separator) + 1);
if (file_system_1.Folder.exists(folderPath)) {
var folder = file_system_1.Folder.fromPath(folderPath);
folder.eachEntity(function(e) {
if (e instanceof file_system_1.File) {
var file = e;
if (file.path.indexOf(path) === 0 && file.extension === ext) {
candidates.push(file.path);
}
}
return true;
});
} else {
if (trace.isEnabled()) {
trace.write("Could not find folder " + folderPath + " when loading " + path + ext, trace.categories.Navigation);
}
}
return candidates;
};
return FileNameResolver;
}();
exports.FileNameResolver = FileNameResolver;
function _findFileMatch(path, ext, candidates, context) {
var bestValue = -1;
var result = null;
for (var i = 0; i < candidates.length; i++) {
var filePath = candidates[i];
var qualifiersStr = filePath.substr(path.length, filePath.length - path.length - ext.length);
var qualifiers = qualifiersStr.split(".");
var value = checkQualifiers(qualifiers, context);
if (value >= 0 && value > bestValue) {
bestValue = value;
result = candidates[i];
}
}
return result;
}
exports._findFileMatch = _findFileMatch;
function checkQualifiers(qualifiers, context) {
var result = 0;
for (var i = 0; i < qualifiers.length; i++) {
if (qualifiers[i]) {
var value = checkQualifier(qualifiers[i], context);
if (value < 0) {
return -1;
}
result += value;
}
}
return result;
}
function checkQualifier(value, context) {
for (var i = 0; i < supportedQualifiers.length; i++) {
if (supportedQualifiers[i].isMatch(value)) {
var result = supportedQualifiers[i].getMatchValue(value, context);
if (result > 0) {
result += (supportedQualifiers.length - i) * PRIORITY_STEP;
}
return result;
}
}
return -1;
}
var resolverInstance;
function resolveFileName(path, ext) {
if (!resolverInstance) {
resolverInstance = new FileNameResolver({
width: platform_1.screen.mainScreen.widthDIPs,
height: platform_1.screen.mainScreen.heightDIPs,
os: platform_1.device.os,
deviceType: platform_1.device.deviceType
});
}
return resolverInstance.resolveFileName(path, ext);
}
exports.resolveFileName = resolveFileName;
appModule.on("cssChanged", function(args) {
return resolverInstance = undefined;
});
appModule.on("livesync", function(args) {
return resolverInstance && resolverInstance.clearCache();
});
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var debug_1 = __webpack_require__(34);
var xml = __webpack_require__(58);
var file_system_1 = __webpack_require__(19);
var types_1 = __webpack_require__(17);
var component_builder_1 = __webpack_require__(60);
var platform_1 = __webpack_require__(22);
var file_name_resolver_1 = __webpack_require__(56);
var ios = platform_1.platformNames.ios.toLowerCase();
var android = platform_1.platformNames.android.toLowerCase();
var defaultNameSpaceMatcher = /tns\.xsd$/i;
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(15);
}
}
function parse(value, context) {
if (typeof value === "function") {
return value();
} else {
var exports_1 = context ? getExports(context) : undefined;
var componentModule = parseInternal(value, exports_1);
if (componentModule) {
return componentModule.component;
}
return undefined;
}
}
exports.parse = parse;
function parseMultipleTemplates(value, context) {
var dummyComponent = "<ListView><ListView.itemTemplates>" + value + "</ListView.itemTemplates></ListView>";
return parseInternal(dummyComponent, context).component["itemTemplates"];
}
exports.parseMultipleTemplates = parseMultipleTemplates;
function parseInternal(value, context, uri, moduleNamePath) {
var start;
var ui;
var errorFormat = debug_1.debug && uri ? xml2ui.SourceErrorFormat(uri) : xml2ui.PositionErrorFormat;
var componentSourceTracker = debug_1.debug && uri ? xml2ui.ComponentSourceTracker(uri) : function() {};
(start = new xml2ui.XmlStringParser(errorFormat)).pipe(new xml2ui.PlatformFilter()).pipe(new xml2ui.XmlStateParser(ui = new xml2ui.ComponentParser(context, errorFormat, componentSourceTracker, moduleNamePath)));
start.parse(value);
return ui.rootComponentModule;
}
function loadCustomComponent(componentPath, componentName, attributes, context, parentPage) {
if (!parentPage && context) {
parentPage = context["_parentPage"];
delete context["_parentPage"];
}
var result;
componentPath = componentPath.replace("~/", "");
var moduleName = componentPath + "/" + componentName;
var fullComponentPathFilePathWithoutExt = componentPath;
if (!file_system_1.File.exists(componentPath) || componentPath === "." || componentPath === "./") {
fullComponentPathFilePathWithoutExt = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, componentPath, componentName);
}
var xmlFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "xml");
if (xmlFilePath) {
var jsFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "js");
var subExports = context;
if (global.moduleExists(moduleName)) {
subExports = global.loadModule(moduleName);
} else {
if (jsFilePath) {
subExports = global.loadModule(jsFilePath);
}
}
if (!subExports) {
subExports = {};
}
subExports["_parentPage"] = parentPage;
result = loadInternal(xmlFilePath, subExports);
if (types_1.isDefined(result) && types_1.isDefined(result.component) && types_1.isDefined(attributes)) {
for (var attr in attributes) {
component_builder_1.setPropertyValue(result.component, subExports, context, attr, attributes[attr]);
}
}
} else {
result = component_builder_1.getComponentModule(componentName, componentPath, attributes, context);
}
var cssFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "css");
if (cssFilePath) {
if (parentPage && typeof parentPage.addCssFile === "function") {
parentPage.addCssFile(cssFilePath);
} else {
ensureTrace();
trace.write("CSS file found but no page specified. Please specify page in the options!", trace.categories.Error, trace.messageType.error);
}
}
return result;
}
function load(pathOrOptions, context) {
var viewToReturn;
var componentModule;
if (!context) {
if (!types_1.isString(pathOrOptions)) {
var options = pathOrOptions;
componentModule = loadCustomComponent(options.path, options.name, options.attributes, options.exports, options.page);
} else {
var path_1 = pathOrOptions;
componentModule = loadInternal(path_1);
}
} else {
var path_2 = pathOrOptions;
componentModule = loadInternal(path_2, context);
}
if (componentModule) {
viewToReturn = componentModule.component;
}
return viewToReturn;
}
exports.load = load;
function loadPage(moduleNamePath, fileName, context) {
var componentModule;
if (file_system_1.File.exists(fileName)) {
var file = file_system_1.File.fromPath(fileName);
var onError = function(error) {
throw new Error("Error loading file " + fileName + " :" + error.message);
};
var text = file.readTextSync(onError);
componentModule = parseInternal(text, context, fileName, moduleNamePath);
}
if (componentModule && componentModule.component) {
componentModule.component.exports = context;
}
return componentModule.component;
}
exports.loadPage = loadPage;
function loadInternal(fileName, context) {
var componentModule;
if (file_system_1.File.exists(fileName)) {
var file = file_system_1.File.fromPath(fileName);
var onError = function(error) {
throw new Error("Error loading file " + fileName + " :" + error.message);
};
var text = file.readTextSync(onError);
componentModule = parseInternal(text, context, fileName);
}
if (componentModule && componentModule.component) {
componentModule.component.exports = context;
}
return componentModule;
}
function getExports(instance) {
var isView = !!instance._domId;
if (!isView) {
return instance.exports || instance;
}
var exportObject = instance.exports;
var parent = instance.parent;
while (exportObject === undefined && parent) {
exportObject = parent.exports;
parent = parent.parent;
}
return exportObject;
}
var xml2ui;
(function(xml2ui) {
var XmlProducerBase = function() {
function XmlProducerBase() {}
XmlProducerBase.prototype.pipe = function(next) {
this._next = next;
return next;
};
XmlProducerBase.prototype.next = function(args) {
this._next.parse(args);
};
return XmlProducerBase;
}();
xml2ui.XmlProducerBase = XmlProducerBase;
var XmlStringParser = function(_super) {
__extends(XmlStringParser, _super);
function XmlStringParser(error) {
var _this = _super.call(this) || this;
_this.error = error || PositionErrorFormat;
return _this;
}
XmlStringParser.prototype.parse = function(value) {
var _this = this;
var xmlParser = new xml.XmlParser(function(args) {
try {
_this.next(args);
} catch (e) {
throw _this.error(e, args.position);
}
}, function(e, p) {
throw _this.error(e, p);
}, true);
if (types_1.isString(value)) {
xmlParser.parse(value);
}
};
return XmlStringParser;
}(XmlProducerBase);
xml2ui.XmlStringParser = XmlStringParser;
function PositionErrorFormat(e, p) {
return new debug_1.ScopeError(e, "Parsing XML at " + p.line + ":" + p.column);
}
xml2ui.PositionErrorFormat = PositionErrorFormat;
function SourceErrorFormat(uri) {
return function(e, p) {
var source = p ? new debug_1.Source(uri, p.line, p.column) : new debug_1.Source(uri, -1, -1);
e = new debug_1.SourceError(e, source, "Building UI from XML.");
return e;
};
}
xml2ui.SourceErrorFormat = SourceErrorFormat;
function ComponentSourceTracker(uri) {
return function(component, p) {
if (!debug_1.Source.get(component)) {
var source = p ? new debug_1.Source(uri, p.line, p.column) : new debug_1.Source(uri, -1, -1);
debug_1.Source.set(component, source);
}
};
}
xml2ui.ComponentSourceTracker = ComponentSourceTracker;
var PlatformFilter = function(_super) {
__extends(PlatformFilter, _super);
function PlatformFilter() {
return _super !== null && _super.apply(this, arguments) || this;
}
PlatformFilter.prototype.parse = function(args) {
if (args.eventType === xml.ParserEventType.StartElement) {
if (PlatformFilter.isPlatform(args.elementName)) {
if (this.currentPlatformContext) {
throw new Error("Already in '" + this.currentPlatformContext + "' platform context and cannot switch to '" + args.elementName + "' platform! Platform tags cannot be nested.");
}
this.currentPlatformContext = args.elementName;
return;
}
}
if (args.eventType === xml.ParserEventType.EndElement) {
if (PlatformFilter.isPlatform(args.elementName)) {
this.currentPlatformContext = undefined;
return;
}
}
if (this.currentPlatformContext && !PlatformFilter.isCurentPlatform(this.currentPlatformContext)) {
return;
}
this.next(args);
};
PlatformFilter.isPlatform = function(value) {
if (value) {
var toLower = value.toLowerCase();
return toLower === android || toLower === ios;
}
return false;
};
PlatformFilter.isCurentPlatform = function(value) {
return value && value.toLowerCase() === platform_1.device.os.toLowerCase();
};
return PlatformFilter;
}(XmlProducerBase);
xml2ui.PlatformFilter = PlatformFilter;
var XmlArgsReplay = function(_super) {
__extends(XmlArgsReplay, _super);
function XmlArgsReplay(args, errorFormat) {
var _this = _super.call(this) || this;
_this.args = args;
_this.error = errorFormat;
return _this;
}
XmlArgsReplay.prototype.replay = function() {
var _this = this;
this.args.forEach(function(args) {
try {
_this.next(args);
} catch (e) {
throw _this.error(e, args.position);
}
});
};
return XmlArgsReplay;
}(XmlProducerBase);
xml2ui.XmlArgsReplay = XmlArgsReplay;
var XmlStateParser = function() {
function XmlStateParser(state) {
this.state = state;
}
XmlStateParser.prototype.parse = function(args) {
this.state = this.state.parse(args);
};
return XmlStateParser;
}();
xml2ui.XmlStateParser = XmlStateParser;
var TemplateParser = function() {
function TemplateParser(parent, templateProperty, setTemplateProperty) {
if (setTemplateProperty === void 0) {
setTemplateProperty = true;
}
this.parent = parent;
this._context = templateProperty.context;
this._recordedXmlStream = new Array();
this._templateProperty = templateProperty;
this._nestingLevel = 0;
this._state = 0;
this._setTemplateProperty = setTemplateProperty;
}
TemplateParser.prototype.parse = function(args) {
if (args.eventType === xml.ParserEventType.StartElement) {
this.parseStartElement(args.prefix, args.namespace, args.elementName, args.attributes);
} else if (args.eventType === xml.ParserEventType.EndElement) {
this.parseEndElement(args.prefix, args.elementName);
}
this._recordedXmlStream.push(args);
return this._state === 2 ? this.parent : this;
};
Object.defineProperty(TemplateParser.prototype, "elementName", {
get: function() {
return this._templateProperty.elementName;
},
enumerable: true,
configurable: true
});
TemplateParser.prototype.parseStartElement = function(prefix, namespace, elementName, attributes) {
if (this._state === 0) {
this._state = 1;
} else if (this._state === 2) {
throw new Error("Template must have exactly one root element but multiple elements were found.");
}
this._nestingLevel++;
};
TemplateParser.prototype.parseEndElement = function(prefix, elementName) {
if (this._state === 0) {
throw new Error("Template must have exactly one root element but none was found.");
} else if (this._state === 2) {
throw new Error("No more closing elements expected for this template.");
}
this._nestingLevel--;
if (this._nestingLevel === 0) {
this._state = 2;
if (this._setTemplateProperty && this._templateProperty.name in this._templateProperty.parent.component) {
var template = this._build();
this._templateProperty.parent.component[this._templateProperty.name] = template;
}
}
};
TemplateParser.prototype._build = function() {
var _this = this;
var context = this._context;
var errorFormat = this._templateProperty.errorFormat;
var sourceTracker = this._templateProperty.sourceTracker;
var template = function() {
var start;
var ui;
(start = new xml2ui.XmlArgsReplay(_this._recordedXmlStream, errorFormat)).pipe(new XmlStateParser(ui = new ComponentParser(context, errorFormat, sourceTracker)));
start.replay();
return ui.rootComponentModule.component;
};
return template;
};
return TemplateParser;
}();
xml2ui.TemplateParser = TemplateParser;
var MultiTemplateParser = function() {
function MultiTemplateParser(parent, templateProperty) {
this.parent = parent;
this.templateProperty = templateProperty;
this._childParsers = new Array();
}
MultiTemplateParser.prototype.parse = function(args) {
if (args.eventType === xml.ParserEventType.StartElement && args.elementName === "template") {
var childParser = new TemplateParser(this, this.templateProperty, false);
childParser["key"] = args.attributes["key"];
this._childParsers.push(childParser);
return childParser;
}
if (args.eventType === xml.ParserEventType.EndElement) {
var name_1 = ComponentParser.getComplexPropertyName(args.elementName);
if (name_1 === this.templateProperty.name) {
var templates = new Array();
for (var i = 0; i < this._childParsers.length; i++) {
templates.push({
key: this._childParsers[i]["key"],
createView: this._childParsers[i]._build()
});
}
this.templateProperty.parent.component[this.templateProperty.name] = templates;
return this.parent;
}
}
return this;
};
return MultiTemplateParser;
}();
xml2ui.MultiTemplateParser = MultiTemplateParser;
var ComponentParser = function() {
function ComponentParser(context, errorFormat, sourceTracker, moduleNamePath) {
this.moduleNamePath = moduleNamePath;
this.parents = new Array();
this.complexProperties = new Array();
this.context = context;
this.error = errorFormat;
this.sourceTracker = sourceTracker;
}
ComponentParser.prototype.parse = function(args) {
var parent = this.parents[this.parents.length - 1];
var complexProperty = this.complexProperties[this.complexProperties.length - 1];
if (args.eventType === xml.ParserEventType.StartElement) {
if (ComponentParser.isComplexProperty(args.elementName)) {
var name = ComponentParser.getComplexPropertyName(args.elementName);
this.complexProperties.push({
parent: parent,
name: name,
items: []
});
if (ComponentParser.isKnownTemplate(name, parent.exports)) {
return new TemplateParser(this, {
context: (parent ? getExports(parent.component) : null) || this.context,
parent: parent,
name: name,
elementName: args.elementName,
templateItems: [],
errorFormat: this.error,
sourceTracker: this.sourceTracker
});
}
if (ComponentParser.isKnownMultiTemplate(name, parent.exports)) {
return new MultiTemplateParser(this, {
context: (parent ? getExports(parent.component) : null) || this.context,
parent: parent,
name: name,
elementName: args.elementName,
templateItems: [],
errorFormat: this.error,
sourceTracker: this.sourceTracker
});
}
} else {
var componentModule;
if (args.prefix && args.namespace) {
componentModule = loadCustomComponent(args.namespace, args.elementName, args.attributes, this.context, this.currentRootView);
} else {
var namespace = args.namespace;
if (defaultNameSpaceMatcher.test(namespace || "")) {
namespace = undefined;
}
componentModule = component_builder_1.getComponentModule(args.elementName, namespace, args.attributes, this.context, this.moduleNamePath);
}
if (componentModule) {
this.sourceTracker(componentModule.component, args.position);
if (parent) {
if (complexProperty) {
ComponentParser.addToComplexProperty(parent, complexProperty, componentModule);
} else if (parent.component._addChildFromBuilder) {
parent.component._addChildFromBuilder(args.elementName, componentModule.component);
}
} else if (this.parents.length === 0) {
this.rootComponentModule = componentModule;
if (this.rootComponentModule) {
this.currentRootView = this.rootComponentModule.component;
if (this.currentRootView.exports) {
this.context = this.currentRootView.exports;
}
}
}
this.parents.push(componentModule);
}
}
} else if (args.eventType === xml.ParserEventType.EndElement) {
if (ComponentParser.isComplexProperty(args.elementName)) {
if (complexProperty) {
if (parent && parent.component._addArrayFromBuilder) {
parent.component._addArrayFromBuilder(complexProperty.name, complexProperty.items);
complexProperty.items = [];
}
}
this.complexProperties.pop();
} else {
this.parents.pop();
}
}
return this;
};
ComponentParser.isComplexProperty = function(name) {
return types_1.isString(name) && name.indexOf(".") !== -1;
};
ComponentParser.getComplexPropertyName = function(fullName) {
var name;
if (types_1.isString(fullName)) {
var names = fullName.split(".");
name = names[names.length - 1];
}
return name;
};
ComponentParser.isKnownTemplate = function(name, exports) {
return ComponentParser.KNOWNTEMPLATES in exports && exports[ComponentParser.KNOWNTEMPLATES] && name in exports[ComponentParser.KNOWNTEMPLATES];
};
ComponentParser.isKnownMultiTemplate = function(name, exports) {
return ComponentParser.KNOWNMULTITEMPLATES in exports && exports[ComponentParser.KNOWNMULTITEMPLATES] && name in exports[ComponentParser.KNOWNMULTITEMPLATES];
};
ComponentParser.addToComplexProperty = function(parent, complexProperty, elementModule) {
var parentComponent = parent.component;
if (ComponentParser.isKnownCollection(complexProperty.name, parent.exports)) {
complexProperty.items.push(elementModule.component);
} else if (parentComponent._addChildFromBuilder) {
parentComponent._addChildFromBuilder(complexProperty.name, elementModule.component);
} else {
parentComponent[complexProperty.name] = elementModule.component;
}
};
ComponentParser.isKnownCollection = function(name, context) {
return ComponentParser.KNOWNCOLLECTIONS in context && context[ComponentParser.KNOWNCOLLECTIONS] && name in context[ComponentParser.KNOWNCOLLECTIONS];
};
return ComponentParser;
}();
ComponentParser.KNOWNCOLLECTIONS = "knownCollections";
ComponentParser.KNOWNTEMPLATES = "knownTemplates";
ComponentParser.KNOWNMULTITEMPLATES = "knownMultiTemplates";
xml2ui.ComponentParser = ComponentParser;
})(xml2ui || (xml2ui = {}));
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var easysax = __webpack_require__(59);
var ParserEventType = function() {
function ParserEventType() {}
return ParserEventType;
}();
ParserEventType.StartElement = "StartElement";
ParserEventType.EndElement = "EndElement";
ParserEventType.Text = "Text";
ParserEventType.CDATA = "CDATA";
ParserEventType.Comment = "Comment";
exports.ParserEventType = ParserEventType;
var ParserEvent = function() {
function ParserEvent(eventType, position, prefix, namespace, elementName, attributes, data) {
this._eventType = eventType;
this._position = position;
this._prefix = prefix;
this._namespace = namespace;
this._elementName = elementName;
this._attributes = attributes;
this._data = data;
}
ParserEvent.prototype.toString = function() {
return JSON.stringify({
eventType: this.eventType,
position: this.position,
prefix: this.prefix,
namespace: this.namespace,
elementName: this.elementName,
attributes: this.attributes,
data: this.data
});
};
Object.defineProperty(ParserEvent.prototype, "eventType", {
get: function() {
return this._eventType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "position", {
get: function() {
return this._position;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "prefix", {
get: function() {
return this._prefix;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "namespace", {
get: function() {
return this._namespace;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "elementName", {
get: function() {
return this._elementName;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "attributes", {
get: function() {
return this._attributes;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "data", {
get: function() {
return this._data;
},
enumerable: true,
configurable: true
});
return ParserEvent;
}();
exports.ParserEvent = ParserEvent;
var _ampCodes;
var _entitySearchRegEx = /&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/gi;
function _generateAmpMap() {
var objCodes = {
Tab: 9,
NewLine: 10,
excl: 33,
quot: 34,
QUOT: 34,
num: 35,
dollar: 36,
percent: 37,
amp: 38,
AMP: 38,
apos: 39,
lpar: 40,
rpar: 41,
ast: 42,
midast: 42,
plus: 43,
comma: 44,
period: 46,
sol: 47,
colon: 58,
semi: 59,
lt: 60,
LT: 60,
equals: 61,
gt: 62,
GT: 62,
quest: 63,
commat: 64,
lsqb: 91,
lbrack: 91,
bsol: 92,
rsqb: 92,
rbrack: 92,
Hat: 94,
lowbar: 95,
grave: 96,
DiacriticalGrave: 96,
lcub: 123,
lbrace: 123,
verbar: 124,
vert: 124,
VerticalLine: 124,
rcub: 125,
rbrace: 125,
nbsp: 160,
iexcl: 161,
cent: 162,
pound: 163,
curren: 164,
yen: 165,
brvbar: 166,
brkbar: 166,
sect: 167,
uml: 168,
copy: 169,
ordf: 170,
laquo: 171,
not: 172,
shy: 173,
reg: 174,
macr: 175,
hibar: 175,
deg: 176,
plusmn: 177,
sup2: 178,
sup3: 179,
acute: 180,
micro: 181,
para: 182,
middot: 183,
cedil: 184,
sup1: 185,
ordm: 186,
raquo: 187,
frac14: 188,
frac12: 189,
frac34: 190,
iquest: 191,
Agrave: 192,
Aacute: 193,
Acirc: 194,
Atilde: 195,
Auml: 196,
Aring: 197,
AElig: 198,
Ccedil: 199,
Egrave: 200,
Eacute: 201,
Ecirc: 202,
Euml: 203,
Igrave: 204,
Iacute: 205,
Icirc: 206,
Iuml: 207,
ETH: 208,
Dstrok: 208,
Ntilde: 209,
Ograve: 210,
Oacute: 211,
Ocirc: 212,
Otilde: 213,
Ouml: 214,
times: 215,
Oslash: 216,
Ugrave: 217,
Uacute: 218,
Ucirc: 219,
Uuml: 220,
Yacute: 221,
THORN: 222,
szlig: 223,
agrave: 224,
aacute: 225,
acirc: 226,
atilde: 227,
auml: 228,
aring: 229,
aelig: 230,
ccedil: 231,
egrave: 232,
eacute: 233,
ecirc: 234,
euml: 235,
igrave: 236,
iacute: 237,
icirc: 238,
iuml: 239,
eth: 240,
ntilde: 241,
ograve: 242,
oacute: 243,
ocirc: 244,
otilde: 245,
ouml: 246,
divide: 247,
oslash: 248,
ugrave: 249,
uacute: 250,
ucirc: 251,
uuml: 252,
yacute: 253,
thorn: 254,
yuml: 255,
fnof: 402,
imped: 437,
gacute: 501,
jmath: 567,
circ: 710,
caron: 711,
Hacek: 711,
breve: 728,
Breve: 728,
dot: 729,
DiacriticalDot: 729,
ring: 730,
ogon: 731,
tilde: 732,
DiacriticalTilde: 732,
dblac: 733,
DiacriticalDoubleAcute: 733,
DownBreve: 785,
UnderBar: 818,
Alpha: 913,
Beta: 914,
Gamma: 915,
Delta: 916,
Epsilon: 917,
Zeta: 918,
Eta: 919,
Theta: 920,
Iota: 921,
Kappa: 922,
Lambda: 923,
Mu: 924,
Nu: 925,
Xi: 926,
Omicron: 927,
Pi: 928,
Rho: 929,
Sigma: 931,
Tau: 932,
Upsilon: 933,
Phi: 934,
Chi: 935,
Psi: 936,
Omega: 937,
alpha: 945,
beta: 946,
gamma: 947,
delta: 948,
epsilon: 949,
epsiv: 949,
varepsilon: 949,
zeta: 950,
eta: 951,
theta: 952,
iota: 953,
kappa: 954,
lambda: 955,
mu: 956,
nu: 957,
xi: 958,
omicron: 959,
pi: 960,
rho: 961,
sigmaf: 962,
sigmav: 962,
varsigma: 962,
sigma: 963,
tau: 964,
upsilon: 965,
phi: 966,
chi: 967,
psi: 968,
omega: 969,
thetav: 977,
vartheta: 977,
thetasym: 977,
Upsi: 978,
upsih: 978,
straightphi: 981,
piv: 982,
varpi: 982,
Gammad: 988,
gammad: 989,
digamma: 989,
kappav: 1008,
varkappa: 1008,
rhov: 1009,
varrho: 1009,
epsi: 1013,
straightepsilon: 1013,
bepsi: 1014,
backepsilon: 1014,
euro: 8364,
trade: 8482,
TRADE: 8482,
forall: 8704,
part: 8706,
larr: 8592,
rarr: 8593,
hyphen: 8208,
dash: 8208,
ndash: 8211,
mdash: 8212,
horbar: 8213,
Vert: 8214,
Verbar: 8214,
lsquo: 8216,
OpenCurlyQuote: 8216,
rsquo: 8217,
rsquor: 8217,
CloseCurlyQuote: 8217,
lsquor: 8218,
sbquo: 8218,
ldquo: 8220,
OpenCurlyDoubleQuote: 8220,
rdquo: 8221,
rdquor: 8221,
CloseCurlyDoubleQuote: 8221,
ldquor: 8222,
bdquo: 8222,
dagger: 8224,
Dagger: 8225,
ddagger: 8225,
bull: 8226,
bullet: 8226,
nldr: 8229,
hellip: 8230,
mldr: 8230,
hybull: 8259,
tdot: 8411,
TripleDot: 8411,
DotDot: 8412,
star: 9734,
phone: 9742,
spades: 9824,
clubs: 9827,
hearts: 9829,
diams: 9830,
female: 9792,
male: 9794,
check: 10003,
checkmark: 10003,
cross: 10007,
VerticalSeparator: 10072,
EmptySmallSquare: 9723,
FilledSmallSquare: 9724,
starf: 9733,
bigstar: 9733,
square: 9633,
squ: 9633,
Square: 9633
};
var ampCodes = new Map();
for (var key in objCodes) {
if (objCodes.hasOwnProperty(key)) {
ampCodes.set(key, objCodes[key]);
}
}
return ampCodes;
}
if (true) {
_ampCodes = _generateAmpMap();
}
function _HandleAmpEntities(found, decimalValue, hexValue, wordValue) {
if (wordValue) {
if (!_ampCodes) {
_ampCodes = _generateAmpMap();
}
var res = _ampCodes.get(wordValue);
if (res) {
return String.fromCharCode(res);
}
return found;
}
if (decimalValue) {
return String.fromCharCode(parseInt(decimalValue, 10));
}
return String.fromCharCode(parseInt(hexValue, 16));
}
var XmlParser = function() {
function XmlParser(onEvent, onError, processNamespaces) {
this._processNamespaces = processNamespaces;
this._parser = new easysax.EasySAXParser();
var that = this;
this._parser.on("startNode", function(elem, attr, uq, tagend, str, pos) {
var attributes = attr();
if (attributes === true) {
attributes = undefined;
}
if (attributes) {
var key;
for (key in attributes) {
if (attributes.hasOwnProperty(key)) {
attributes[key] = XmlParser._dereferenceEntities(attributes[key]);
}
}
}
var prefix = undefined;
var namespace = undefined;
var name = elem;
if (that._processNamespaces) {
var stackEntry = XmlParser._getNamespacesStackEntry(attributes);
that._namespaceStack.push(stackEntry);
var resolved = that._resolveNamespace(name);
prefix = resolved.prefix;
namespace = resolved.namespace;
name = resolved.name;
}
onEvent(new ParserEvent(ParserEventType.StartElement, pos(), prefix, namespace, name, attributes, undefined));
});
this._parser.on("textNode", function(text, uq, pos) {
var data = uq(XmlParser._dereferenceEntities(text));
onEvent(new ParserEvent(ParserEventType.Text, pos(), undefined, undefined, undefined, undefined, data));
});
this._parser.on("endNode", function(elem, uq, tagstart, str, pos) {
var prefix = undefined;
var namespace = undefined;
var name = elem;
if (that._processNamespaces) {
var resolved = that._resolveNamespace(name);
prefix = resolved.prefix;
namespace = resolved.namespace;
name = resolved.name;
}
onEvent(new ParserEvent(ParserEventType.EndElement, pos(), prefix, namespace, name, undefined, undefined));
if (that._processNamespaces) {
that._namespaceStack.pop();
}
});
this._parser.on("cdata", function(data, res, pos) {
onEvent(new ParserEvent(ParserEventType.CDATA, pos(), undefined, undefined, undefined, undefined, data));
});
this._parser.on("comment", function(text, uq, pos) {
onEvent(new ParserEvent(ParserEventType.Comment, pos(), undefined, undefined, undefined, undefined, text));
});
if (onError) {
this._parser.on("error", function(msg, pos) {
onError(new Error(msg), pos());
});
}
}
Object.defineProperty(XmlParser.prototype, "angularSyntax", {
get: function() {
return this._parser.angularSyntax;
},
set: function(value) {
this._parser.angularSyntax = value;
},
enumerable: true,
configurable: true
});
XmlParser.prototype.parse = function(xmlString) {
if (this._processNamespaces) {
this._namespaceStack = [];
}
this._parser.parse(xmlString);
};
XmlParser._getNamespacesStackEntry = function(attributes) {
var stackEntry = {};
if (!attributes) {
return stackEntry;
}
for (var key in attributes) {
if (!attributes.hasOwnProperty(key)) {
continue;
}
var attributeName = key;
if (attributeName.indexOf("xmlns") !== 0) {
continue;
}
var namespacePrefix = "";
if (attributeName.indexOf(":") !== -1) {
namespacePrefix = attributeName.split(":")[1];
}
stackEntry[namespacePrefix] = attributes[key];
}
return stackEntry;
};
XmlParser.prototype._resolveNamespace = function(fullName) {
var result = {
prefix: undefined,
namespace: undefined,
name: undefined
};
result.prefix = "";
if (fullName.indexOf(":") !== -1) {
var split = fullName.split(":");
result.prefix = split[0];
result.name = split[1];
} else {
result.name = fullName;
}
var i;
var stackEntry;
for (i = this._namespaceStack.length - 1; i >= 0; i--) {
stackEntry = this._namespaceStack[i];
for (var key in stackEntry) {
if (!stackEntry.hasOwnProperty(key)) {
continue;
}
if (result.prefix === key) {
result.namespace = stackEntry[key];
return result;
}
}
}
return result;
};
XmlParser._dereferenceEntities = function(s) {
s = String(s);
if (s.length > 3 && s.indexOf("&") !== -1) {
s = s.replace(_entitySearchRegEx, _HandleAmpEntities);
}
return s;
};
return XmlParser;
}();
exports.XmlParser = XmlParser;
}, function(module, exports, __webpack_require__) {
if (true) {
module.exports.EasySAXParser = EasySAXParser;
}
function EasySAXParser() {
"use strict";
if (!this) return null;
this.angularSyntax = false;
function nullFunc() {}
this.onTextNode = nullFunc;
this.onStartNode = nullFunc;
this.onEndNode = nullFunc;
this.onCDATA = nullFunc;
this.onError = nullFunc;
this.onComment = null;
this.onQuestion = null;
this.onAttention = null;
this.is_onComment = this.is_onQuestion = this.is_onAttention = false;
this.isNamespace = false;
this.useNS = null;
this.default_xmlns = null;
this.xmlns = null;
this.nsmatrix = {
xmlns: this.xmlns
};
this.hasSurmiseNS = false;
this.attr_string = "";
this.attr_posstart = 0;
this.attr_res;
}
EasySAXParser.prototype.on = function(name, cb) {
if (typeof cb !== "function") {
if (cb !== null) return;
}
switch (name) {
case "error":
this.onError = cb || nullFunc;
break;

case "startNode":
this.onStartNode = cb || nullFunc;
break;

case "endNode":
this.onEndNode = cb || nullFunc;
break;

case "textNode":
this.onTextNode = cb || nullFunc;
break;

case "cdata":
this.onCDATA = cb || nullFunc;
break;

case "comment":
this.onComment = cb;
this.is_onComment = !!cb;
break;

case "question":
this.onQuestion = cb;
this.is_onQuestion = !!cb;
break;

case "attention":
this.onAttention = cb;
this.is_onAttention = !!cb;
break;
}
};
EasySAXParser.prototype.ns = function(root, ns) {
if (!root || typeof root !== "string" || !ns) {
return;
}
var u, x = {}, ok, v, i;
for (i in ns) {
v = ns[i];
if (typeof v === "string") {
if (root === v) ok = true;
x[i] = v;
}
}
if (ok) {
this.isNamespace = true;
this.default_xmlns = root;
this.useNS = x;
}
};
EasySAXParser.prototype.parse = function(xml) {
if (typeof xml !== "string") {
return;
}
if (this.isNamespace) {
this.nsmatrix = {
xmlns: this.default_xmlns
};
parse(xml);
this.nsmatrix = false;
} else {
parse(xml);
}
this.attr_res = true;
};
var xharsQuot = {
constructor: false,
hasOwnProperty: false,
isPrototypeOf: false,
propertyIsEnumerable: false,
toLocaleString: false,
toString: false,
valueOf: false,
quot: '"',
QUOT: '"',
amp: "&",
AMP: "&",
nbsp: " ",
apos: "'",
lt: "<",
LT: "<",
gt: ">",
GT: ">",
copy: "©",
laquo: "«",
raquo: "»",
reg: "®",
deg: "°",
plusmn: "±",
sup2: "²",
sup3: "³",
micro: "µ",
para: "¶"
};
function rpEntities(s, d, x, z) {
if (z) {
return xharsQuot[z] || "";
}
if (d) {
return String.fromCharCode(d);
}
return String.fromCharCode(parseInt(x, 16));
}
function unEntities(s, i) {
s = String(s);
if (s.length > 3 && s.indexOf("&") !== -1) {
if (s.indexOf("&gt;") !== -1) s = s.replace(/&gt;/g, ">");
if (s.indexOf("&lt;") !== -1) s = s.replace(/&lt;/g, "<");
if (s.indexOf("&quot;") !== -1) s = s.replace(/&quot;/g, '"');
if (s.indexOf("&") !== -1) {
s = s.replace(/&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/gi, rpEntities);
}
}
return s;
}
EasySAXParser.prototype.allowedAngularAttributeChars = function(w) {
if (!this.angularSyntax) {
return false;
} else {
return w === 40 || w === 41 || w === 91 || w === 93 || w === 94 || w === 35;
}
};
EasySAXParser.prototype.getAttrs = function() {
if (this.attr_res !== null) {
return this.attr_res;
}
var u, res = {}, s = this.attr_string, i = this.attr_posstart, l = s.length, attr_list = this.hasSurmiseNS ? [] : false, name, value = "", ok = false, noValueAttribute = false, j, w, nn, n, hasNewMatrix, alias, newalias;
aa: for (;i < l; i++) {
w = s.charCodeAt(i);
if (w === 32 || w < 14 && w > 8) {
continue;
}
if (w < 65 && !this.allowedAngularAttributeChars(w) || w > 122 || w > 90 && w < 97 && !this.allowedAngularAttributeChars(w)) {
return this.attr_res = false;
}
for (j = i + 1; j < l; j++) {
w = s.charCodeAt(j);
if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w === 46) {
if (noValueAttribute) {
j--;
break;
} else {
continue;
}
}
if (this.allowedAngularAttributeChars(w)) {
continue;
}
if (w === 32 || w > 8 && w < 14) {
noValueAttribute = true;
continue;
} else if (w === 61) {
noValueAttribute = false;
break;
} else {
if (!noValueAttribute) return this.attr_res = false;
}
break;
}
name = s.substring(i, j).trim();
ok = true;
if (name === "xmlns:xmlns") {
return this.attr_res = false;
}
w = s.charCodeAt(j + 1);
while (w = s.charCodeAt(j + 1)) {
if (w === 32 || w > 8 && w < 14) {
j++;
} else {
break;
}
}
if (!noValueAttribute) {
if (w === 34) {
j = s.indexOf('"', i = j + 2);
} else {
if (w === 39) {
j = s.indexOf("'", i = j + 2);
} else {
return this.attr_res = false;
}
}
}
if (j === -1) {
return this.attr_res = false;
}
if (j + 1 < l && !noValueAttribute) {
w = s.charCodeAt(j + 1);
if (w > 32 || w < 9 || w < 32 && w > 13) {
return this.attr_res = false;
}
}
if (noValueAttribute) {
value = "";
} else {
value = s.substring(i, j);
}
i = j;
if (this.isNamespace) {
if (this.hasSurmiseNS) {
if (newalias = name === "xmlns" ? "xmlns" : name.charCodeAt(0) === 120 && name.substr(0, 6) === "xmlns:" && name.substr(6)) {
alias = this.useNS[unEntities(value)];
if (alias) {
if (this.nsmatrix[newalias] !== alias) {
if (!hasNewMatrix) {
hasNewMatrix = true;
nn = {};
for (n in this.nsmatrix) nn[n] = this.nsmatrix[n];
this.nsmatrix = nn;
}
this.nsmatrix[newalias] = alias;
}
} else {
if (this.nsmatrix[newalias]) {
if (!hasNewMatrix) {
hasNewMatrix = true;
nn = {};
for (n in this.nsmatrix) nn[n] = this.nsmatrix[n];
this.nsmatrix = nn;
}
this.nsmatrix[newalias] = false;
}
}
res[name] = value;
continue;
}
attr_list.push(name, value);
continue;
}
w = name.length;
while (--w) {
if (name.charCodeAt(w) === 58) {
if (w = this.nsmatrix[name.substring(0, w)]) {
res[w + name.substr(w)] = value;
}
continue aa;
}
}
}
res[name] = value;
noValueAttribute = false;
}
if (!ok) {
return this.attr_res = true;
}
if (this.hasSurmiseNS) {
bb: for (i = 0, l = attr_list.length; i < l; i++) {
name = attr_list[i++];
w = name.length;
while (--w) {
if (name.charCodeAt(w) === 58) {
if (w = this.nsmatrix[name.substring(0, w)]) {
res[w + name.substr(w)] = attr_list[i];
}
continue bb;
break;
}
}
res[name] = attr_list[i];
}
}
return this.attr_res = res;
};
EasySAXParser.prototype.parse = function(xml) {
var u, xml = String(xml), nodestack = [], stacknsmatrix = [], elem, tagend = false, tagstart = false, j = 0, i = 0, k = 0, len, x, y, q, w, xmlns, stopIndex = 0, stop, _nsmatrix, ok, pos = 0, ln = 0, lnStart = -2, lnEnd = -1;
len = xml.length;
function getStringNode() {
return xml.substring(i, j + 1);
}
function findLineAndColumnFromPos() {
while (lnStart < lnEnd && lnEnd < pos) {
lnStart = lnEnd;
lnEnd = xml.indexOf("\n", lnEnd + 1);
++ln;
}
return {
line: ln,
column: pos - lnStart
};
}
function position(p) {
pos = p;
return findLineAndColumnFromPos;
}
while (j !== -1) {
stop = stopIndex > 0;
if (xml.charCodeAt(j) === 60) {
i = j;
} else {
i = xml.indexOf("<", j);
}
if (i === -1) {
if (nodestack.length) {
this.onError("end file", position(j));
return;
}
return;
}
if (j !== i && !stop) {
ok = this.onTextNode(xml.substring(j, i), unEntities, position(j));
if (ok === false) return;
}
w = xml.charCodeAt(i + 1);
if (w === 33) {
w = xml.charCodeAt(i + 2);
if (w === 91 && xml.substr(i + 3, 6) === "CDATA[") {
j = xml.indexOf("]]>", i);
if (j === -1) {
this.onError("cdata", position(i));
return;
}
if (!stop) {
ok = this.onCDATA(xml.substring(i + 9, j), false, position(i));
if (ok === false) return;
}
j += 3;
continue;
}
if (w === 45 && xml.charCodeAt(i + 3) === 45) {
j = xml.indexOf("--\x3e", i);
if (j === -1) {
this.onError("expected --\x3e", position(i));
return;
}
if (this.is_onComment && !stop) {
ok = this.onComment(xml.substring(i + 4, j), unEntities, position(i));
if (ok === false) return;
}
j += 3;
continue;
}
j = xml.indexOf(">", i + 1);
if (j === -1) {
this.onError('expected ">"', position(i + 1));
return;
}
if (this.is_onAttention && !stop) {
ok = this.onAttention(xml.substring(i, j + 1), unEntities, position(i));
if (ok === false) return;
}
j += 1;
continue;
} else {
if (w === 63) {
j = xml.indexOf("?>", i);
if (j === -1) {
this.onError("...?>", position(i));
return;
}
if (this.is_onQuestion) {
ok = this.onQuestion(xml.substring(i, j + 2), position(i));
if (ok === false) return;
}
j += 2;
continue;
}
}
var inside = false;
for (k = i, j = -1; k < len; k++) {
var c = xml.charCodeAt(k);
if (!inside) {
if (c === 34) {
inside = c;
} else if (c === 39) {
inside = c;
} else if (c === 62) {
j = k;
break;
}
} else {
if (c === inside) {
inside = false;
}
}
}
if (j == -1) {
this.onError("...>", position(i + 1));
return;
}
this.attr_res = true;
if (w === 47) {
tagstart = false;
tagend = true;
x = elem = nodestack.pop();
q = i + 2 + x.length;
if (xml.substring(i + 2, q) !== x) {
this.onError("close tagname", position(i + 2));
return;
}
for (;q < j; q++) {
w = xml.charCodeAt(q);
if (w === 32 || w > 8 && w < 14) {
continue;
}
this.onError("close tag", position(i + 2));
return;
}
} else {
if (xml.charCodeAt(j - 1) === 47) {
x = elem = xml.substring(i + 1, j - 1);
tagstart = true;
tagend = true;
} else {
x = elem = xml.substring(i + 1, j);
tagstart = true;
tagend = false;
}
if (!(w > 96 && w < 123 || w > 64 && w < 91)) {
this.onError("first char nodeName", position(i + 1));
return;
}
for (q = 1, y = x.length; q < y; q++) {
w = x.charCodeAt(q);
if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w === 46) {
continue;
}
if (w === 32 || w < 14 && w > 8) {
elem = x.substring(0, q);
this.attr_res = null;
break;
}
this.onError("invalid nodeName", position(i + 1));
return;
}
if (!tagend) {
nodestack.push(elem);
}
}
if (this.isNamespace) {
if (stop) {
if (tagend) {
if (!tagstart) {
if (--stopIndex === 0) {
this.nsmatrix = stacknsmatrix.pop();
}
}
} else {
stopIndex += 1;
}
j += 1;
continue;
}
_nsmatrix = this.nsmatrix;
if (!tagend) {
stacknsmatrix.push(this.nsmatrix);
if (this.attr_res !== true) {
if (this.hasSurmiseNS = x.indexOf("xmlns", q) !== -1) {
this.attr_string = x;
this.attr_posstart = q;
this.getAttrs();
this.hasSurmiseNS = false;
}
}
}
w = elem.indexOf(":");
if (w !== -1) {
xmlns = this.nsmatrix[elem.substring(0, w)];
elem = elem.substr(w + 1);
} else {
xmlns = this.nsmatrix.xmlns;
}
if (!xmlns) {
if (tagend) {
if (tagstart) {
this.nsmatrix = _nsmatrix;
} else {
this.nsmatrix = stacknsmatrix.pop();
}
} else {
stopIndex = 1;
this.attr_res = true;
}
j += 1;
continue;
}
elem = xmlns + ":" + elem;
}
if (tagstart) {
this.attr_string = x;
this.attr_posstart = q;
var that = this;
ok = this.onStartNode(elem, function() {
return that.getAttrs();
}, unEntities, tagend, getStringNode, position(i));
if (ok === false) {
return;
}
this.attr_res = true;
}
if (tagend) {
ok = this.onEndNode(elem, unEntities, tagstart, getStringNode, position(i));
if (ok === false) {
return;
}
if (this.isNamespace) {
if (tagstart) {
this.nsmatrix = _nsmatrix;
} else {
this.nsmatrix = stacknsmatrix.pop();
}
}
}
j += 1;
}
};
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var bindable_1 = __webpack_require__(37);
var file_system_1 = __webpack_require__(19);
var binding_builder_1 = __webpack_require__(39);
var file_name_resolver_1 = __webpack_require__(56);
var platform = __webpack_require__(22);
var UI_PATH = "ui/";
var MODULES = {
TabViewItem: "ui/tab-view",
FormattedString: "text/formatted-string",
Span: "text/span",
ActionItem: "ui/action-bar",
NavigationButton: "ui/action-bar",
SegmentedBarItem: "ui/segmented-bar"
};
var CODEFILE = "codeFile";
var CSSFILE = "cssFile";
var IMPORT = "import";
function getComponentModule(elementName, namespace, attributes, exports, moduleNamePath) {
var instance;
var instanceModule;
var componentModule;
elementName = elementName.split("-").map(function(s) {
return s[0].toUpperCase() + s.substring(1);
}).join("");
var moduleId = MODULES[elementName] || UI_PATH + (elementName.toLowerCase().indexOf("layout") !== -1 ? "layouts/" : "") + elementName.split(/(?=[A-Z])/).join("-").toLowerCase();
try {
if (typeof namespace === "string") {
if (global.moduleExists(namespace)) {
moduleId = namespace;
} else {
var pathInsideTNSModules = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, "tns_modules", namespace);
try {
instanceModule = global.require(pathInsideTNSModules);
moduleId = pathInsideTNSModules;
} catch (e) {
moduleId = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, namespace);
}
}
}
if (!instanceModule) {
instanceModule = global.loadModule(moduleId);
}
var instanceType = instanceModule[elementName] || Object;
instance = new instanceType();
} catch (ex) {
var debug = __webpack_require__(34);
throw new debug.ScopeError(ex, "Module '" + moduleId + "' not found for element '" + (namespace ? namespace + ":" : "") + elementName + "'.");
}
var cssApplied = false;
if (attributes) {
if (attributes[IMPORT]) {
var importPath = attributes[IMPORT].trim();
if (importPath.indexOf("~/") === 0) {
importPath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, importPath.replace("~/", ""));
}
exports = global.loadModule(importPath);
instance.exports = exports;
}
if (attributes[CODEFILE]) {
var codeFilePath = attributes[CODEFILE].trim();
if (codeFilePath.indexOf("~/") === 0) {
codeFilePath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, codeFilePath.replace("~/", ""));
}
var codeFilePathWithExt = codeFilePath.indexOf(".js") !== -1 ? codeFilePath : codeFilePath + ".js";
if (file_system_1.File.exists(codeFilePathWithExt)) {
exports = global.loadModule(codeFilePath);
instance.exports = exports;
} else {
throw new Error('Code file with path "' + codeFilePathWithExt + '" cannot be found!');
}
}
if (attributes[CSSFILE] && typeof instance.addCssFile === "function") {
var cssFilePath = attributes[CSSFILE].trim();
if (cssFilePath.indexOf("~/") === 0) {
cssFilePath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, cssFilePath.replace("~/", ""));
}
if (file_system_1.File.exists(cssFilePath)) {
instance.addCssFile(cssFilePath);
cssApplied = true;
} else {
throw new Error('Css file with path "' + cssFilePath + '" cannot be found!');
}
}
}
if (typeof instance.addCssFile === "function") {
if (moduleNamePath && !cssApplied) {
var cssFilePath = file_name_resolver_1.resolveFileName(moduleNamePath, "css");
if (cssFilePath) {
instance.addCssFile(cssFilePath);
cssApplied = true;
}
}
if (!cssApplied) {
instance._refreshCss();
}
}
if (instance && instanceModule) {
for (var attr in attributes) {
var attrValue = attributes[attr];
if (attr.indexOf(":") !== -1) {
var platformName = attr.split(":")[0].trim();
if (platformName.toLowerCase() === platform.device.os.toLowerCase()) {
attr = attr.split(":")[1].trim();
} else {
continue;
}
}
if (attr.indexOf(".") !== -1) {
var subObj = instance;
var properties = attr.split(".");
var subPropName = properties[properties.length - 1];
for (var i = 0; i < properties.length - 1; i++) {
if (subObj !== undefined && subObj !== null) {
subObj = subObj[properties[i]];
}
}
if (subObj !== undefined && subObj !== null) {
setPropertyValue(subObj, instanceModule, exports, subPropName, attrValue);
}
} else {
setPropertyValue(instance, instanceModule, exports, attr, attrValue);
}
}
componentModule = {
component: instance,
exports: instanceModule
};
}
return componentModule;
}
exports.getComponentModule = getComponentModule;
function setPropertyValue(instance, instanceModule, exports, propertyName, propertyValue) {
if (isBinding(propertyValue) && instance.bind) {
var bindOptions = binding_builder_1.getBindingOptions(propertyName, getBindingExpressionFromAttribute(propertyValue));
instance.bind({
sourceProperty: bindOptions[binding_builder_1.bindingConstants.sourceProperty],
targetProperty: bindOptions[binding_builder_1.bindingConstants.targetProperty],
expression: bindOptions[binding_builder_1.bindingConstants.expression],
twoWay: bindOptions[binding_builder_1.bindingConstants.twoWay]
}, bindOptions[binding_builder_1.bindingConstants.source]);
} else if (bindable_1.isEventOrGesture(propertyName, instance)) {
var handler = exports && exports[propertyValue];
if (typeof handler === "function") {
instance.on(propertyName, handler);
}
} else if (isKnownFunction(propertyName, instance) && exports && typeof exports[propertyValue] === "function") {
instance[propertyName] = exports[propertyValue];
} else {
var attrHandled = false;
if (!attrHandled && instance._applyXmlAttribute) {
attrHandled = instance._applyXmlAttribute(propertyName, propertyValue);
}
if (!attrHandled) {
instance[propertyName] = propertyValue;
}
}
}
exports.setPropertyValue = setPropertyValue;
function getBindingExpressionFromAttribute(value) {
return value.replace("{{", "").replace("}}", "").trim();
}
function isBinding(value) {
var isBinding;
if (typeof value === "string") {
var str = value.trim();
isBinding = str.indexOf("{{") === 0 && str.lastIndexOf("}}") === str.length - 2;
}
return isBinding;
}
var KNOWN_FUNCTIONS = "knownFunctions";
function isKnownFunction(name, instance) {
return instance.constructor && KNOWN_FUNCTIONS in instance.constructor && instance.constructor[KNOWN_FUNCTIONS].indexOf(name) !== -1;
}
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
exports.DIALOG_FRAGMENT_TAG = "dialog";
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var types_1 = __webpack_require__(17);
var platform_1 = __webpack_require__(22);
var animation_1 = __webpack_require__(49);
var lazy_1 = __webpack_require__(51);
var trace_1 = __webpack_require__(15);
var slideTransition;
function ensureSlideTransition() {
if (!slideTransition) {
slideTransition = __webpack_require__(63);
}
}
var fadeTransition;
function ensureFadeTransition() {
if (!fadeTransition) {
fadeTransition = __webpack_require__(64);
}
}
var flipTransition;
function ensureFlipTransition() {
if (!flipTransition) {
flipTransition = __webpack_require__(65);
}
}
var _sdkVersion = lazy_1.default(function() {
return parseInt(platform_1.device.sdkVersion);
});
var _defaultInterpolator = lazy_1.default(function() {
return new android.view.animation.AccelerateDecelerateInterpolator();
});
var enterFakeResourceId = -10;
var exitFakeResourceId = -20;
var popEnterFakeResourceId = -30;
var popExitFakeResourceId = -40;
var AndroidTransitionType;
(function(AndroidTransitionType) {
AndroidTransitionType.enter = "enter";
AndroidTransitionType.exit = "exit";
AndroidTransitionType.popEnter = "popEnter";
AndroidTransitionType.popExit = "popExit";
})(AndroidTransitionType = exports.AndroidTransitionType || (exports.AndroidTransitionType = {}));
function _clearBackwardTransitions(fragment) {
var expandedFragment = fragment;
if (expandedFragment.enterPopExitTransition) {
if (trace_1.isEnabled()) {
trace_1.write("Cleared enterPopExitTransition " + expandedFragment.enterPopExitTransition + " for " + fragment, trace_1.categories.Transition);
}
if (expandedFragment.enterPopExitTransitionListener) {
expandedFragment.enterPopExitTransitionListener.remove();
}
expandedFragment.enterPopExitTransition = undefined;
}
if (_sdkVersion() >= 21) {
var enterTransition = fragment.getEnterTransition();
if (enterTransition) {
if (trace_1.isEnabled()) {
trace_1.write("Cleared Enter " + enterTransition.getClass().getSimpleName() + " transition for " + fragment, trace_1.categories.Transition);
}
if (enterTransition.transitionListener) {
enterTransition.transitionListener.remove();
}
fragment.setEnterTransition(null);
}
var returnTransition = fragment.getReturnTransition();
if (returnTransition) {
if (trace_1.isEnabled()) {
trace_1.write("Cleared Pop Exit " + returnTransition.getClass().getSimpleName() + " transition for " + fragment, trace_1.categories.Transition);
}
if (returnTransition.transitionListener) {
returnTransition.transitionListener.remove();
}
fragment.setReturnTransition(null);
}
}
}
exports._clearBackwardTransitions = _clearBackwardTransitions;
function _clearForwardTransitions(fragment) {
var expandedFragment = fragment;
if (expandedFragment.exitPopEnterTransition) {
if (trace_1.isEnabled()) {
trace_1.write("Cleared exitPopEnterTransition " + expandedFragment.exitPopEnterTransition + " for " + fragment, trace_1.categories.Transition);
}
if (expandedFragment.exitPopEnterTransitionListener) {
expandedFragment.exitPopEnterTransitionListener.remove();
}
expandedFragment.exitPopEnterTransition = undefined;
}
if (_sdkVersion() >= 21) {
var exitTransition = fragment.getExitTransition();
if (exitTransition) {
if (trace_1.isEnabled()) {
trace_1.write("Cleared Exit " + exitTransition.getClass().getSimpleName() + " transition for " + fragment, trace_1.categories.Transition);
}
if (exitTransition.transitionListener) {
exitTransition.transitionListener.remove();
}
fragment.setExitTransition(null);
}
var reenterTransition = fragment.getReenterTransition();
if (reenterTransition) {
if (trace_1.isEnabled()) {
trace_1.write("Cleared Pop Enter " + reenterTransition.getClass().getSimpleName() + " transition for " + fragment, trace_1.categories.Transition);
}
if (reenterTransition.transitionListener) {
reenterTransition.transitionListener.remove();
}
fragment.setReenterTransition(null);
}
}
}
exports._clearForwardTransitions = _clearForwardTransitions;
function _setAndroidFragmentTransitions(cachePagesOnNavigate, navigationTransition, currentFragment, newFragment, fragmentTransaction) {
trace_1.write("Setting Android Fragment Transitions...", trace_1.categories.Transition);
var name;
if (navigationTransition.name) {
name = navigationTransition.name.toLowerCase();
}
var useLollipopTransition = name && (name.indexOf("slide") === 0 || name === "fade" || name === "explode") && _sdkVersion() >= 21;
if (cachePagesOnNavigate && _sdkVersion() === 23) {
useLollipopTransition = false;
}
if (useLollipopTransition) {
newFragment.setAllowEnterTransitionOverlap(true);
newFragment.setAllowReturnTransitionOverlap(true);
if (currentFragment) {
currentFragment.setAllowEnterTransitionOverlap(true);
currentFragment.setAllowReturnTransitionOverlap(true);
}
if (name.indexOf("slide") === 0) {
var direction = name.substr("slide".length) || "left";
switch (direction) {
case "left":
var rightEdge = new android.transition.Slide(android.view.Gravity.RIGHT);
_setUpNativeTransition(navigationTransition, rightEdge);
_addNativeTransitionListener(newFragment, rightEdge);
newFragment.setEnterTransition(rightEdge);
if (currentFragment) {
var leftEdge_1 = new android.transition.Slide(android.view.Gravity.LEFT);
_setUpNativeTransition(navigationTransition, leftEdge_1);
_addNativeTransitionListener(currentFragment, leftEdge_1);
currentFragment.setExitTransition(leftEdge_1);
}
break;

case "right":
var leftEdge = new android.transition.Slide(android.view.Gravity.LEFT);
_setUpNativeTransition(navigationTransition, leftEdge);
_addNativeTransitionListener(newFragment, leftEdge);
newFragment.setEnterTransition(leftEdge);
if (currentFragment) {
var rightEdge_1 = new android.transition.Slide(android.view.Gravity.RIGHT);
_setUpNativeTransition(navigationTransition, rightEdge_1);
_addNativeTransitionListener(currentFragment, rightEdge_1);
currentFragment.setExitTransition(rightEdge_1);
}
break;

case "top":
var bottomEdge = new android.transition.Slide(android.view.Gravity.BOTTOM);
_setUpNativeTransition(navigationTransition, bottomEdge);
_addNativeTransitionListener(newFragment, bottomEdge);
newFragment.setEnterTransition(bottomEdge);
if (currentFragment) {
var topEdge_1 = new android.transition.Slide(android.view.Gravity.TOP);
_setUpNativeTransition(navigationTransition, topEdge_1);
_addNativeTransitionListener(currentFragment, topEdge_1);
currentFragment.setExitTransition(topEdge_1);
}
break;

case "bottom":
var topEdge = new android.transition.Slide(android.view.Gravity.TOP);
_setUpNativeTransition(navigationTransition, topEdge);
_addNativeTransitionListener(newFragment, topEdge);
newFragment.setEnterTransition(topEdge);
if (currentFragment) {
var bottomEdge_1 = new android.transition.Slide(android.view.Gravity.BOTTOM);
_setUpNativeTransition(navigationTransition, bottomEdge_1);
_addNativeTransitionListener(currentFragment, bottomEdge_1);
currentFragment.setExitTransition(bottomEdge_1);
}
break;
}
} else if (name === "fade") {
var fadeEnter = new android.transition.Fade(android.transition.Fade.IN);
_setUpNativeTransition(navigationTransition, fadeEnter);
_addNativeTransitionListener(newFragment, fadeEnter);
newFragment.setEnterTransition(fadeEnter);
var fadeReturn = new android.transition.Fade(android.transition.Fade.OUT);
_setUpNativeTransition(navigationTransition, fadeReturn);
_addNativeTransitionListener(newFragment, fadeReturn);
newFragment.setReturnTransition(fadeReturn);
if (currentFragment) {
var fadeExit = new android.transition.Fade(android.transition.Fade.OUT);
_setUpNativeTransition(navigationTransition, fadeExit);
_addNativeTransitionListener(currentFragment, fadeExit);
currentFragment.setExitTransition(fadeExit);
var fadeReenter = new android.transition.Fade(android.transition.Fade.IN);
_setUpNativeTransition(navigationTransition, fadeReenter);
_addNativeTransitionListener(currentFragment, fadeReenter);
currentFragment.setReenterTransition(fadeReenter);
}
} else if (name === "explode") {
var explodeEnter = new android.transition.Explode();
_setUpNativeTransition(navigationTransition, explodeEnter);
_addNativeTransitionListener(newFragment, explodeEnter);
newFragment.setEnterTransition(explodeEnter);
if (currentFragment) {
var explodeExit = new android.transition.Explode();
_setUpNativeTransition(navigationTransition, explodeExit);
_addNativeTransitionListener(currentFragment, explodeExit);
currentFragment.setExitTransition(explodeExit);
}
}
} else {
var transition = void 0;
if (name) {
if (name.indexOf("slide") === 0) {
var direction = name.substr("slide".length) || "left";
ensureSlideTransition();
transition = new slideTransition.SlideTransition(direction, navigationTransition.duration, navigationTransition.curve);
} else if (name === "fade") {
ensureFadeTransition();
transition = new fadeTransition.FadeTransition(navigationTransition.duration, navigationTransition.curve);
} else if (name.indexOf("flip") === 0) {
var direction = name.substr("flip".length) || "right";
ensureFlipTransition();
transition = new flipTransition.FlipTransition(direction, navigationTransition.duration, navigationTransition.curve);
}
} else {
transition = navigationTransition.instance;
}
if (transition) {
var newExpandedFragment = newFragment;
newExpandedFragment.enterPopExitTransition = transition;
if (currentFragment) {
var currentExpandedFragment = currentFragment;
currentExpandedFragment.exitPopEnterTransition = transition;
}
fragmentTransaction.setCustomAnimations(enterFakeResourceId, exitFakeResourceId, popEnterFakeResourceId, popExitFakeResourceId);
}
}
_printTransitions(currentFragment);
_printTransitions(newFragment);
}
exports._setAndroidFragmentTransitions = _setAndroidFragmentTransitions;
function _setUpNativeTransition(navigationTransition, nativeTransition) {
if (navigationTransition.duration) {
nativeTransition.setDuration(navigationTransition.duration);
}
if (navigationTransition.curve) {
var interpolator = animation_1._resolveAnimationCurve(navigationTransition.curve);
nativeTransition.setInterpolator(interpolator);
} else {
nativeTransition.setInterpolator(_defaultInterpolator());
}
}
function _onFragmentShown(fragment, isBack) {
if (trace_1.isEnabled()) {
trace_1.write("_onFragmentShown(" + fragment + ", isBack: " + isBack + ")", trace_1.categories.Transition);
}
var expandedFragment = fragment;
var transitionType = isBack ? "Pop Enter" : "Enter";
var relevantTransition = isBack ? expandedFragment.exitPopEnterTransition : expandedFragment.enterPopExitTransition;
if (relevantTransition) {
if (trace_1.isEnabled()) {
trace_1.write(fragment + " has been shown when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + relevantTransition + ". Will complete page addition when transition ends.", trace_1.categories.Transition);
}
expandedFragment.completePageAdditionWhenTransitionEnds = {
isBack: isBack
};
} else if (_sdkVersion() >= 21) {
var nativeTransition = isBack ? fragment.getReenterTransition() : fragment.getEnterTransition();
if (nativeTransition) {
if (trace_1.isEnabled()) {
trace_1.write(fragment + " has been shown when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + nativeTransition.getClass().getSimpleName() + " transition. Will complete page addition when transition ends.", trace_1.categories.Transition);
}
expandedFragment.completePageAdditionWhenTransitionEnds = {
isBack: isBack
};
}
}
if (!expandedFragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(fragment, isBack);
}
}
exports._onFragmentShown = _onFragmentShown;
function _onFragmentHidden(fragment, isBack, destroyed) {
if (trace_1.isEnabled()) {
trace_1.write("_onFragmentHidden(" + fragment + ", isBack: " + isBack + ", destroyed: " + destroyed + ")", trace_1.categories.Transition);
}
var expandedFragment = fragment;
var transitionType = isBack ? "Pop Exit" : "Exit";
var relevantTransition = isBack ? expandedFragment.enterPopExitTransition : expandedFragment.exitPopEnterTransition;
if (relevantTransition) {
if (trace_1.isEnabled()) {
trace_1.write(fragment + " has been hidden when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + relevantTransition + ". Will complete page removal when transition ends.", trace_1.categories.Transition);
}
expandedFragment.completePageRemovalWhenTransitionEnds = {
isBack: isBack
};
} else if (_sdkVersion() >= 21) {
var nativeTransition = isBack ? fragment.getReturnTransition() : fragment.getExitTransition();
if (nativeTransition) {
if (trace_1.isEnabled()) {
trace_1.write(fragment + " has been hidden when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + nativeTransition.getClass().getSimpleName() + " transition. Will complete page removal when transition ends.", trace_1.categories.Transition);
}
expandedFragment.completePageRemovalWhenTransitionEnds = {
isBack: isBack
};
}
}
expandedFragment.isDestroyed = destroyed;
if (expandedFragment.completePageRemovalWhenTransitionEnds === undefined) {
_completePageRemoval(fragment, isBack);
}
}
exports._onFragmentHidden = _onFragmentHidden;
function _completePageAddition(fragment, isBack) {
var expandedFragment = fragment;
expandedFragment.completePageAdditionWhenTransitionEnds = undefined;
var frame = fragment._callbacks.frame;
var entry = fragment._callbacks.entry;
var page = entry.resolvedPage;
if (trace_1.isEnabled()) {
trace_1.write("STARTING ADDITION of " + page + "...", trace_1.categories.Transition);
}
frame._currentEntry = entry;
page.onNavigatedTo(isBack);
frame._processNavigationQueue(page);
entry.isNavigation = undefined;
if (trace_1.isEnabled()) {
trace_1.write("ADDITION of " + page + " completed", trace_1.categories.Transition);
}
}
function _completePageRemoval(fragment, isBack) {
var expandedFragment = fragment;
expandedFragment.completePageRemovalWhenTransitionEnds = undefined;
var frame = fragment._callbacks.frame;
var entry = fragment._callbacks.entry;
var page = entry.resolvedPage;
if (trace_1.isEnabled()) {
trace_1.write("STARTING REMOVAL of " + page + "...", trace_1.categories.Transition);
}
if (page.frame) {
frame._removeView(page);
if (entry.isNavigation) {
page.onNavigatedFrom(isBack);
}
if (trace_1.isEnabled()) {
trace_1.write("REMOVAL of " + page + " completed", trace_1.categories.Transition);
}
} else {
if (trace_1.isEnabled()) {
trace_1.write("REMOVAL of " + page + " has already been done", trace_1.categories.Transition);
}
}
if (expandedFragment.isDestroyed) {
expandedFragment.isDestroyed = undefined;
if (page._context) {
page._tearDownUI(true);
if (trace_1.isEnabled()) {
trace_1.write("DETACHMENT of " + page + " completed", trace_1.categories.Transition);
}
} else {
if (trace_1.isEnabled()) {
trace_1.write("DETACHMENT of " + page + " has already been done", trace_1.categories.Transition);
}
_removePageNativeViewFromAndroidParent(page);
}
}
entry.isNavigation = undefined;
}
function _removePageNativeViewFromAndroidParent(page) {
if (page.nativeView && page.nativeView.getParent) {
var androidParent = page.nativeView.getParent();
if (androidParent && androidParent.removeView) {
if (trace_1.isEnabled()) {
trace_1.write("REMOVED " + page + ".nativeView from its Android parent", trace_1.categories.Transition);
}
if (page._context) {
page._tearDownUI(true);
}
androidParent.removeView(page.nativeView);
}
}
}
exports._removePageNativeViewFromAndroidParent = _removePageNativeViewFromAndroidParent;
function _toShortString(nativeTransition) {
return nativeTransition.getClass().getSimpleName() + "@" + nativeTransition.hashCode().toString(16);
}
function _addNativeTransitionListener(fragment, nativeTransition) {
var transitionListener = new android.transition.Transition.TransitionListener({
onTransitionCancel: function(transition) {
var expandedFragment = this.fragment;
if (!expandedFragment) {
return;
}
if (trace_1.isEnabled()) {
trace_1.write("CANCEL " + _toShortString(transition) + " transition for " + expandedFragment, trace_1.categories.Transition);
}
if (expandedFragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(expandedFragment, expandedFragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (expandedFragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(expandedFragment, expandedFragment.completePageAdditionWhenTransitionEnds.isBack);
}
this.checkedRemove();
},
onTransitionEnd: function(transition) {
var expandedFragment = this.fragment;
if (!expandedFragment) {
return;
}
if (trace_1.isEnabled()) {
trace_1.write("END " + _toShortString(transition) + " transition for " + expandedFragment, trace_1.categories.Transition);
}
if (expandedFragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(expandedFragment, expandedFragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (expandedFragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(expandedFragment, expandedFragment.completePageAdditionWhenTransitionEnds.isBack);
}
this.checkedRemove();
},
onTransitionPause: function(transition) {
var expandedFragment = this.fragment;
if (trace_1.isEnabled()) {
trace_1.write("PAUSE " + _toShortString(transition) + " transition for " + expandedFragment, trace_1.categories.Transition);
}
},
onTransitionResume: function(transition) {
var expandedFragment = this.fragment;
if (trace_1.isEnabled()) {
trace_1.write("RESUME " + _toShortString(transition) + " transition for " + expandedFragment, trace_1.categories.Transition);
}
},
onTransitionStart: function(transition) {
var expandedFragment = this.fragment;
if (trace_1.isEnabled()) {
trace_1.write("START " + _toShortString(transition) + " transition for " + expandedFragment, trace_1.categories.Transition);
}
}
});
transitionListener.fragment = fragment;
transitionListener.count = 2;
transitionListener.transition = nativeTransition;
transitionListener.listener = transitionListener;
transitionListener.checkedRemove = function() {
if (--this.count) {
return;
}
this.remove();
};
transitionListener.remove = function() {
if (!this.listener) {
return;
}
this.transition.removeListener(this.listener);
this.fragment = null;
this.listener = null;
this.transition.transitionListener = null;
this.transition = null;
};
nativeTransition.addListener(transitionListener);
nativeTransition.transitionListener = transitionListener;
}
function _onFragmentCreateAnimator(fragment, nextAnim) {
var transitionType;
switch (nextAnim) {
case enterFakeResourceId:
transitionType = AndroidTransitionType.enter;
break;

case exitFakeResourceId:
transitionType = AndroidTransitionType.exit;
break;

case popEnterFakeResourceId:
transitionType = AndroidTransitionType.popEnter;
break;

case popExitFakeResourceId:
transitionType = AndroidTransitionType.popExit;
break;
}
if ((nextAnim === popExitFakeResourceId || !nextAnim) && fragment.exitHack) {
trace_1.write("HACK EXIT FOR " + fragment, trace_1.categories.Transition);
transitionType = AndroidTransitionType.exit;
}
var transition;
switch (transitionType) {
case AndroidTransitionType.enter:
case AndroidTransitionType.popExit:
transition = fragment.enterPopExitTransition;
break;

case AndroidTransitionType.exit:
case AndroidTransitionType.popEnter:
transition = fragment.exitPopEnterTransition;
break;
}
var animator;
if (transition) {
animator = transition.createAndroidAnimator(transitionType);
trace_1.write(transition + ".createAndroidAnimator(" + transitionType + "): " + animator, trace_1.categories.Transition);
var transitionListener = new android.animation.Animator.AnimatorListener({
onAnimationStart: function(animator) {
if (trace_1.isEnabled()) {
trace_1.write("START " + transitionType + " " + this.transition + " for " + this.fragment, trace_1.categories.Transition);
}
},
onAnimationRepeat: function(animator) {
if (trace_1.isEnabled()) {
trace_1.write("REPEAT " + transitionType + " " + this.transition + " for " + this.fragment, trace_1.categories.Transition);
}
},
onAnimationEnd: function(animator) {
if (trace_1.isEnabled()) {
trace_1.write("END " + transitionType + " " + this.transition + " for " + this.fragment, trace_1.categories.Transition);
}
if (this.fragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(this.fragment, this.fragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (this.fragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(this.fragment, this.fragment.completePageAdditionWhenTransitionEnds.isBack);
}
this.checkedRemove();
},
onAnimationCancel: function(animator) {
if (trace_1.isEnabled()) {
trace_1.write("CANCEL " + transitionType + " " + this.transition + " for " + this.fragment, trace_1.categories.Transition);
}
if (this.fragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(this.fragment, this.fragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (this.fragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(this.fragment, this.fragment.completePageAdditionWhenTransitionEnds.isBack);
}
this.checkedRemove();
}
});
transitionListener.fragment = fragment;
transitionListener.transitionType = transitionType;
transitionListener.count = 2;
transitionListener.listener = transitionListener;
transitionListener.animator = animator;
transitionListener.checkedRemove = function() {
if (--this.count) {
return;
}
this.remove();
};
transitionListener.remove = function() {
if (!this.listener) {
return;
}
this.animator.removeListener(this.listener);
switch (this.transitionType) {
case AndroidTransitionType.enter:
case AndroidTransitionType.popExit:
this.fragment.enterPopExitTransitionListener = null;
break;

case AndroidTransitionType.exit:
case AndroidTransitionType.popEnter:
this.fragment.exitPopEnterTransitionListener = null;
break;
}
this.transitionType = null;
this.fragment = null;
this.listener = null;
this.animator.transitionListener = null;
this.animator = null;
this.transitionType = null;
};
animator.transitionListener = transitionListener;
animator.addListener(transitionListener);
switch (transitionType) {
case AndroidTransitionType.enter:
case AndroidTransitionType.popExit:
fragment.enterPopExitTransitionListener = transitionListener;
break;

case AndroidTransitionType.exit:
case AndroidTransitionType.popEnter:
fragment.exitPopEnterTransitionListener = transitionListener;
break;
}
}
if (transitionType && !animator) {
animator = _createDummyZeroDurationAnimator();
}
return animator;
}
exports._onFragmentCreateAnimator = _onFragmentCreateAnimator;
function _prepareCurrentFragmentForClearHistory(fragment) {
trace_1.write("Preparing " + fragment + " transitions fro clear history...", trace_1.categories.Transition);
var expandedFragment = fragment;
expandedFragment.exitHack = true;
if (_sdkVersion() >= 21) {
var exitTransition = fragment.getExitTransition();
fragment.setReturnTransition(exitTransition);
}
_printTransitions(fragment);
}
exports._prepareCurrentFragmentForClearHistory = _prepareCurrentFragmentForClearHistory;
var intEvaluator;
function ensureIntEvaluator() {
if (!intEvaluator) {
intEvaluator = new android.animation.IntEvaluator();
}
}
function _createDummyZeroDurationAnimator() {
if (trace_1.isEnabled()) {
trace_1.write("_createDummyZeroDurationAnimator()", trace_1.categories.Transition);
}
ensureIntEvaluator();
var nativeArray = Array.create(java.lang.Object, 2);
nativeArray[0] = java.lang.Integer.valueOf(0);
nativeArray[1] = java.lang.Integer.valueOf(1);
var animator = android.animation.ValueAnimator.ofObject(intEvaluator, nativeArray);
animator.setDuration(0);
return animator;
}
function _printTransitions(f) {
if (f && trace_1.isEnabled) {
var ef = f;
var result = ef + " Transitions:";
result += "" + (ef.enterPopExitTransition ? " enterPopExit=" + ef.enterPopExitTransition : "");
result += "" + (ef.exitPopEnterTransition ? " exitPopEnter=" + ef.exitPopEnterTransition : "");
if (_sdkVersion() >= 21) {
result += "" + (f.getEnterTransition() ? " enter=" + _toShortString(f.getEnterTransition()) : "");
result += "" + (f.getExitTransition() ? " exit=" + _toShortString(f.getExitTransition()) : "");
result += "" + (f.getReenterTransition() ? " popEnter=" + _toShortString(f.getReenterTransition()) : "");
result += "" + (f.getReturnTransition() ? " popExit=" + _toShortString(f.getReturnTransition()) : "");
}
trace_1.write(result, trace_1.categories.Transition);
}
}
var Transition = function() {
function Transition(duration, curve) {
this._duration = duration;
if (curve) {
this._interpolator = animation_1._resolveAnimationCurve(curve);
} else {
this._interpolator = _defaultInterpolator();
}
this._id = Transition.transitionId++;
}
Transition.prototype.getDuration = function() {
return this._duration;
};
Transition.prototype.getCurve = function() {
return this._interpolator;
};
Transition.prototype.animateIOSTransition = function(containerView, fromView, toView, operation, completion) {
throw new Error("Abstract method call");
};
Transition.prototype.createAndroidAnimator = function(transitionType) {
throw new Error("Abstract method call");
};
Transition.prototype.toString = function() {
return types_1.getClass(this) + "@" + this._id;
};
return Transition;
}();
Transition.transitionId = 0;
exports.Transition = Transition;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var transition = __webpack_require__(62);
var platform = __webpack_require__(22);
var lazy_1 = __webpack_require__(51);
var screenWidth = lazy_1.default(function() {
return platform.screen.mainScreen.widthPixels;
});
var screenHeight = lazy_1.default(function() {
return platform.screen.mainScreen.heightPixels;
});
var SlideTransition = function(_super) {
__extends(SlideTransition, _super);
function SlideTransition(direction, duration, curve) {
var _this = _super.call(this, duration, curve) || this;
_this._direction = direction;
return _this;
}
SlideTransition.prototype.createAndroidAnimator = function(transitionType) {
var translationValues = Array.create("float", 2);
switch (this._direction) {
case "left":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = -screenWidth();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = -screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = screenWidth();
break;
}
break;

case "right":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = -screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = screenWidth();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = -screenWidth();
break;
}
break;

case "top":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = -screenHeight();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = -screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = screenHeight();
break;
}
break;

case "bottom":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = -screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = screenHeight();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = -screenHeight();
break;
}
break;
}
var prop;
if (this._direction === "left" || this._direction === "right") {
prop = "translationX";
} else {
prop = "translationY";
}
var animator = android.animation.ObjectAnimator.ofFloat(null, prop, translationValues);
var duration = this.getDuration();
if (duration !== undefined) {
animator.setDuration(duration);
}
animator.setInterpolator(this.getCurve());
return animator;
};
SlideTransition.prototype.toString = function() {
return _super.prototype.toString.call(this) + " " + this._direction;
};
return SlideTransition;
}(transition.Transition);
exports.SlideTransition = SlideTransition;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var transition_1 = __webpack_require__(62);
var FadeTransition = function(_super) {
__extends(FadeTransition, _super);
function FadeTransition() {
return _super !== null && _super.apply(this, arguments) || this;
}
FadeTransition.prototype.createAndroidAnimator = function(transitionType) {
var alphaValues = Array.create("float", 2);
switch (transitionType) {
case transition_1.AndroidTransitionType.enter:
case transition_1.AndroidTransitionType.popEnter:
alphaValues[0] = 0;
alphaValues[1] = 1;
break;

case transition_1.AndroidTransitionType.exit:
case transition_1.AndroidTransitionType.popExit:
alphaValues[0] = 1;
alphaValues[1] = 0;
break;
}
var animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", alphaValues);
var duration = this.getDuration();
if (duration !== undefined) {
animator.setDuration(duration);
}
animator.setInterpolator(this.getCurve());
return animator;
};
return FadeTransition;
}(transition_1.Transition);
exports.FadeTransition = FadeTransition;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var transition_1 = __webpack_require__(62);
var FlipTransition = function(_super) {
__extends(FlipTransition, _super);
function FlipTransition(direction, duration, curve) {
var _this = _super.call(this, duration, curve) || this;
_this._direction = direction;
return _this;
}
FlipTransition.prototype.createAndroidAnimator = function(transitionType) {
var objectAnimators;
var values;
var animator;
var animatorSet = new android.animation.AnimatorSet();
var fullDuration = this.getDuration() || 300;
var interpolator = this.getCurve();
var rotationY = this._direction === "right" ? 180 : -180;
switch (transitionType) {
case transition_1.AndroidTransitionType.enter:
objectAnimators = Array.create(android.animation.Animator, 3);
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setDuration(0);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = rotationY;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[1] = animator;
values = Array.create("float", 2);
values[0] = 0;
values[1] = 1;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[2] = animator;
break;

case transition_1.AndroidTransitionType.exit:
objectAnimators = Array.create(android.animation.Animator, 2);
values = Array.create("float", 2);
values[0] = 0;
values[1] = -rotationY;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[1] = animator;
break;

case transition_1.AndroidTransitionType.popEnter:
objectAnimators = Array.create(android.animation.Animator, 3);
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setDuration(0);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = -rotationY;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[1] = animator;
values = Array.create("float", 2);
values[0] = 0;
values[1] = 1;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[2] = animator;
break;

case transition_1.AndroidTransitionType.popExit:
objectAnimators = Array.create(android.animation.Animator, 2);
values = Array.create("float", 2);
values[0] = 0;
values[1] = rotationY;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[1] = animator;
break;
}
animatorSet.playTogether(objectAnimators);
return animatorSet;
};
return FlipTransition;
}(transition_1.Transition);
exports.FlipTransition = FlipTransition;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var frame_1 = __webpack_require__(10);
var FragmentClass = function(_super) {
__extends(FragmentClass, _super);
function FragmentClass() {
var _this = _super.call(this) || this;
return global.__native(_this);
}
FragmentClass.prototype.onHiddenChanged = function(hidden) {
this._callbacks.onHiddenChanged(this, hidden, _super.prototype.onHiddenChanged);
};
FragmentClass.prototype.onCreateAnimator = function(transit, enter, nextAnim) {
var result = this._callbacks.onCreateAnimator(this, transit, enter, nextAnim, _super.prototype.onCreateAnimator);
return result;
};
FragmentClass.prototype.onCreate = function(savedInstanceState) {
if (!this._callbacks) {
frame_1.setFragmentCallbacks(this);
}
this.setHasOptionsMenu(true);
this._callbacks.onCreate(this, savedInstanceState, _super.prototype.onCreate);
};
FragmentClass.prototype.onCreateView = function(inflater, container, savedInstanceState) {
var result = this._callbacks.onCreateView(this, inflater, container, savedInstanceState, _super.prototype.onCreateView);
return result;
};
FragmentClass.prototype.onSaveInstanceState = function(outState) {
this._callbacks.onSaveInstanceState(this, outState, _super.prototype.onSaveInstanceState);
};
FragmentClass.prototype.onDestroyView = function() {
this._callbacks.onDestroyView(this, _super.prototype.onDestroyView);
};
FragmentClass.prototype.onDestroy = function() {
this._callbacks.onDestroy(this, _super.prototype.onDestroy);
};
FragmentClass.prototype.toString = function() {
return this._callbacks.toStringOverride(this, _super.prototype.toString);
};
return FragmentClass;
}(android.app.Fragment);
FragmentClass = __decorate([ JavaProxy("com.tns.FragmentClass") ], FragmentClass);
frame_1.setFragmentClass(FragmentClass);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var button_common_1 = __webpack_require__(68);
var gestures_1 = __webpack_require__(54);
__export(__webpack_require__(68));
var ClickListener;
var APILEVEL;
function initializeClickListener() {
if (ClickListener) {
return;
}
var ClickListenerImpl = function(_super) {
__extends(ClickListenerImpl, _super);
function ClickListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
ClickListenerImpl.prototype.onClick = function(v) {
this.owner._emit(button_common_1.ButtonBase.tapEvent);
};
return ClickListenerImpl;
}(java.lang.Object);
ClickListenerImpl = __decorate([ Interfaces([ android.view.View.OnClickListener ]) ], ClickListenerImpl);
ClickListener = ClickListenerImpl;
APILEVEL = android.os.Build.VERSION.SDK_INT;
}
var Button = function(_super) {
__extends(Button, _super);
function Button() {
return _super !== null && _super.apply(this, arguments) || this;
}
Button.prototype.createNativeView = function() {
initializeClickListener();
var button = new android.widget.Button(this._context);
var clickListener = new ClickListener(this);
button.setOnClickListener(clickListener);
button.clickListener = clickListener;
return button;
};
Button.prototype.initNativeView = function() {
this.nativeView.clickListener.owner = this;
_super.prototype.initNativeView.call(this);
};
Button.prototype.disposeNativeView = function() {
this.nativeView.clickListener.owner = null;
_super.prototype.disposeNativeView.call(this);
};
Button.prototype._updateHandler = function(subscribe) {
var _this = this;
if (subscribe) {
this._highlightedHandler = this._highlightedHandler || function(args) {
switch (args.action) {
case gestures_1.TouchAction.up:
_this._goToVisualState("normal");
break;

case gestures_1.TouchAction.down:
_this._goToVisualState("highlighted");
break;
}
};
this.on(gestures_1.GestureTypes.touch, this._highlightedHandler);
} else {
this.off(gestures_1.GestureTypes.touch, this._highlightedHandler);
}
};
Button.prototype[button_common_1.paddingTopProperty.getDefault] = function() {
return {
value: this._defaultPaddingTop,
unit: "px"
};
};
Button.prototype[button_common_1.paddingTopProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingTop(this.nativeView, button_common_1.Length.toDevicePixels(value, 0) + button_common_1.Length.toDevicePixels(this.style.borderTopWidth, 0));
};
Button.prototype[button_common_1.paddingRightProperty.getDefault] = function() {
return {
value: this._defaultPaddingRight,
unit: "px"
};
};
Button.prototype[button_common_1.paddingRightProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingRight(this.nativeView, button_common_1.Length.toDevicePixels(value, 0) + button_common_1.Length.toDevicePixels(this.style.borderRightWidth, 0));
};
Button.prototype[button_common_1.paddingBottomProperty.getDefault] = function() {
return {
value: this._defaultPaddingBottom,
unit: "px"
};
};
Button.prototype[button_common_1.paddingBottomProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingBottom(this.nativeView, button_common_1.Length.toDevicePixels(value, 0) + button_common_1.Length.toDevicePixels(this.style.borderBottomWidth, 0));
};
Button.prototype[button_common_1.paddingLeftProperty.getDefault] = function() {
return {
value: this._defaultPaddingLeft,
unit: "px"
};
};
Button.prototype[button_common_1.paddingLeftProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingLeft(this.nativeView, button_common_1.Length.toDevicePixels(value, 0) + button_common_1.Length.toDevicePixels(this.style.borderLeftWidth, 0));
};
Button.prototype[button_common_1.zIndexProperty.getDefault] = function() {
return org.nativescript.widgets.ViewHelper.getZIndex(this.nativeView);
};
Button.prototype[button_common_1.zIndexProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setZIndex(this.nativeView, value);
if (APILEVEL >= 21) {
this.nativeView.setStateListAnimator(null);
}
};
Button.prototype[button_common_1.textAlignmentProperty.setNative] = function(value) {
var newValue = value === "initial" ? "center" : value;
_super.prototype[button_common_1.textAlignmentProperty.setNative].call(this, newValue);
};
return Button;
}(button_common_1.ButtonBase);
__decorate([ button_common_1.PseudoClassHandler("normal", "highlighted", "pressed", "active") ], Button.prototype, "_updateHandler", null);
exports.Button = Button;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var text_base_1 = __webpack_require__(69);
__export(__webpack_require__(69));
var ButtonBase = function(_super) {
__extends(ButtonBase, _super);
function ButtonBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(ButtonBase.prototype, "textWrap", {
get: function() {
return this.style.whiteSpace === "normal";
},
set: function(value) {
this.style.whiteSpace = value ? "normal" : "nowrap";
},
enumerable: true,
configurable: true
});
return ButtonBase;
}(text_base_1.TextBase);
ButtonBase.tapEvent = "tap";
exports.ButtonBase = ButtonBase;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var font_1 = __webpack_require__(29);
var style_properties_1 = __webpack_require__(28);
var text_base_common_1 = __webpack_require__(70);
__export(__webpack_require__(70));
var TextTransformation;
function initializeTextTransformation() {
if (TextTransformation) {
return;
}
var TextTransformationImpl = function(_super) {
__extends(TextTransformationImpl, _super);
function TextTransformationImpl(textBase) {
var _this = _super.call(this) || this;
_this.textBase = textBase;
return global.__native(_this);
}
TextTransformationImpl.prototype.getTransformation = function(charSeq, view) {
var formattedText = this.textBase.formattedText;
if (formattedText) {
return createSpannableStringBuilder(formattedText);
} else {
return getTransformedText(this.textBase.text, this.textBase.textTransform);
}
};
TextTransformationImpl.prototype.onFocusChanged = function(view, sourceText, focused, direction, previouslyFocusedRect) {};
return TextTransformationImpl;
}(java.lang.Object);
TextTransformationImpl = __decorate([ Interfaces([ android.text.method.TransformationMethod ]) ], TextTransformationImpl);
TextTransformation = TextTransformationImpl;
}
var TextBase = function(_super) {
__extends(TextBase, _super);
function TextBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
TextBase.prototype.initNativeView = function() {
this._defaultTransformationMethod = this.nativeView.getTransformationMethod();
_super.prototype.initNativeView.call(this);
};
TextBase.prototype.resetNativeView = function() {
_super.prototype.resetNativeView.call(this);
this.nativeView.setTransformationMethod(this._defaultTransformationMethod);
this._defaultTransformationMethod = null;
};
TextBase.prototype[text_base_common_1.textProperty.setNative] = function(value) {
if (this.formattedText) {
return;
}
this._setNativeText();
};
TextBase.prototype[text_base_common_1.formattedTextProperty.setNative] = function(value) {
if (this.secure) {
return;
}
initializeTextTransformation();
var spannableStringBuilder = createSpannableStringBuilder(value);
this.nativeView.setText(spannableStringBuilder);
text_base_common_1.textProperty.nativeValueChange(this, value === null || value === undefined ? "" : value.toString());
if (spannableStringBuilder && this.nativeView instanceof android.widget.Button && !(this.nativeView.getTransformationMethod() instanceof TextTransformation)) {
this.nativeView.setTransformationMethod(new TextTransformation(this));
}
};
TextBase.prototype[text_base_common_1.textTransformProperty.setNative] = function(value) {
if (value === "initial") {
this.nativeView.setTransformationMethod(this._defaultTransformationMethod);
return;
}
if (this.secure) {
return;
}
initializeTextTransformation();
this.nativeView.setTransformationMethod(new TextTransformation(this));
};
TextBase.prototype[text_base_common_1.textAlignmentProperty.getDefault] = function() {
return "initial";
};
TextBase.prototype[text_base_common_1.textAlignmentProperty.setNative] = function(value) {
var verticalGravity = this.nativeView.getGravity() & android.view.Gravity.VERTICAL_GRAVITY_MASK;
switch (value) {
case "initial":
case "left":
this.nativeView.setGravity(android.view.Gravity.LEFT | verticalGravity);
break;

case "center":
this.nativeView.setGravity(android.view.Gravity.CENTER_HORIZONTAL | verticalGravity);
break;

case "right":
this.nativeView.setGravity(android.view.Gravity.RIGHT | verticalGravity);
break;
}
};
TextBase.prototype[text_base_common_1.whiteSpaceProperty.setNative] = function(value) {
var nativeView = this.nativeView;
switch (value) {
case "initial":
case "normal":
nativeView.setSingleLine(false);
nativeView.setEllipsize(null);
break;

case "nowrap":
nativeView.setSingleLine(true);
nativeView.setEllipsize(android.text.TextUtils.TruncateAt.END);
break;
}
};
TextBase.prototype[text_base_common_1.colorProperty.getDefault] = function() {
return this.nativeView.getTextColors();
};
TextBase.prototype[text_base_common_1.colorProperty.setNative] = function(value) {
if (!this.formattedText || !(value instanceof text_base_common_1.Color)) {
if (value instanceof text_base_common_1.Color) {
this.nativeView.setTextColor(value.android);
} else {
this.nativeView.setTextColor(value);
}
}
};
TextBase.prototype[text_base_common_1.fontSizeProperty.getDefault] = function() {
return {
nativeSize: this.nativeView.getTextSize()
};
};
TextBase.prototype[text_base_common_1.fontSizeProperty.setNative] = function(value) {
if (!this.formattedText || typeof value !== "number") {
if (typeof value === "number") {
this.nativeView.setTextSize(value);
} else {
this.nativeView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, value.nativeSize);
}
}
};
TextBase.prototype[text_base_common_1.fontInternalProperty.getDefault] = function() {
return this.nativeView.getTypeface();
};
TextBase.prototype[text_base_common_1.fontInternalProperty.setNative] = function(value) {
if (!this.formattedText || !(value instanceof font_1.Font)) {
this.nativeView.setTypeface(value instanceof font_1.Font ? value.getAndroidTypeface() : value);
}
};
TextBase.prototype[text_base_common_1.textDecorationProperty.setNative] = function(value) {
var flags;
switch (value) {
case "none":
flags = 0;
break;

case "underline":
flags = android.graphics.Paint.UNDERLINE_TEXT_FLAG;
break;

case "line-through":
flags = android.graphics.Paint.STRIKE_THRU_TEXT_FLAG;
break;

case "underline line-through":
flags = android.graphics.Paint.UNDERLINE_TEXT_FLAG | android.graphics.Paint.STRIKE_THRU_TEXT_FLAG;
break;
}
this.nativeView.setPaintFlags(flags);
this._setNativeText();
};
TextBase.prototype[text_base_common_1.letterSpacingProperty.getDefault] = function() {
return org.nativescript.widgets.ViewHelper.getLetterspacing(this.nativeView);
};
TextBase.prototype[text_base_common_1.letterSpacingProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setLetterspacing(this.nativeView, value);
};
TextBase.prototype[text_base_common_1.paddingTopProperty.getDefault] = function() {
return {
value: this._defaultPaddingTop,
unit: "px"
};
};
TextBase.prototype[text_base_common_1.paddingTopProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingTop(this.nativeView, text_base_common_1.Length.toDevicePixels(value, 0) + text_base_common_1.Length.toDevicePixels(this.style.borderTopWidth, 0));
};
TextBase.prototype[text_base_common_1.paddingRightProperty.getDefault] = function() {
return {
value: this._defaultPaddingRight,
unit: "px"
};
};
TextBase.prototype[text_base_common_1.paddingRightProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingRight(this.nativeView, text_base_common_1.Length.toDevicePixels(value, 0) + text_base_common_1.Length.toDevicePixels(this.style.borderRightWidth, 0));
};
TextBase.prototype[text_base_common_1.paddingBottomProperty.getDefault] = function() {
return {
value: this._defaultPaddingBottom,
unit: "px"
};
};
TextBase.prototype[text_base_common_1.paddingBottomProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingBottom(this.nativeView, text_base_common_1.Length.toDevicePixels(value, 0) + text_base_common_1.Length.toDevicePixels(this.style.borderBottomWidth, 0));
};
TextBase.prototype[text_base_common_1.paddingLeftProperty.getDefault] = function() {
return {
value: this._defaultPaddingLeft,
unit: "px"
};
};
TextBase.prototype[text_base_common_1.paddingLeftProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingLeft(this.nativeView, text_base_common_1.Length.toDevicePixels(value, 0) + text_base_common_1.Length.toDevicePixels(this.style.borderLeftWidth, 0));
};
TextBase.prototype._setNativeText = function() {
var transformedText;
if (this.formattedText) {
transformedText = createSpannableStringBuilder(this.formattedText);
} else {
var text = this.text;
var stringValue = text === null || text === undefined ? "" : text.toString();
transformedText = getTransformedText(stringValue, this.textTransform);
}
this.nativeView.setText(transformedText);
};
return TextBase;
}(text_base_common_1.TextBaseCommon);
exports.TextBase = TextBase;
function getCapitalizedString(str) {
var words = str.split(" ");
var newWords = [];
for (var i = 0, length_1 = words.length; i < length_1; i++) {
var word = words[i].toLowerCase();
newWords.push(word.substr(0, 1).toUpperCase() + word.substring(1));
}
return newWords.join(" ");
}
function getTransformedText(text, textTransform) {
switch (textTransform) {
case "uppercase":
return text.toUpperCase();

case "lowercase":
return text.toLowerCase();

case "capitalize":
return getCapitalizedString(text);

case "none":
default:
return text;
}
}
exports.getTransformedText = getTransformedText;
function createSpannableStringBuilder(formattedString) {
if (!formattedString) {
return null;
}
var ssb = new android.text.SpannableStringBuilder();
for (var i = 0, spanStart = 0, spanLength = 0, length_2 = formattedString.spans.length; i < length_2; i++) {
var span = formattedString.spans.getItem(i);
var text = span.text;
var textTransform = formattedString.parent.textTransform;
var spanText = text === null || text === undefined ? "" : text.toString();
if (textTransform && textTransform !== "none") {
spanText = getTransformedText(spanText, textTransform);
}
spanLength = spanText.length;
if (spanLength > 0) {
ssb.insert(spanStart, spanText);
setSpanModifiers(ssb, span, spanStart, spanStart + spanLength);
spanStart += spanLength;
}
}
return ssb;
}
function setSpanModifiers(ssb, span, start, end) {
var spanStyle = span.style;
var bold = text_base_common_1.isBold(spanStyle.fontWeight);
var italic = spanStyle.fontStyle === "italic";
if (bold && italic) {
ssb.setSpan(new android.text.style.StyleSpan(android.graphics.Typeface.BOLD_ITALIC), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
} else if (bold) {
ssb.setSpan(new android.text.style.StyleSpan(android.graphics.Typeface.BOLD), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
} else if (italic) {
ssb.setSpan(new android.text.style.StyleSpan(android.graphics.Typeface.ITALIC), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
}
var fontFamily = span.fontFamily;
if (fontFamily) {
var font = new font_1.Font(fontFamily, 0, italic ? "italic" : "normal", bold ? "bold" : "normal");
var typeface = font.getAndroidTypeface() || android.graphics.Typeface.create(fontFamily, 0);
var typefaceSpan = new org.nativescript.widgets.CustomTypefaceSpan(fontFamily, typeface);
ssb.setSpan(typefaceSpan, start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
}
var realFontSize = span.fontSize;
if (realFontSize) {
ssb.setSpan(new android.text.style.AbsoluteSizeSpan(realFontSize * text_base_common_1.layout.getDisplayDensity()), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
}
var color = span.color;
if (color) {
ssb.setSpan(new android.text.style.ForegroundColorSpan(color.android), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
}
var backgroundColor;
if (style_properties_1.backgroundColorProperty.isSet(spanStyle)) {
backgroundColor = spanStyle.backgroundColor;
} else if (style_properties_1.backgroundColorProperty.isSet(span.parent.style)) {
backgroundColor = span.parent.style.backgroundColor;
} else if (style_properties_1.backgroundColorProperty.isSet(span.parent.parent.style)) {
backgroundColor = span.parent.parent.style.backgroundColor;
}
if (backgroundColor) {
ssb.setSpan(new android.text.style.BackgroundColorSpan(backgroundColor.android), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
}
var valueSource;
if (text_base_common_1.textDecorationProperty.isSet(spanStyle)) {
valueSource = spanStyle;
} else if (text_base_common_1.textDecorationProperty.isSet(span.parent.style)) {
valueSource = span.parent.style;
} else if (text_base_common_1.textDecorationProperty.isSet(span.parent.parent.style)) {
valueSource = span.parent.parent.style;
}
if (valueSource) {
var textDecorations = valueSource.textDecoration;
var underline_1 = textDecorations.indexOf("underline") !== -1;
if (underline_1) {
ssb.setSpan(new android.text.style.UnderlineSpan(), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
}
var strikethrough = textDecorations.indexOf("line-through") !== -1;
if (strikethrough) {
ssb.setSpan(new android.text.style.StrikethroughSpan(), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
}
}
}
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
var formatted_string_1 = __webpack_require__(71);
exports.FormattedString = formatted_string_1.FormattedString;
exports.Span = formatted_string_1.Span;
__export(__webpack_require__(12));
var CHILD_SPAN = "Span";
var CHILD_FORMATTED_TEXT = "formattedText";
var CHILD_FORMATTED_STRING = "FormattedString";
var TextBaseCommon = function(_super) {
__extends(TextBaseCommon, _super);
function TextBaseCommon() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(TextBaseCommon.prototype, "fontFamily", {
get: function() {
return this.style.fontFamily;
},
set: function(value) {
this.style.fontFamily = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "fontSize", {
get: function() {
return this.style.fontSize;
},
set: function(value) {
this.style.fontSize = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "fontStyle", {
get: function() {
return this.style.fontStyle;
},
set: function(value) {
this.style.fontStyle = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "fontWeight", {
get: function() {
return this.style.fontWeight;
},
set: function(value) {
this.style.fontWeight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "letterSpacing", {
get: function() {
return this.style.letterSpacing;
},
set: function(value) {
this.style.letterSpacing = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "textAlignment", {
get: function() {
return this.style.textAlignment;
},
set: function(value) {
this.style.textAlignment = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "textDecoration", {
get: function() {
return this.style.textDecoration;
},
set: function(value) {
this.style.textDecoration = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "textTransform", {
get: function() {
return this.style.textTransform;
},
set: function(value) {
this.style.textTransform = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "whiteSpace", {
get: function() {
return this.style.whiteSpace;
},
set: function(value) {
this.style.whiteSpace = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "padding", {
get: function() {
return this.style.padding;
},
set: function(value) {
this.style.padding = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "paddingTop", {
get: function() {
return this.style.paddingTop;
},
set: function(value) {
this.style.paddingTop = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "paddingRight", {
get: function() {
return this.style.paddingRight;
},
set: function(value) {
this.style.paddingRight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "paddingBottom", {
get: function() {
return this.style.paddingBottom;
},
set: function(value) {
this.style.paddingBottom = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBaseCommon.prototype, "paddingLeft", {
get: function() {
return this.style.paddingLeft;
},
set: function(value) {
this.style.paddingLeft = value;
},
enumerable: true,
configurable: true
});
TextBaseCommon.prototype._onFormattedTextContentsChanged = function(data) {
if (this.nativeView) {
this[exports.formattedTextProperty.setNative](data.value);
}
};
TextBaseCommon.prototype._addChildFromBuilder = function(name, value) {
if (name === CHILD_SPAN) {
if (!this.formattedText) {
var formattedText = new formatted_string_1.FormattedString();
formattedText.spans.push(value);
this.formattedText = formattedText;
} else {
this.formattedText.spans.push(value);
}
} else if (name === CHILD_FORMATTED_TEXT || name === CHILD_FORMATTED_STRING) {
this.formattedText = value;
}
};
TextBaseCommon.prototype._requestLayoutOnTextChanged = function() {
this.requestLayout();
};
TextBaseCommon.prototype.eachChild = function(callback) {
var text = this.formattedText;
if (text) {
callback(text);
}
};
TextBaseCommon.prototype._setNativeText = function() {};
return TextBaseCommon;
}(view_1.View);
exports.TextBaseCommon = TextBaseCommon;
function isBold(fontWeight) {
return fontWeight === "bold" || fontWeight === "700" || fontWeight === "800" || fontWeight === "900";
}
exports.isBold = isBold;
exports.textProperty = new view_1.Property({
name: "text",
defaultValue: ""
});
exports.textProperty.register(TextBaseCommon);
exports.formattedTextProperty = new view_1.Property({
name: "formattedText",
affectsLayout: view_1.isIOS,
valueChanged: onFormattedTextPropertyChanged
});
exports.formattedTextProperty.register(TextBaseCommon);
function onFormattedTextPropertyChanged(textBase, oldValue, newValue) {
if (oldValue) {
oldValue.off(view_1.Observable.propertyChangeEvent, textBase._onFormattedTextContentsChanged, textBase);
textBase._removeView(oldValue);
}
if (newValue) {
textBase._addView(newValue);
newValue.on(view_1.Observable.propertyChangeEvent, textBase._onFormattedTextContentsChanged, textBase);
}
}
var textAlignmentConverter = view_1.makeParser(view_1.makeValidator("initial", "left", "center", "right"));
exports.textAlignmentProperty = new view_1.InheritedCssProperty({
name: "textAlignment",
cssName: "text-align",
defaultValue: "initial",
valueConverter: textAlignmentConverter
});
exports.textAlignmentProperty.register(view_1.Style);
var textTransformConverter = view_1.makeParser(view_1.makeValidator("initial", "none", "capitalize", "uppercase", "lowercase"));
exports.textTransformProperty = new view_1.CssProperty({
name: "textTransform",
cssName: "text-transform",
defaultValue: "initial",
valueConverter: textTransformConverter
});
exports.textTransformProperty.register(view_1.Style);
var whiteSpaceConverter = view_1.makeParser(view_1.makeValidator("initial", "normal", "nowrap"));
exports.whiteSpaceProperty = new view_1.CssProperty({
name: "whiteSpace",
cssName: "white-space",
defaultValue: "initial",
affectsLayout: view_1.isIOS,
valueConverter: whiteSpaceConverter
});
exports.whiteSpaceProperty.register(view_1.Style);
var textDecorationConverter = view_1.makeParser(view_1.makeValidator("none", "underline", "line-through", "underline line-through"));
exports.textDecorationProperty = new view_1.CssProperty({
name: "textDecoration",
cssName: "text-decoration",
defaultValue: "none",
valueConverter: textDecorationConverter
});
exports.textDecorationProperty.register(view_1.Style);
exports.letterSpacingProperty = new view_1.CssProperty({
name: "letterSpacing",
cssName: "letter-spacing",
defaultValue: 0,
affectsLayout: view_1.isIOS,
valueConverter: function(v) {
return parseFloat(v);
}
});
exports.letterSpacingProperty.register(view_1.Style);
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var span_1 = __webpack_require__(72);
exports.Span = span_1.Span;
var observable_1 = __webpack_require__(32);
var observable_array_1 = __webpack_require__(73);
var view_1 = __webpack_require__(12);
var knownCollections;
(function(knownCollections) {
knownCollections.spans = "spans";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var CHILD_SPAN = "Span";
var FormattedString = function(_super) {
__extends(FormattedString, _super);
function FormattedString() {
var _this = _super.call(this) || this;
_this._spans = new observable_array_1.ObservableArray();
_this._spans.addEventListener(observable_array_1.ObservableArray.changeEvent, _this.onSpansCollectionChanged, _this);
return _this;
}
Object.defineProperty(FormattedString.prototype, "fontFamily", {
get: function() {
return this.style.fontFamily;
},
set: function(value) {
this.style.fontFamily = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "fontSize", {
get: function() {
return this.style.fontSize;
},
set: function(value) {
this.style.fontSize = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "fontStyle", {
get: function() {
return this.style.fontStyle;
},
set: function(value) {
this.style.fontStyle = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "fontWeight", {
get: function() {
return this.style.fontWeight;
},
set: function(value) {
this.style.fontWeight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "textDecoration", {
get: function() {
return this.style.textDecoration;
},
set: function(value) {
this.style.textDecoration = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "color", {
get: function() {
return this.style.color;
},
set: function(value) {
this.style.color = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "backgroundColor", {
get: function() {
return this.style.backgroundColor;
},
set: function(value) {
this.style.backgroundColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "spans", {
get: function() {
if (!this._spans) {
this._spans = new observable_array_1.ObservableArray();
}
return this._spans;
},
enumerable: true,
configurable: true
});
FormattedString.prototype.toString = function() {
var result = "";
for (var i = 0, length_1 = this._spans.length; i < length_1; i++) {
result += this._spans.getItem(i).text;
}
return result;
};
FormattedString.prototype._addArrayFromBuilder = function(name, value) {
if (name === knownCollections.spans) {
this.spans.push(value);
}
};
FormattedString.prototype._addChildFromBuilder = function(name, value) {
if (name === CHILD_SPAN) {
this.spans.push(value);
}
};
FormattedString.prototype.onSpansCollectionChanged = function(eventData) {
if (eventData.addedCount > 0) {
for (var i = 0; i < eventData.addedCount; i++) {
var span = eventData.object.getItem(eventData.index + i);
this._addView(span);
this.addPropertyChangeHandler(span);
}
}
if (eventData.removed && eventData.removed.length > 0) {
for (var p = 0; p < eventData.removed.length; p++) {
var span = eventData.removed[p];
this.removePropertyChangeHandler(span);
this._removeView(span);
}
}
this.notifyPropertyChange(".", this);
};
FormattedString.prototype.addPropertyChangeHandler = function(span) {
var style = span.style;
span.on(observable_1.Observable.propertyChangeEvent, this.onPropertyChange, this);
style.on("fontFamilyChange", this.onPropertyChange, this);
style.on("fontSizeChange", this.onPropertyChange, this);
style.on("fontStyleChange", this.onPropertyChange, this);
style.on("fontWeightChange", this.onPropertyChange, this);
style.on("textDecorationChange", this.onPropertyChange, this);
style.on("colorChange", this.onPropertyChange, this);
style.on("backgroundColorChange", this.onPropertyChange, this);
};
FormattedString.prototype.removePropertyChangeHandler = function(span) {
var style = span.style;
span.off(observable_1.Observable.propertyChangeEvent, this.onPropertyChange, this);
style.off("fontFamilyChange", this.onPropertyChange, this);
style.off("fontSizeChange", this.onPropertyChange, this);
style.off("fontStyleChange", this.onPropertyChange, this);
style.off("fontWeightChange", this.onPropertyChange, this);
style.off("textDecorationChange", this.onPropertyChange, this);
style.off("colorChange", this.onPropertyChange, this);
style.off("backgroundColorChange", this.onPropertyChange, this);
};
FormattedString.prototype.onPropertyChange = function(data) {
this.notifyPropertyChange(data.propertyName, this);
};
FormattedString.prototype.eachChild = function(callback) {
this.spans.forEach(function(v, i, arr) {
return callback(v);
});
};
return FormattedString;
}(view_1.ViewBase);
exports.FormattedString = FormattedString;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
var Span = function(_super) {
__extends(Span, _super);
function Span() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(Span.prototype, "fontFamily", {
get: function() {
return this.style.fontFamily;
},
set: function(value) {
this.style.fontFamily = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "fontSize", {
get: function() {
return this.style.fontSize;
},
set: function(value) {
this.style.fontSize = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "fontStyle", {
get: function() {
return this.style.fontStyle;
},
set: function(value) {
this.style.fontStyle = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "fontWeight", {
get: function() {
return this.style.fontWeight;
},
set: function(value) {
this.style.fontWeight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "textDecoration", {
get: function() {
return this.style.textDecoration;
},
set: function(value) {
this.style.textDecoration = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "color", {
get: function() {
return this.style.color;
},
set: function(value) {
this.style.color = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "backgroundColor", {
get: function() {
return this.style.backgroundColor;
},
set: function(value) {
this.style.backgroundColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "text", {
get: function() {
return this._text;
},
set: function(value) {
if (this._text !== value) {
this._text = value;
this.notifyPropertyChange("text", value);
}
},
enumerable: true,
configurable: true
});
Span.prototype._setTextInternal = function(value) {
this._text = value;
};
return Span;
}(view_1.ViewBase);
exports.Span = Span;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var observable = __webpack_require__(32);
var types = __webpack_require__(17);
var ChangeType = function() {
function ChangeType() {}
return ChangeType;
}();
ChangeType.Add = "add";
ChangeType.Delete = "delete";
ChangeType.Update = "update";
ChangeType.Splice = "splice";
exports.ChangeType = ChangeType;
var CHANGE = "change";
var ObservableArray = function(_super) {
__extends(ObservableArray, _super);
function ObservableArray() {
var _this = _super.call(this) || this;
if (arguments.length === 1 && Array.isArray(arguments[0])) {
_this._array = arguments[0].slice();
} else {
_this._array = Array.apply(null, arguments);
}
_this._addArgs = {
eventName: CHANGE,
object: _this,
action: ChangeType.Add,
index: null,
removed: new Array(),
addedCount: 1
};
_this._deleteArgs = {
eventName: CHANGE,
object: _this,
action: ChangeType.Delete,
index: null,
removed: null,
addedCount: 0
};
return _this;
}
ObservableArray.prototype.getItem = function(index) {
return this._array[index];
};
ObservableArray.prototype.setItem = function(index, value) {
var oldValue = this._array[index];
this._array[index] = value;
this.notify({
eventName: CHANGE,
object: this,
action: ChangeType.Update,
index: index,
removed: [ oldValue ],
addedCount: 1
});
};
Object.defineProperty(ObservableArray.prototype, "length", {
get: function() {
return this._array.length;
},
set: function(value) {
if (types.isNumber(value) && this._array && this._array.length !== value) {
this.splice(value, this._array.length - value);
}
},
enumerable: true,
configurable: true
});
ObservableArray.prototype.toString = function() {
return this._array.toString();
};
ObservableArray.prototype.toLocaleString = function() {
return this._array.toLocaleString();
};
ObservableArray.prototype.concat = function() {
this._addArgs.index = this._array.length;
var result = this._array.concat.apply(this._array, arguments);
return result;
};
ObservableArray.prototype.join = function(separator) {
return this._array.join(separator);
};
ObservableArray.prototype.pop = function() {
this._deleteArgs.index = this._array.length - 1;
var result = this._array.pop();
this._deleteArgs.removed = [ result ];
this.notify(this._deleteArgs);
this._notifyLengthChange();
return result;
};
ObservableArray.prototype.push = function() {
this._addArgs.index = this._array.length;
if (arguments.length === 1 && Array.isArray(arguments[0])) {
var source = arguments[0];
for (var i = 0, l = source.length; i < l; i++) {
this._array.push(source[i]);
}
} else {
this._array.push.apply(this._array, arguments);
}
this._addArgs.addedCount = this._array.length - this._addArgs.index;
this.notify(this._addArgs);
this._notifyLengthChange();
return this._array.length;
};
ObservableArray.prototype._notifyLengthChange = function() {
var lengthChangedData = this._createPropertyChangeData("length", this._array.length);
this.notify(lengthChangedData);
};
ObservableArray.prototype.reverse = function() {
return this._array.reverse();
};
ObservableArray.prototype.shift = function() {
var result = this._array.shift();
this._deleteArgs.index = 0;
this._deleteArgs.removed = [ result ];
this.notify(this._deleteArgs);
this._notifyLengthChange();
return result;
};
ObservableArray.prototype.slice = function(start, end) {
return this._array.slice(start, end);
};
ObservableArray.prototype.sort = function(compareFn) {
return this._array.sort(compareFn);
};
ObservableArray.prototype.splice = function(start, deleteCount) {
var length = this._array.length;
var result = this._array.splice.apply(this._array, arguments);
this.notify({
eventName: CHANGE,
object: this,
action: ChangeType.Splice,
index: start,
removed: result,
addedCount: this._array.length > length ? this._array.length - length : 0
});
if (this._array.length !== length) {
this._notifyLengthChange();
}
return result;
};
ObservableArray.prototype.unshift = function() {
var length = this._array.length;
var result = this._array.unshift.apply(this._array, arguments);
this._addArgs.index = 0;
this._addArgs.addedCount = result - length;
this.notify(this._addArgs);
this._notifyLengthChange();
return result;
};
ObservableArray.prototype.indexOf = function(searchElement, fromIndex) {
var index = fromIndex ? fromIndex : 0;
for (var i = index, l = this._array.length; i < l; i++) {
if (this._array[i] === searchElement) {
return i;
}
}
return -1;
};
ObservableArray.prototype.lastIndexOf = function(searchElement, fromIndex) {
var index = fromIndex ? fromIndex : this._array.length - 1;
for (var i = index; i >= 0; i--) {
if (this._array[i] === searchElement) {
return i;
}
}
return -1;
};
ObservableArray.prototype.every = function(callbackfn, thisArg) {
return this._array.every(callbackfn, thisArg);
};
ObservableArray.prototype.some = function(callbackfn, thisArg) {
return this._array.some(callbackfn, thisArg);
};
ObservableArray.prototype.forEach = function(callbackfn, thisArg) {
this._array.forEach(callbackfn, thisArg);
};
ObservableArray.prototype.map = function(callbackfn, thisArg) {
return this._array.map(callbackfn, thisArg);
};
ObservableArray.prototype.filter = function(callbackfn, thisArg) {
return this._array.filter(callbackfn, thisArg);
};
ObservableArray.prototype.reduce = function(callbackfn, initialValue) {
return this._array.reduce(callbackfn, initialValue);
};
ObservableArray.prototype.reduceRight = function(callbackfn, initialValue) {
return this._array.reduceRight(callbackfn, initialValue);
};
return ObservableArray;
}(observable.Observable);
ObservableArray.changeEvent = CHANGE;
exports.ObservableArray = ObservableArray;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var text_field_common_1 = __webpack_require__(75);
__export(__webpack_require__(75));
var TextField = function(_super) {
__extends(TextField, _super);
function TextField() {
return _super !== null && _super.apply(this, arguments) || this;
}
TextField.prototype._configureEditText = function(editText) {
editText.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
editText.setLines(1);
editText.setMaxLines(1);
editText.setHorizontallyScrolling(true);
};
TextField.prototype._onReturnPress = function() {
this.notify({
eventName: TextField.returnPressEvent,
object: this
});
};
TextField.prototype[text_field_common_1.secureProperty.getDefault] = function() {
return false;
};
TextField.prototype[text_field_common_1.secureProperty.setNative] = function(value) {
var nativeView = this.nativeView;
var currentInputType = nativeView.getInputType();
var currentClass = currentInputType & android.text.InputType.TYPE_MASK_CLASS;
var currentFlags = currentInputType & android.text.InputType.TYPE_MASK_FLAGS;
var newInputType = currentInputType;
if (value) {
if (currentClass === android.text.InputType.TYPE_CLASS_TEXT) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD;
} else if (currentClass === android.text.InputType.TYPE_CLASS_NUMBER) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_NUMBER_VARIATION_PASSWORD;
}
newInputType = newInputType & ~28672;
} else {
if (currentClass === android.text.InputType.TYPE_CLASS_TEXT) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL;
} else if (currentClass === android.text.InputType.TYPE_CLASS_NUMBER) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL;
}
}
this._setInputType(newInputType);
};
TextField.prototype[text_field_common_1.whiteSpaceProperty.getDefault] = function() {
return "nowrap";
};
TextField.prototype[text_field_common_1.whiteSpaceProperty.setNative] = function(value) {};
return TextField;
}(text_field_common_1.TextFieldBase);
exports.TextField = TextField;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var editable_text_base_1 = __webpack_require__(76);
__export(__webpack_require__(76));
var TextFieldBase = function(_super) {
__extends(TextFieldBase, _super);
function TextFieldBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return TextFieldBase;
}(editable_text_base_1.EditableTextBase);
TextFieldBase.returnPressEvent = "returnPress";
exports.TextFieldBase = TextFieldBase;
exports.secureProperty = new editable_text_base_1.Property({
name: "secure",
defaultValue: false,
valueConverter: editable_text_base_1.booleanConverter
});
exports.secureProperty.register(TextFieldBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var editable_text_base_common_1 = __webpack_require__(77);
var utils_1 = __webpack_require__(14);
__export(__webpack_require__(77));
var dismissKeyboardTimeoutId;
var EditTextListeners;
function initializeEditTextListeners() {
if (EditTextListeners) {
return;
}
var EditTextListenersImpl = function(_super) {
__extends(EditTextListenersImpl, _super);
function EditTextListenersImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
EditTextListenersImpl.prototype.beforeTextChanged = function(text, start, count, after) {};
EditTextListenersImpl.prototype.onTextChanged = function(text, start, before, count) {};
EditTextListenersImpl.prototype.afterTextChanged = function(editable) {
var owner = this.owner;
if (!owner || owner._inputTypeChange) {
return;
}
switch (owner.updateTextTrigger) {
case "focusLost":
owner._dirtyTextAccumulator = editable.toString();
break;

case "textChanged":
editable_text_base_common_1.textProperty.nativeValueChange(owner, editable.toString());
break;

default:
throw new Error("Invalid updateTextTrigger: " + owner.updateTextTrigger);
}
};
EditTextListenersImpl.prototype.onFocusChange = function(view, hasFocus) {
var owner = this.owner;
if (!owner) {
return;
}
if (hasFocus) {
if (dismissKeyboardTimeoutId) {
clearTimeout(dismissKeyboardTimeoutId);
dismissKeyboardTimeoutId = undefined;
}
} else {
if (owner._dirtyTextAccumulator || owner._dirtyTextAccumulator === "") {
editable_text_base_common_1.textProperty.nativeValueChange(owner, owner._dirtyTextAccumulator);
owner._dirtyTextAccumulator = undefined;
}
dismissKeyboardTimeoutId = setTimeout(function() {
owner.dismissSoftInput();
dismissKeyboardTimeoutId = null;
}, 1);
owner.notify({
eventName: EditableTextBase.blurEvent,
object: owner
});
}
};
EditTextListenersImpl.prototype.onEditorAction = function(textView, actionId, event) {
var owner = this.owner;
if (!owner) {
return;
}
if (actionId === android.view.inputmethod.EditorInfo.IME_ACTION_DONE || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_GO || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_SEND || event && event.getKeyCode() === android.view.KeyEvent.KEYCODE_ENTER) {
if (textView.getMaxLines() === 1) {
owner.dismissSoftInput();
}
owner._onReturnPress();
}
if (actionId === android.view.inputmethod.EditorInfo.IME_ACTION_NEXT) {
owner._onReturnPress();
}
return false;
};
return EditTextListenersImpl;
}(java.lang.Object);
EditTextListenersImpl = __decorate([ Interfaces([ android.text.TextWatcher, android.view.View.OnFocusChangeListener, android.widget.TextView.OnEditorActionListener ]) ], EditTextListenersImpl);
EditTextListeners = EditTextListenersImpl;
}
var EditableTextBase = function(_super) {
__extends(EditableTextBase, _super);
function EditableTextBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
EditableTextBase.prototype._onReturnPress = function() {};
EditableTextBase.prototype.createNativeView = function() {
initializeEditTextListeners();
var editText = new android.widget.EditText(this._context);
this._configureEditText(editText);
this._inputType = editText.getInputType();
var listeners = new EditTextListeners(this);
editText.addTextChangedListener(listeners);
editText.setOnFocusChangeListener(listeners);
editText.setOnEditorActionListener(listeners);
editText.listener = listeners;
return editText;
};
EditableTextBase.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
var nativeView = this.nativeView;
nativeView.listener.owner = this;
this._keyListenerCache = nativeView.getKeyListener();
};
EditableTextBase.prototype._disposeNativeView = function(force) {
var nativeView = this.nativeView;
nativeView.listener.owner = null;
nativeView.setInputType(this._inputType);
this._keyListenerCache = null;
};
EditableTextBase.prototype.dismissSoftInput = function() {
utils_1.ad.dismissSoftInput(this.nativeView);
};
EditableTextBase.prototype.focus = function() {
var result = _super.prototype.focus.call(this);
if (result) {
utils_1.ad.showSoftInput(this.nativeView);
}
return result;
};
EditableTextBase.prototype._setInputType = function(inputType) {
var nativeView = this.nativeView;
try {
this._inputTypeChange = true;
nativeView.setInputType(inputType);
} finally {
this._inputTypeChange = false;
}
var listener = nativeView.getKeyListener();
if (listener) {
this._keyListenerCache = listener;
}
if (!this.editable) {
nativeView.setKeyListener(null);
}
};
EditableTextBase.prototype[editable_text_base_common_1.textProperty.getDefault] = function() {
return this.nativeView.getText();
};
EditableTextBase.prototype[editable_text_base_common_1.textProperty.setNative] = function(value) {
var text = value === null || value === undefined ? "" : value.toString();
this.nativeView.setText(text, android.widget.TextView.BufferType.EDITABLE);
};
EditableTextBase.prototype[editable_text_base_common_1.keyboardTypeProperty.getDefault] = function() {
var inputType = this.nativeView.getInputType();
switch (inputType) {
case android.text.InputType.TYPE_CLASS_DATETIME | android.text.InputType.TYPE_DATETIME_VARIATION_NORMAL:
return "datetime";

case android.text.InputType.TYPE_CLASS_PHONE:
return "phone";

case android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED | android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL:
return "number";

case android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_URI:
return "url";

case android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS:
return "email";

default:
return inputType.toString();
}
};
EditableTextBase.prototype[editable_text_base_common_1.keyboardTypeProperty.setNative] = function(value) {
var newInputType;
switch (value) {
case "datetime":
newInputType = android.text.InputType.TYPE_CLASS_DATETIME | android.text.InputType.TYPE_DATETIME_VARIATION_NORMAL;
break;

case "phone":
newInputType = android.text.InputType.TYPE_CLASS_PHONE;
break;

case "number":
newInputType = android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED | android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL;
break;

case "url":
newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_URI;
break;

case "email":
newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS;
break;

default:
var inputType = +value;
if (!isNaN(inputType)) {
newInputType = inputType;
} else {
newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL;
}
break;
}
this._setInputType(newInputType);
};
EditableTextBase.prototype[editable_text_base_common_1.returnKeyTypeProperty.getDefault] = function() {
var ime = this.nativeView.getImeOptions();
switch (ime) {
case android.view.inputmethod.EditorInfo.IME_ACTION_DONE:
return "done";

case android.view.inputmethod.EditorInfo.IME_ACTION_GO:
return "go";

case android.view.inputmethod.EditorInfo.IME_ACTION_NEXT:
return "next";

case android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH:
return "search";

case android.view.inputmethod.EditorInfo.IME_ACTION_SEND:
return "send";

default:
return ime.toString();
}
};
EditableTextBase.prototype[editable_text_base_common_1.returnKeyTypeProperty.setNative] = function(value) {
var newImeOptions;
switch (value) {
case "done":
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_DONE;
break;

case "go":
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_GO;
break;

case "next":
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_NEXT;
break;

case "search":
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH;
break;

case "send":
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_SEND;
break;

default:
var ime = +value;
if (!isNaN(ime)) {
newImeOptions = ime;
} else {
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_UNSPECIFIED;
}
break;
}
this.nativeView.setImeOptions(newImeOptions);
};
EditableTextBase.prototype[editable_text_base_common_1.editableProperty.getDefault] = function() {
return true;
};
EditableTextBase.prototype[editable_text_base_common_1.editableProperty.setNative] = function(value) {
if (value) {
this.nativeView.setKeyListener(this._keyListenerCache);
} else {
this.nativeView.setKeyListener(null);
}
};
EditableTextBase.prototype[editable_text_base_common_1.autocapitalizationTypeProperty.getDefault] = function() {
var inputType = this.nativeView.getInputType();
if ((inputType & android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS) === android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS) {
return "words";
} else if ((inputType & android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES) === android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES) {
return "sentences";
} else if ((inputType & android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS) === android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS) {
return "allcharacters";
} else {
return inputType.toString();
}
};
EditableTextBase.prototype[editable_text_base_common_1.autocapitalizationTypeProperty.setNative] = function(value) {
var inputType = this.nativeView.getInputType();
inputType = inputType & ~28672;
switch (value) {
case "none":
break;

case "words":
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS;
break;

case "sentences":
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
break;

case "allcharacters":
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS;
break;

default:
var number = +value;
if (!isNaN(number)) {
inputType = number;
} else {
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
}
break;
}
this._setInputType(inputType);
};
EditableTextBase.prototype[editable_text_base_common_1.autocorrectProperty.getDefault] = function() {
var autocorrect = this.nativeView.getInputType();
if ((autocorrect & android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT) === android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT) {
return true;
}
return false;
};
EditableTextBase.prototype[editable_text_base_common_1.autocorrectProperty.setNative] = function(value) {
var inputType = this.nativeView.getInputType();
switch (value) {
case true:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
break;

case false:
inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
break;

default:
break;
}
this._setInputType(inputType);
};
EditableTextBase.prototype[editable_text_base_common_1.hintProperty.getDefault] = function() {
return this.nativeView.getHint();
};
EditableTextBase.prototype[editable_text_base_common_1.hintProperty.setNative] = function(value) {
this.nativeView.setHint(value + "");
};
EditableTextBase.prototype[editable_text_base_common_1.placeholderColorProperty.getDefault] = function() {
return this.nativeView.getHintTextColors();
};
EditableTextBase.prototype[editable_text_base_common_1.placeholderColorProperty.setNative] = function(value) {
if (value instanceof editable_text_base_common_1.Color) {
this.nativeView.setHintTextColor(value.android);
} else {
this.nativeView.setHintTextColor(value);
}
};
EditableTextBase.prototype[editable_text_base_common_1.textTransformProperty.setNative] = function(value) {};
return EditableTextBase;
}(editable_text_base_common_1.EditableTextBase);
exports.EditableTextBase = EditableTextBase;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var text_base_1 = __webpack_require__(69);
__export(__webpack_require__(69));
var EditableTextBase = function(_super) {
__extends(EditableTextBase, _super);
function EditableTextBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return EditableTextBase;
}(text_base_1.TextBase);
EditableTextBase.blurEvent = "blur";
exports.EditableTextBase = EditableTextBase;
exports.placeholderColorProperty = new text_base_1.CssProperty({
name: "placeholderColor",
cssName: "placeholder-color",
equalityComparer: text_base_1.Color.equals,
valueConverter: function(v) {
return new text_base_1.Color(v);
}
});
exports.placeholderColorProperty.register(text_base_1.Style);
var keyboardTypeConverter = text_base_1.makeParser(text_base_1.makeValidator("datetime", "phone", "number", "url", "email"));
exports.keyboardTypeProperty = new text_base_1.Property({
name: "keyboardType",
valueConverter: keyboardTypeConverter
});
exports.keyboardTypeProperty.register(EditableTextBase);
var returnKeyTypeConverter = text_base_1.makeParser(text_base_1.makeValidator("done", "next", "go", "search", "send"));
exports.returnKeyTypeProperty = new text_base_1.Property({
name: "returnKeyType",
valueConverter: returnKeyTypeConverter
});
exports.returnKeyTypeProperty.register(EditableTextBase);
exports.editableProperty = new text_base_1.Property({
name: "editable",
defaultValue: true,
valueConverter: text_base_1.booleanConverter
});
exports.editableProperty.register(EditableTextBase);
exports.updateTextTriggerProperty = new text_base_1.Property({
name: "updateTextTrigger",
defaultValue: "textChanged"
});
exports.updateTextTriggerProperty.register(EditableTextBase);
var autocapitalizationTypeConverter = text_base_1.makeParser(text_base_1.makeValidator("none", "words", "sentences", "allcharacters"));
exports.autocapitalizationTypeProperty = new text_base_1.Property({
name: "autocapitalizationType",
defaultValue: "sentences",
valueConverter: autocapitalizationTypeConverter
});
exports.autocapitalizationTypeProperty.register(EditableTextBase);
exports.autocorrectProperty = new text_base_1.Property({
name: "autocorrect",
valueConverter: text_base_1.booleanConverter
});
exports.autocorrectProperty.register(EditableTextBase);
exports.hintProperty = new text_base_1.Property({
name: "hint",
defaultValue: ""
});
exports.hintProperty.register(EditableTextBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var text_base_1 = __webpack_require__(69);
__export(__webpack_require__(69));
var TextView;
var Label = function(_super) {
__extends(Label, _super);
function Label() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(Label.prototype, "textWrap", {
get: function() {
return this.style.whiteSpace === "normal";
},
set: function(value) {
this.style.whiteSpace = value ? "normal" : "nowrap";
},
enumerable: true,
configurable: true
});
Label.prototype.createNativeView = function() {
if (!TextView) {
TextView = android.widget.TextView;
}
return new TextView(this._context);
};
Label.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
var textView = this.nativeView;
textView.setSingleLine(true);
textView.setEllipsize(android.text.TextUtils.TruncateAt.END);
};
Label.prototype[text_base_1.whiteSpaceProperty.setNative] = function(value) {
var newValue = value === "initial" ? "nowrap" : value;
_super.prototype[text_base_1.whiteSpaceProperty.setNative].call(this, newValue);
};
return Label;
}(text_base_1.TextBase);
exports.Label = Label;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var http = __webpack_require__(80);
var types = __webpack_require__(17);
var XMLHttpRequestResponseType;
(function(XMLHttpRequestResponseType) {
XMLHttpRequestResponseType.empty = "";
XMLHttpRequestResponseType.text = "text";
XMLHttpRequestResponseType.json = "json";
})(XMLHttpRequestResponseType || (XMLHttpRequestResponseType = {}));
var XMLHttpRequest = function() {
function XMLHttpRequest() {
this.UNSENT = 0;
this.OPENED = 1;
this.HEADERS_RECEIVED = 2;
this.LOADING = 3;
this.DONE = 4;
this._responseType = "";
this.textTypes = [ "text/plain", "application/xml", "text/html" ];
this._listeners = new Map();
this._readyState = this.UNSENT;
}
XMLHttpRequest.prototype.open = function(method, url, async, user, password) {
if (types.isString(method) && types.isString(url)) {
this._options = {
url: url,
method: method
};
this._options.headers = {};
if (types.isString(user)) {
this._options.headers["user"] = user;
}
if (types.isString(password)) {
this._options.headers["password"] = password;
}
this._setReadyState(this.OPENED);
}
};
XMLHttpRequest.prototype.abort = function() {
this._errorFlag = true;
this._response = null;
this._responseTextReader = null;
this._headers = null;
this._status = null;
if (this._readyState === this.UNSENT || this._readyState === this.OPENED || this._readyState === this.DONE) {
this._readyState = this.UNSENT;
} else {
this._setReadyState(this.DONE);
}
};
XMLHttpRequest.prototype.send = function(data) {
var _this = this;
this._errorFlag = false;
this._response = null;
this._responseTextReader = null;
this._headers = null;
this._status = null;
if (types.isDefined(this._options)) {
if (types.isString(data) && this._options.method !== "GET") {
this._options.content = data;
} else if (data instanceof FormData) {
this._options.content = data.toString();
}
http.request(this._options).then(function(r) {
if (!_this._errorFlag) {
_this._loadResponse(r);
}
}).catch(function(e) {
_this._errorFlag = true;
_this._setReadyState(_this.DONE, e);
});
}
};
XMLHttpRequest.prototype._loadResponse = function(r) {
this._status = r.statusCode;
this._response = r.content.raw + "";
this._headers = r.headers;
this._setReadyState(this.HEADERS_RECEIVED);
this._setReadyState(this.LOADING);
this._setResponseType();
this._responseTextReader = function() {
return r.content.toString();
};
this._addToStringOnResponse();
if (this.responseType === XMLHttpRequestResponseType.json) {
this._response = JSON.parse(this.responseText);
} else if (this.responseType === XMLHttpRequestResponseType.text) {
this._response = this.responseText;
}
this._setReadyState(this.DONE);
};
XMLHttpRequest.prototype._addToStringOnResponse = function() {
var _this = this;
if (types.isObject(this.response)) {
Object.defineProperty(this._response, "toString", {
configurable: true,
enumerable: false,
writable: true,
value: function() {
return _this.responseText;
}
});
}
};
XMLHttpRequest.prototype.isTextContentType = function(contentType) {
var result = false;
for (var i = 0; i < this.textTypes.length; i++) {
if (contentType.toLowerCase().indexOf(this.textTypes[i]) >= 0) {
result = true;
break;
}
}
return result;
};
XMLHttpRequest.prototype._setResponseType = function() {
var header = this.getResponseHeader("Content-Type");
var contentType = header && header.toLowerCase();
if (contentType) {
if (contentType.indexOf("application/json") >= 0 || contentType.indexOf("+json") >= 0) {
this.responseType = XMLHttpRequestResponseType.json;
} else if (this.isTextContentType(contentType)) {
this.responseType = XMLHttpRequestResponseType.text;
}
} else {
this.responseType = XMLHttpRequestResponseType.text;
}
};
XMLHttpRequest.prototype.addEventListener = function(eventName, handler) {
if (eventName !== "load" && eventName !== "error") {
throw new Error("Event not supported: " + eventName);
}
var handlers = this._listeners.get(eventName) || [];
handlers.push(handler);
this._listeners.set(eventName, handlers);
};
XMLHttpRequest.prototype.removeEventListener = function(eventName, toDetach) {
var handlers = this._listeners.get(eventName) || [];
handlers = handlers.filter(function(handler) {
return handler !== toDetach;
});
this._listeners.set(eventName, handlers);
};
XMLHttpRequest.prototype.emitEvent = function(eventName) {
var args = [];
for (var _i = 1; _i < arguments.length; _i++) {
args[_i - 1] = arguments[_i];
}
var handlers = this._listeners.get(eventName) || [];
handlers.forEach(function(handler) {
handler.apply(void 0, args);
});
};
XMLHttpRequest.prototype.setRequestHeader = function(header, value) {
if (types.isDefined(this._options) && types.isString(header) && types.isString(value)) {
this._options.headers[header] = value;
}
};
XMLHttpRequest.prototype.getAllResponseHeaders = function() {
if (this._readyState < 2 || this._errorFlag) {
return "";
}
var result = "";
for (var i in this._headers) {
if (i !== "set-cookie" && i !== "set-cookie2") {
result += i + ": " + this._headers[i] + "\r\n";
}
}
return result.substr(0, result.length - 2);
};
XMLHttpRequest.prototype.getResponseHeader = function(header) {
if (types.isString(header) && this._readyState > 1 && this._headers && !this._errorFlag) {
header = header.toLowerCase();
for (var i in this._headers) {
if (i.toLowerCase() === header) {
return this._headers[i];
}
}
}
return null;
};
XMLHttpRequest.prototype.overrideMimeType = function(mime) {};
Object.defineProperty(XMLHttpRequest.prototype, "readyState", {
get: function() {
return this._readyState;
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "responseType", {
get: function() {
return this._responseType;
},
set: function(value) {
if (value === XMLHttpRequestResponseType.empty || value in XMLHttpRequestResponseType) {
this._responseType = value;
} else {
throw new Error("Response type of '" + value + "' not supported.");
}
},
enumerable: true,
configurable: true
});
XMLHttpRequest.prototype._setReadyState = function(value, error) {
if (this._readyState !== value) {
this._readyState = value;
if (types.isFunction(this.onreadystatechange)) {
this.onreadystatechange();
}
}
if (this._readyState === this.DONE) {
if (this._errorFlag) {
if (types.isFunction(this.onerror)) {
this.onerror(error);
}
this.emitEvent("error", error);
} else {
if (types.isFunction(this.onload)) {
this.onload();
}
this.emitEvent("load");
}
}
};
Object.defineProperty(XMLHttpRequest.prototype, "responseText", {
get: function() {
if (types.isFunction(this._responseTextReader)) {
return this._responseTextReader();
}
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "response", {
get: function() {
return this._response;
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "status", {
get: function() {
return this._status;
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "statusText", {
get: function() {
if (this._readyState === this.UNSENT || this._readyState === this.OPENED || this._errorFlag) {
return "";
}
return statuses[this._status];
},
enumerable: true,
configurable: true
});
return XMLHttpRequest;
}();
exports.XMLHttpRequest = XMLHttpRequest;
var statuses = {
100: "Continue",
101: "Switching Protocols",
200: "OK",
201: "Created",
202: "Accepted",
203: "Non - Authoritative Information",
204: "No Content",
205: "Reset Content",
206: "Partial Content",
300: "Multiple Choices",
301: "Moved Permanently",
302: "Found",
303: "See Other",
304: "Not Modified",
305: "Use Proxy",
307: "Temporary Redirect",
400: "Bad Request",
401: "Unauthorized",
402: "Payment Required",
403: "Forbidden",
404: "Not Found",
405: "Method Not Allowed",
406: "Not Acceptable",
407: "Proxy Authentication Required",
408: "Request Timeout",
409: "Conflict",
410: "Gone",
411: "Length Required",
412: "Precondition Failed",
413: "Request Entity Too Large",
414: "Request - URI Too Long",
415: "Unsupported Media Type",
416: "Requested Range Not Satisfiable",
417: "Expectation Failed",
500: "Internal Server Error",
501: "Not Implemented",
502: "Bad Gateway",
503: "Service Unavailable",
504: "Gateway Timeout",
505: "HTTP Version Not Supported"
};
var FormData = function() {
function FormData() {
this._data = new Map();
}
FormData.prototype.append = function(name, value) {
this._data.set(name, value);
};
FormData.prototype.toString = function() {
var arr = new Array();
this._data.forEach(function(value, name, map) {
arr.push(encodeURIComponent(name) + "=" + encodeURIComponent(value));
});
return arr.join("&");
};
return FormData;
}();
exports.FormData = FormData;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var httpRequest = __webpack_require__(81);
global.moduleMerge(httpRequest, exports);
function getString(arg) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
try {
var str = r.content.toString();
resolve(str);
} catch (e) {
reject(e);
}
}, function(e) {
return reject(e);
});
});
}
exports.getString = getString;
function getJSON(arg) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
try {
var json = r.content.toJSON();
resolve(json);
} catch (e) {
reject(e);
}
}, function(e) {
return reject(e);
});
});
}
exports.getJSON = getJSON;
function getImage(arg) {
return httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(responce) {
return responce.content.toImage();
});
}
exports.getImage = getImage;
function getFile(arg, destinationFilePath) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
try {
var file = r.content.toFile(destinationFilePath);
resolve(file);
} catch (e) {
reject(e);
}
}, function(e) {
return reject(e);
});
});
}
exports.getFile = getFile;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var debugger_1 = __webpack_require__(82);
var HttpResponseEncoding;
(function(HttpResponseEncoding) {
HttpResponseEncoding[HttpResponseEncoding["UTF8"] = 0] = "UTF8";
HttpResponseEncoding[HttpResponseEncoding["GBK"] = 1] = "GBK";
})(HttpResponseEncoding = exports.HttpResponseEncoding || (exports.HttpResponseEncoding = {}));
function parseJSON(source) {
var src = source.trim();
if (src.lastIndexOf(")") === src.length - 1) {
return JSON.parse(src.substring(src.indexOf("(") + 1, src.lastIndexOf(")")));
}
return JSON.parse(src);
}
var requestIdCounter = 0;
var pendingRequests = {};
var imageSource;
function ensureImageSource() {
if (!imageSource) {
imageSource = __webpack_require__(83);
}
}
var platform;
function ensurePlatform() {
if (!platform) {
platform = __webpack_require__(22);
}
}
var completeCallback;
function ensureCompleteCallback() {
if (completeCallback) {
return;
}
completeCallback = new org.nativescript.widgets.Async.CompleteCallback({
onComplete: function(result, context) {
onRequestComplete(context, result);
}
});
}
function onRequestComplete(requestId, result) {
var callbacks = pendingRequests[requestId];
delete pendingRequests[requestId];
if (result.error) {
callbacks.rejectCallback(new Error(result.error.toString()));
return;
}
var headers = {};
if (result.headers) {
var jHeaders = result.headers;
var length = jHeaders.size();
var i;
var pair;
for (i = 0; i < length; i++) {
pair = jHeaders.get(i);
addHeader(headers, pair.key, pair.value);
}
}
if (global.__inspector && global.__inspector.isConnected) {
debugger_1.NetworkAgent.responseReceived(requestId, result, headers);
}
callbacks.resolveCallback({
content: {
raw: result.raw,
toString: function(encoding) {
var str;
if (encoding) {
str = decodeResponse(result.raw, encoding);
} else {
str = result.responseAsString;
}
if (typeof str === "string") {
return str;
} else {
throw new Error("Response content may not be converted to string");
}
},
toJSON: function(encoding) {
var str;
if (encoding) {
str = decodeResponse(result.raw, encoding);
} else {
str = result.responseAsString;
}
return parseJSON(str);
},
toImage: function() {
ensureImageSource();
return new Promise(function(resolveImage, rejectImage) {
if (result.responseAsImage != null) {
resolveImage(imageSource.fromNativeSource(result.responseAsImage));
} else {
rejectImage(new Error("Response content may not be converted to an Image"));
}
});
},
toFile: function(destinationFilePath) {
var fs = __webpack_require__(19);
var fileName = callbacks.url;
if (!destinationFilePath) {
destinationFilePath = fs.path.join(fs.knownFolders.documents().path, fileName.substring(fileName.lastIndexOf("/") + 1));
}
var stream;
try {
var javaFile = new java.io.File(destinationFilePath);
stream = new java.io.FileOutputStream(javaFile);
stream.write(result.raw.toByteArray());
return fs.File.fromPath(destinationFilePath);
} catch (exception) {
throw new Error("Cannot save file with path: " + destinationFilePath + ".");
} finally {
if (stream) {
stream.close();
}
}
}
},
statusCode: result.statusCode,
headers: headers
});
}
function buildJavaOptions(options) {
if (typeof options.url !== "string") {
throw new Error("Http request must provide a valid url.");
}
var javaOptions = new org.nativescript.widgets.Async.Http.RequestOptions();
javaOptions.url = options.url;
if (typeof options.method === "string") {
javaOptions.method = options.method;
}
if (typeof options.content === "string" || options.content instanceof FormData) {
javaOptions.content = options.content.toString();
}
if (typeof options.timeout === "number") {
javaOptions.timeout = options.timeout;
}
if (typeof options.dontFollowRedirects === "boolean") {
javaOptions.dontFollowRedirects = options.dontFollowRedirects;
}
if (options.headers) {
var arrayList = new java.util.ArrayList();
var pair = org.nativescript.widgets.Async.Http.KeyValuePair;
for (var key in options.headers) {
arrayList.add(new pair(key, options.headers[key] + ""));
}
javaOptions.headers = arrayList;
}
ensurePlatform();
var screen = platform.screen.mainScreen;
javaOptions.screenWidth = screen.widthPixels;
javaOptions.screenHeight = screen.heightPixels;
return javaOptions;
}
function request(options) {
if (options === undefined || options === null) {
return;
}
return new Promise(function(resolve, reject) {
try {
var javaOptions = buildJavaOptions(options);
if (global.__inspector && global.__inspector.isConnected) {
debugger_1.NetworkAgent.requestWillBeSent(requestIdCounter, options);
}
var callbacks = {
url: options.url,
resolveCallback: resolve,
rejectCallback: reject
};
pendingRequests[requestIdCounter] = callbacks;
ensureCompleteCallback();
org.nativescript.widgets.Async.Http.MakeRequest(javaOptions, completeCallback, new java.lang.Integer(requestIdCounter));
requestIdCounter++;
} catch (ex) {
reject(ex);
}
});
}
exports.request = request;
function decodeResponse(raw, encoding) {
var charsetName = "UTF-8";
if (encoding === HttpResponseEncoding.GBK) {
charsetName = "GBK";
}
return raw.toString(charsetName);
}
function addHeader(headers, key, value) {
if (!headers[key]) {
headers[key] = value;
} else if (Array.isArray(headers[key])) {
headers[key].push(value);
} else {
var values = [ headers[key] ];
values.push(value);
headers[key] = values;
}
}
exports.addHeader = addHeader;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var network;
function getNetwork() {
return network;
}
exports.getNetwork = getNetwork;
function setNetwork(newNetwork) {
network = newNetwork;
}
exports.setNetwork = setNetwork;
var NetworkAgent;
(function(NetworkAgent) {
function responseReceived(requestId, result, headers) {
var requestIdStr = requestId.toString();
var mimeType = headers["Content-Type"] || headers["content-type"];
var response = {
url: result.url || "",
status: result.statusCode,
statusText: result.statusText || "",
headers: headers,
mimeType: mimeType,
fromDiskCache: false
};
var responseData = {
requestId: requestIdStr,
type: mimeTypeToType(response.mimeType),
response: response,
timestamp: getTimeStamp()
};
global.__inspector.responseReceived(responseData);
global.__inspector.loadingFinished({
requestId: requestIdStr,
timestamp: getTimeStamp()
});
var hasTextContent = responseData.type === "Document" || responseData.type === "Script";
var data;
if (!hasTextContent) {
if (responseData.type === "Image") {
var bitmap = result.responseAsImage;
if (bitmap) {
var outputStream = new java.io.ByteArrayOutputStream();
bitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 100, outputStream);
var base64Image = android.util.Base64.encodeToString(outputStream.toByteArray(), android.util.Base64.DEFAULT);
data = base64Image;
}
}
} else {
data = result.responseAsString;
}
var successfulRequestData = {
requestId: requestIdStr,
data: data,
hasTextContent: hasTextContent
};
global.__inspector.dataForRequestId(successfulRequestData);
}
NetworkAgent.responseReceived = responseReceived;
function requestWillBeSent(requestId, options) {
var request = {
url: options.url,
method: options.method,
headers: options.headers || {},
postData: options.content ? options.content.toString() : ""
};
var requestData = {
requestId: requestId.toString(),
url: request.url,
request: request,
timestamp: getTimeStamp(),
type: "Document"
};
global.__inspector.requestWillBeSent(requestData);
}
NetworkAgent.requestWillBeSent = requestWillBeSent;
function getTimeStamp() {
var d = new Date();
return Math.round(d.getTime() / 1e3);
}
function mimeTypeToType(mimeType) {
var type = "Document";
if (mimeType) {
if (mimeType.indexOf("image") === 0) {
type = "Image";
} else if (mimeType.indexOf("javascript") !== -1 || mimeType.indexOf("json") !== -1) {
type = "Script";
}
}
return type;
}
})(NetworkAgent = exports.NetworkAgent || (exports.NetworkAgent = {}));
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var file_system_1 = __webpack_require__(19);
var utils_1 = __webpack_require__(14);
exports.isFileOrResourcePath = utils_1.isFileOrResourcePath;
var application_1 = __webpack_require__(3);
var http;
function ensureHttp() {
if (!http) {
http = __webpack_require__(80);
}
}
var application;
var resources;
function getApplication() {
if (!application) {
application = application_1.getNativeApplication();
}
return application;
}
function getResources() {
if (!resources) {
resources = getApplication().getResources();
}
return resources;
}
var ImageSource = function() {
function ImageSource() {}
ImageSource.prototype.fromAsset = function(asset) {
var _this = this;
return new Promise(function(resolve, reject) {
asset.getImageAsync(function(image, err) {
if (image) {
_this.setRotationAngleFromFile(asset.android);
_this.setNativeSource(image);
resolve(_this);
} else {
reject(err);
}
});
});
};
ImageSource.prototype.loadFromResource = function(name) {
this.android = null;
var res = getResources();
if (res) {
var identifier = res.getIdentifier(name, "drawable", getApplication().getPackageName());
if (0 < identifier) {
var bitmapDrawable = res.getDrawable(identifier);
if (bitmapDrawable && bitmapDrawable.getBitmap) {
this.android = bitmapDrawable.getBitmap();
}
}
}
return this.android != null;
};
ImageSource.prototype.fromResource = function(name) {
var _this = this;
return new Promise(function(resolve, reject) {
resolve(_this.loadFromResource(name));
});
};
ImageSource.prototype.setRotationAngleFromFile = function(filename) {
this.rotationAngle = 0;
var ei = new android.media.ExifInterface(filename);
var orientation = ei.getAttributeInt(android.media.ExifInterface.TAG_ORIENTATION, android.media.ExifInterface.ORIENTATION_NORMAL);
switch (orientation) {
case android.media.ExifInterface.ORIENTATION_ROTATE_90:
this.rotationAngle = 90;
break;

case android.media.ExifInterface.ORIENTATION_ROTATE_180:
this.rotationAngle = 180;
break;

case android.media.ExifInterface.ORIENTATION_ROTATE_270:
this.rotationAngle = 270;
break;
}
};
ImageSource.prototype.loadFromFile = function(path) {
var fileName = typeof path === "string" ? path.trim() : "";
if (fileName.indexOf("~/") === 0) {
fileName = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, fileName.replace("~/", ""));
}
this.setRotationAngleFromFile(fileName);
this.android = android.graphics.BitmapFactory.decodeFile(fileName, null);
return this.android != null;
};
ImageSource.prototype.fromFile = function(path) {
var _this = this;
return new Promise(function(resolve, reject) {
resolve(_this.loadFromFile(path));
});
};
ImageSource.prototype.loadFromData = function(data) {
this.android = android.graphics.BitmapFactory.decodeStream(data);
return this.android != null;
};
ImageSource.prototype.fromData = function(data) {
var _this = this;
return new Promise(function(resolve, reject) {
resolve(_this.loadFromData(data));
});
};
ImageSource.prototype.loadFromBase64 = function(source) {
if (typeof source === "string") {
var bytes = android.util.Base64.decode(source, android.util.Base64.DEFAULT);
this.android = android.graphics.BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
}
return this.android != null;
};
ImageSource.prototype.fromBase64 = function(data) {
var _this = this;
return new Promise(function(resolve, reject) {
resolve(_this.loadFromBase64(data));
});
};
ImageSource.prototype.setNativeSource = function(source) {
this.android = source;
return source != null;
};
ImageSource.prototype.saveToFile = function(path, format, quality) {
if (quality === void 0) {
quality = 100;
}
if (!this.android) {
return false;
}
var targetFormat = getTargetFormat(format);
var outputStream = new java.io.BufferedOutputStream(new java.io.FileOutputStream(path));
var res = this.android.compress(targetFormat, quality, outputStream);
outputStream.close();
return res;
};
ImageSource.prototype.toBase64String = function(format, quality) {
if (quality === void 0) {
quality = 100;
}
if (!this.android) {
return null;
}
var targetFormat = getTargetFormat(format);
var outputStream = new java.io.ByteArrayOutputStream();
var base64Stream = new android.util.Base64OutputStream(outputStream, android.util.Base64.NO_WRAP);
this.android.compress(targetFormat, quality, base64Stream);
base64Stream.close();
outputStream.close();
return outputStream.toString();
};
Object.defineProperty(ImageSource.prototype, "height", {
get: function() {
if (this.android) {
return this.android.getHeight();
}
return NaN;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageSource.prototype, "width", {
get: function() {
if (this.android) {
return this.android.getWidth();
}
return NaN;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageSource.prototype, "rotationAngle", {
get: function() {
return this._rotationAngle;
},
set: function(value) {
this._rotationAngle = value;
},
enumerable: true,
configurable: true
});
return ImageSource;
}();
exports.ImageSource = ImageSource;
function getTargetFormat(format) {
switch (format) {
case "jpeg" || "jpg":
return android.graphics.Bitmap.CompressFormat.JPEG;

default:
return android.graphics.Bitmap.CompressFormat.PNG;
}
}
function fromAsset(asset) {
var image = new ImageSource();
return image.fromAsset(asset);
}
exports.fromAsset = fromAsset;
function fromResource(name) {
var image = new ImageSource();
return image.loadFromResource(name) ? image : null;
}
exports.fromResource = fromResource;
function fromFile(path) {
var image = new ImageSource();
return image.loadFromFile(path) ? image : null;
}
exports.fromFile = fromFile;
function fromData(data) {
var image = new ImageSource();
return image.loadFromData(data) ? image : null;
}
exports.fromData = fromData;
function fromBase64(source) {
var image = new ImageSource();
return image.loadFromBase64(source) ? image : null;
}
exports.fromBase64 = fromBase64;
function fromNativeSource(source) {
var image = new ImageSource();
return image.setNativeSource(source) ? image : null;
}
exports.fromNativeSource = fromNativeSource;
function fromUrl(url) {
ensureHttp();
return http.getImage(url);
}
exports.fromUrl = fromUrl;
function fromFileOrResource(path) {
if (!utils_1.isFileOrResourcePath(path)) {
throw new Error(path + " is not a valid file or resource.");
}
if (path.indexOf(utils_1.RESOURCE_PREFIX) === 0) {
return fromResource(path.substr(utils_1.RESOURCE_PREFIX.length));
}
return fromFile(path);
}
exports.fromFileOrResource = fromFileOrResource;
}, function(module, exports, __webpack_require__) {
(function() {
"use strict";
exports.XMLHttpRequest = global.XMLHttpRequest;
exports.FormData = global.FormData;
if (!exports.XMLHttpRequest) {
var xhr = __webpack_require__(79);
exports.XMLHttpRequest = xhr.XMLHttpRequest;
exports.FormData = xhr.FormData;
}
function normalizeName(name) {
if (typeof name !== "string") {
name = name.toString();
}
if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
throw new TypeError("Invalid character in header field name");
}
return name.toLowerCase();
}
function normalizeValue(value) {
if (typeof value !== "string") {
value = value.toString();
}
return value;
}
function Headers(headers) {
this.map = {};
if (headers instanceof Headers) {
headers.forEach(function(value, name) {
this.append(name, value);
}, this);
} else if (headers) {
Object.getOwnPropertyNames(headers).forEach(function(name) {
this.append(name, headers[name]);
}, this);
}
}
Headers.prototype.append = function(name, value) {
name = normalizeName(name);
value = normalizeValue(value);
var list = this.map[name];
if (!list) {
list = [];
this.map[name] = list;
}
list.push(value);
};
Headers.prototype["delete"] = function(name) {
delete this.map[normalizeName(name)];
};
Headers.prototype.get = function(name) {
var values = this.map[normalizeName(name)];
return values ? values[0] : null;
};
Headers.prototype.getAll = function(name) {
return this.map[normalizeName(name)] || [];
};
Headers.prototype.has = function(name) {
return this.map.hasOwnProperty(normalizeName(name));
};
Headers.prototype.set = function(name, value) {
this.map[normalizeName(name)] = [ normalizeValue(value) ];
};
Headers.prototype.forEach = function(callback, thisArg) {
Object.getOwnPropertyNames(this.map).forEach(function(name) {
this.map[name].forEach(function(value) {
callback.call(thisArg, value, name, this);
}, this);
}, this);
};
function consumed(body) {
if (body.bodyUsed) {
return Promise.reject(new TypeError("Already read"));
}
body.bodyUsed = true;
}
function fileReaderReady(reader) {
return new Promise(function(resolve, reject) {
reader.onload = function() {
resolve(reader.result);
};
reader.onerror = function() {
reject(reader.error);
};
});
}
function readBlobAsArrayBuffer(blob) {
var reader = new FileReader();
reader.readAsArrayBuffer(blob);
return fileReaderReady(reader);
}
function readBlobAsText(blob) {
var reader = new FileReader();
reader.readAsText(blob);
return fileReaderReady(reader);
}
var support = {
blob: "FileReader" in exports && "Blob" in exports && function() {
try {
new Blob();
return true;
} catch (e) {
return false;
}
}(),
formData: "FormData" in exports
};
function Body() {
this.bodyUsed = false;
this._initBody = function(body) {
this._bodyInit = body;
if (typeof body === "string") {
this._bodyText = body;
} else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
this._bodyBlob = body;
} else if (support.formData && exports.FormData.prototype.isPrototypeOf(body)) {
this._bodyFormData = body;
} else if (!body) {
this._bodyText = "";
} else {
throw new Error("unsupported BodyInit type");
}
};
if (support.blob) {
this.blob = function() {
var rejected = consumed(this);
if (rejected) {
return rejected;
}
if (this._bodyBlob) {
return Promise.resolve(this._bodyBlob);
} else if (this._bodyFormData) {
throw new Error("could not read FormData body as blob");
} else {
return Promise.resolve(new Blob([ this._bodyText ]));
}
};
this.arrayBuffer = function() {
return this.blob().then(readBlobAsArrayBuffer);
};
this.text = function() {
var rejected = consumed(this);
if (rejected) {
return rejected;
}
if (this._bodyBlob) {
return readBlobAsText(this._bodyBlob);
} else if (this._bodyFormData) {
throw new Error("could not read FormData body as text");
} else {
return Promise.resolve(this._bodyText);
}
};
} else {
this.text = function() {
var rejected = consumed(this);
return rejected ? rejected : Promise.resolve(this._bodyText);
};
}
if (support.formData) {
this.formData = function() {
return this.text().then(decode);
};
}
this.json = function() {
return this.text().then(JSON.parse);
};
return this;
}
var methods = [ "DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT" ];
function normalizeMethod(method) {
var upcased = method.toUpperCase();
return methods.indexOf(upcased) > -1 ? upcased : method;
}
function Request(url, options) {
options = options || {};
this.url = url;
this.credentials = options.credentials || "omit";
this.headers = new Headers(options.headers);
this.method = normalizeMethod(options.method || "GET");
this.mode = options.mode || null;
this.referrer = null;
if ((this.method === "GET" || this.method === "HEAD") && options.body) {
throw new TypeError("Body not allowed for GET or HEAD requests");
}
this._initBody(options.body);
}
function decode(body) {
var form = new exports.FormData();
body.trim().split("&").forEach(function(bytes) {
if (bytes) {
var split = bytes.split("=");
var name = split.shift().replace(/\+/g, " ");
var value = split.join("=").replace(/\+/g, " ");
form.append(decodeURIComponent(name), decodeURIComponent(value));
}
});
return form;
}
function headers(xhr) {
var head = new Headers();
var pairs = xhr.getAllResponseHeaders().trim().split("\n");
pairs.forEach(function(header) {
var split = header.trim().split(":");
var key = split.shift().trim();
var value = split.join(":").trim();
head.append(key, value);
});
return head;
}
Body.call(Request.prototype);
function Response(bodyInit, options) {
if (!options) {
options = {};
}
this._initBody(bodyInit);
this.type = "default";
this.url = null;
this.status = options.status;
this.ok = this.status >= 200 && this.status < 300;
this.statusText = options.statusText;
this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers);
this.url = options.url || "";
}
Body.call(Response.prototype);
exports.Headers = Headers;
exports.Request = Request;
exports.Response = Response;
exports.fetch = function(input, init) {
var request;
if (Request.prototype.isPrototypeOf(input) && !init) {
request = input;
} else {
request = new Request(input, init);
}
return new Promise(function(resolve, reject) {
var xhr = new exports.XMLHttpRequest();
function responseURL() {
if ("responseURL" in xhr) {
return xhr.responseURL;
}
if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
return xhr.getResponseHeader("X-Request-URL");
}
return;
}
xhr.onload = function() {
var status = xhr.status === 1223 ? 204 : xhr.status;
if (status < 100 || status > 599) {
reject(new TypeError("Network request failed"));
return;
}
var options = {
status: status,
statusText: xhr.statusText,
headers: headers(xhr),
url: responseURL()
};
resolve(new Response(xhr.responseText, options));
};
xhr.onerror = function(error) {
reject(new TypeError([ "Network request failed:", error.message ].join(" ")));
};
xhr.open(request.method, request.url, true);
if (request.credentials === "include") {
xhr.withCredentials = true;
}
if ("responseType" in xhr && support.blob) {
xhr.responseType = "blob";
}
request.headers.forEach(function(value, name) {
xhr.setRequestHeader(name, value);
});
xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
});
};
exports.fetch.polyfill = true;
})();
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
function __message(message, level) {
if (global.__consoleMessage) {
global.__consoleMessage(message, level);
}
}
var Console = function() {
function Console() {
this.TAG = "JS";
this._timers = {};
this._stripFirstTwoLinesRegEx = /^([^\n]*?\n){2}((.|\n)*)$/gim;
}
Console.prototype.sprintf = function(message) {
var regex = /%%|%(\d+\$)?([-+\'#0 ]*)(\*\d+\$|\*|\d+)?(\.(\*\d+\$|\*|\d+))?([scboxXuideEfFgGj])/g;
var a = arguments;
var i = 0;
var format = a[i++];
var pad = function(str, len, chr, leftJustify) {
if (!chr) {
chr = " ";
}
var padding = str.length >= len ? "" : new Array(1 + len - str.length >>> 0).join(chr);
return leftJustify ? str + padding : padding + str;
};
var justify = function(value, prefix, leftJustify, minWidth, zeroPad, customPadChar) {
var diff = minWidth - value.length;
if (diff > 0) {
if (leftJustify || !zeroPad) {
value = pad(value, minWidth, customPadChar, leftJustify);
} else {
value = value.slice(0, prefix.length) + pad("", diff, "0", true) + value.slice(prefix.length);
}
}
return value;
};
var formatBaseX = function(value, base, prefix, leftJustify, minWidth, precision, zeroPad) {
var number = value >>> 0;
prefix = prefix && number && {
2: "0b",
8: "0",
16: "0x"
}[base] || "";
value = prefix + pad(number.toString(base), precision || 0, "0", false);
return justify(value, prefix, leftJustify, minWidth, zeroPad);
};
var formatString = function(value, leftJustify, minWidth, precision, zeroPad, customPadChar) {
if (precision != null) {
value = value.slice(0, precision);
}
return justify(value, "", leftJustify, minWidth, zeroPad, customPadChar);
};
var that = this;
var doFormat = function(substring, valueIndex, flags, minWidth, _, precision, type) {
var number, prefix, method, textTransform, value;
if (substring === "%%") {
return "%";
}
var leftJustify = false;
var positivePrefix = "";
var zeroPad = false;
var prefixBaseX = false;
var customPadChar = " ";
var flagsl = flags.length;
for (var j = 0; flags && j < flagsl; j++) {
switch (flags.charAt(j)) {
case " ":
positivePrefix = " ";
break;

case "+":
positivePrefix = "+";
break;

case "-":
leftJustify = true;
break;

case "'":
customPadChar = flags.charAt(j + 1);
break;

case "0":
zeroPad = true;
customPadChar = "0";
break;

case "#":
prefixBaseX = true;
break;
}
}
if (!minWidth) {
minWidth = 0;
} else if (minWidth === "*") {
minWidth = +a[i++];
} else if (minWidth.charAt(0) === "*") {
minWidth = +a[minWidth.slice(1, -1)];
} else {
minWidth = +minWidth;
}
if (minWidth < 0) {
minWidth = -minWidth;
leftJustify = true;
}
if (!isFinite(minWidth)) {
throw new Error("sprintf: (minimum-)width must be finite");
}
if (!precision) {
precision = "fFeE".indexOf(type) > -1 ? 6 : type === "d" ? 0 : undefined;
} else if (precision === "*") {
precision = +a[i++];
} else if (precision.charAt(0) === "*") {
precision = +a[precision.slice(1, -1)];
} else {
precision = +precision;
}
value = valueIndex ? a[valueIndex.slice(0, -1)] : a[i++];
switch (type) {
case "s":
return formatString(String(value), leftJustify, minWidth, precision, zeroPad, customPadChar);

case "c":
return formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad);

case "b":
return formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "o":
return formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "x":
return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "X":
return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad).toUpperCase();

case "u":
return formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "i":
case "d":
number = +value || 0;
number = Math.round(number - number % 1);
prefix = number < 0 ? "-" : positivePrefix;
value = prefix + pad(String(Math.abs(number)), precision, "0", false);
return justify(value, prefix, leftJustify, minWidth, zeroPad);

case "e":
case "E":
case "f":
case "F":
case "g":
case "G":
number = +value;
prefix = number < 0 ? "-" : positivePrefix;
method = [ "toExponential", "toFixed", "toPrecision" ]["efg".indexOf(type.toLowerCase())];
textTransform = [ "toString", "toUpperCase" ]["eEfFgG".indexOf(type) % 2];
value = prefix + Math.abs(number)[method](precision);
return justify(value, prefix, leftJustify, minWidth, zeroPad)[textTransform]();

case "j":
return that.createDump(value);

default:
return substring;
}
};
return format.replace(regex, doFormat);
};
Console.prototype.formatParams = function(message) {
if (arguments.length <= 1) {
return "" + message;
}
var res = this.sprintf.apply(this, arguments);
if (res === message) {
var args = Array.prototype.slice.call(arguments);
return args.join(" ");
}
return res;
};
Console.prototype.timeMillis = function() {
return java.lang.System.nanoTime() / 1e6;
};
Console.prototype.time = function(reportName) {
var name = reportName ? "__" + reportName : "__internal_console_time__";
if (this._timers[name] === undefined || this._timers.hasOwnProperty(name)) {
this._timers[name] = this.timeMillis();
} else {
this.warn("invalid name for timer console.time(" + reportName + ")");
}
};
Console.prototype.timeEnd = function(reportName) {
var name = reportName ? "__" + reportName : "__internal_console_time__";
if (this._timers.hasOwnProperty(name)) {
var val = this._timers[name];
if (val) {
var time = this.timeMillis();
this.info("console.time(" + reportName + "): %.6f ms", time - val);
this._timers[name] = undefined;
} else {
this.warn("undefined console.time(" + reportName + ")");
}
}
};
Console.prototype.assert = function(test, message) {
var formatParams = [];
for (var _i = 2; _i < arguments.length; _i++) {
formatParams[_i - 2] = arguments[_i];
}
if (!test) {
Array.prototype.shift.apply(arguments);
var formatedMessage = this.formatParams.apply(this, arguments);
this.error(formatedMessage, 3);
__message(formatedMessage, "error");
}
};
Console.prototype.info = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
this.logMessage(this.formatParams.apply(this, arguments), 1);
};
Console.prototype.warn = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
var formatedMessage = this.formatParams.apply(this, arguments);
this.logMessage(formatedMessage, 2);
__message(formatedMessage, "warning");
};
Console.prototype.error = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
var formatedMessage = this.formatParams.apply(this, arguments);
this.logMessage(formatedMessage, 3);
__message(formatedMessage, "error");
};
Console.prototype.log = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
var formatedMessage = this.formatParams.apply(this, arguments);
this.logMessage(formatedMessage, 0);
__message(formatedMessage, "log");
};
Console.prototype.logMessage = function(message, messageType) {
if (!global.android) {
return;
}
var arrayToLog = [];
if (message.length > 4e3) {
for (var i = 0; i * 4e3 < message.length; i++) {
arrayToLog.push(message.substr(i * 4e3, 4e3));
}
} else {
arrayToLog.push(message);
}
for (var i = 0; i < arrayToLog.length; i++) {
switch (messageType) {
case 0:
{
android.util.Log.v(this.TAG, arrayToLog[i]);
break;
}

case 2:
{
android.util.Log.w(this.TAG, arrayToLog[i]);
break;
}

case 3:
{
android.util.Log.e(this.TAG, arrayToLog[i]);
break;
}

case 1:
{
android.util.Log.i(this.TAG, arrayToLog[i]);
break;
}
}
}
};
Console.prototype.trace = function() {
var stack;
stack = new Error().stack.toString();
stack = stack.replace(this._stripFirstTwoLinesRegEx, "$2");
stack = "Stack Trace:\n" + stack;
this.log(stack);
};
Console.prototype.createDump = function(obj) {
var result = [];
if (null == obj) {
result.push("=== dump(): object is 'null' ===");
return result.join("");
}
if (obj === undefined) {
result.push("=== dump(): object is 'undefined' ===");
return result.join("");
}
result.push("=== dump(): dumping members ===\n");
var stringifyValueCache = [];
var stringifyKeyCache = [];
result.push(JSON.stringify(obj, function(k, v) {
stringifyKeyCache.push(k);
if (typeof v === "object" && v !== null) {
if (stringifyValueCache.indexOf(v) !== -1) {
return "#CR:" + (v.toString ? v.toString() : v);
}
stringifyValueCache.push(v);
}
if (typeof v === "function") {
return k + "()" + v;
}
return v;
}, 4));
result.push("\n=== dump(): dumping function and properties names ===\n");
for (var id in obj) {
try {
if (typeof obj[id] === "function") {
result.push(id + "()\n");
} else {
if (typeof obj[id] !== "object" && stringifyKeyCache.indexOf(id) === -1) {
result.push(id + ": " + (obj[id] + "\n"));
}
}
} catch (err) {
result.push(id + ": inaccessible");
}
}
stringifyValueCache = null;
stringifyKeyCache = null;
result.push("=== dump(): finished ===");
return result.join("");
};
Console.prototype.dir = function(obj) {
var dump = this.createDump(obj);
this.log(dump);
};
return Console;
}();
exports.Console = Console;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var common = __webpack_require__(87);
var application_1 = __webpack_require__(3);
var sharedPreferences;
function ensureSharedPreferences() {
if (!sharedPreferences) {
sharedPreferences = application_1.getNativeApplication().getApplicationContext().getSharedPreferences("prefs.db", 0);
}
}
function verify(key) {
common.checkKey(key);
ensureSharedPreferences();
}
function hasKey(key) {
verify(key);
return sharedPreferences.contains(key);
}
exports.hasKey = hasKey;
function getBoolean(key, defaultValue) {
verify(key);
if (hasKey(key)) {
return sharedPreferences.getBoolean(key, false);
}
return defaultValue;
}
exports.getBoolean = getBoolean;
function getString(key, defaultValue) {
verify(key);
if (hasKey(key)) {
return sharedPreferences.getString(key, "");
}
return defaultValue;
}
exports.getString = getString;
function getNumber(key, defaultValue) {
verify(key);
if (hasKey(key)) {
return sharedPreferences.getFloat(key, float(0));
}
return defaultValue;
}
exports.getNumber = getNumber;
function setBoolean(key, value) {
verify(key);
common.ensureValidValue(value, "boolean");
var editor = sharedPreferences.edit();
editor.putBoolean(key, value);
editor.commit();
}
exports.setBoolean = setBoolean;
function setString(key, value) {
verify(key);
common.ensureValidValue(value, "string");
var editor = sharedPreferences.edit();
editor.putString(key, value);
editor.commit();
}
exports.setString = setString;
function setNumber(key, value) {
verify(key);
common.ensureValidValue(value, "number");
var editor = sharedPreferences.edit();
editor.putFloat(key, float(value));
editor.commit();
}
exports.setNumber = setNumber;
function remove(key) {
verify(key);
var editor = sharedPreferences.edit();
editor.remove(key);
editor.commit();
}
exports.remove = remove;
function clear() {
ensureSharedPreferences();
sharedPreferences.edit().clear().commit();
}
exports.clear = clear;
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
exports.checkKey = function(key) {
if (typeof key !== "string") {
throw new Error("key: '" + key + "' must be a string");
}
};
exports.ensureValidValue = function(value, valueType) {
if (typeof value !== valueType) {
throw new Error("value: '" + value + "' must be a " + valueType);
}
};
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var application_1 = __webpack_require__(3);
var connectionType;
(function(connectionType) {
connectionType[connectionType["none"] = 0] = "none";
connectionType[connectionType["wifi"] = 1] = "wifi";
connectionType[connectionType["mobile"] = 2] = "mobile";
})(connectionType = exports.connectionType || (exports.connectionType = {}));
var wifi = "wifi";
var mobile = "mobile";
function getConnectivityManager() {
return application_1.getNativeApplication().getApplicationContext().getSystemService(android.content.Context.CONNECTIVITY_SERVICE);
}
function getActiveNetworkInfo() {
var connectivityManager = getConnectivityManager();
if (!connectivityManager) {
return null;
}
return connectivityManager.getActiveNetworkInfo();
}
function getConnectionType() {
var activeNetworkInfo = getActiveNetworkInfo();
if (!activeNetworkInfo || !activeNetworkInfo.isConnected()) {
return connectionType.none;
}
var type = activeNetworkInfo.getTypeName().toLowerCase();
if (type.indexOf(wifi) !== -1) {
return connectionType.wifi;
}
if (type.indexOf(mobile) !== -1) {
return connectionType.mobile;
}
return connectionType.none;
}
exports.getConnectionType = getConnectionType;
function startMonitoring(connectionTypeChangedCallback) {
var onReceiveCallback = function onReceiveCallback(context, intent) {
var newConnectionType = getConnectionType();
connectionTypeChangedCallback(newConnectionType);
};
application_1.android.registerBroadcastReceiver(android.net.ConnectivityManager.CONNECTIVITY_ACTION, onReceiveCallback);
}
exports.startMonitoring = startMonitoring;
function stopMonitoring() {
application_1.android.unregisterBroadcastReceiver(android.net.ConnectivityManager.CONNECTIVITY_ACTION);
}
exports.stopMonitoring = stopMonitoring;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var observable_1 = __webpack_require__(32);
var CHANGE = "change";
var UPDATE = "update";
var DELETE = "delete";
var ADD = "add";
var ChangeType = function() {
function ChangeType() {}
return ChangeType;
}();
ChangeType.Add = ADD;
ChangeType.Delete = DELETE;
ChangeType.Update = UPDATE;
ChangeType.Splice = CHANGE;
exports.ChangeType = ChangeType;
var VirtualArray = function(_super) {
__extends(VirtualArray, _super);
function VirtualArray(length) {
if (length === void 0) {
length = 0;
}
var _this = _super.call(this) || this;
_this._length = length;
_this._cache = {};
_this._requestedIndexes = [];
_this._loadedIndexes = [];
return _this;
}
Object.defineProperty(VirtualArray.prototype, "length", {
get: function() {
return this._length;
},
set: function(value) {
if (this._length !== value) {
var index_1 = this._length;
var count = value - this._length;
this._length = value;
this.notify({
eventName: CHANGE,
object: this,
action: count > 0 ? ADD : DELETE,
index: index_1,
removed: new Array(count < 0 ? Math.abs(count) : 0),
addedCount: count > 0 ? count : 0
});
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(VirtualArray.prototype, "loadSize", {
get: function() {
return this._loadSize;
},
set: function(value) {
this._loadSize = value;
},
enumerable: true,
configurable: true
});
VirtualArray.prototype.getItem = function(index) {
var item = this._cache[index];
if (item === undefined) {
if (index >= 0 && index < this.length && this._requestedIndexes.indexOf(index) < 0 && this._loadedIndexes.indexOf(index) < 0) {
this.requestItems(index);
}
}
return item;
};
VirtualArray.prototype.setItem = function(index, value) {
if (this._cache[index] !== value) {
this.load(index, [ value ]);
}
};
VirtualArray.prototype.load = function(index, items) {
for (var i = 0; i < items.length; i++) {
var itemIndex = index + i;
this._cache[itemIndex] = items[i];
this._requestedIndexes.splice(this._requestedIndexes.indexOf(itemIndex), 1);
if (this._loadedIndexes.indexOf(itemIndex) < 0) {
this._loadedIndexes.push(itemIndex);
}
}
if (this._requestedIndexes.length > 0) {
for (var i = 0; i < this.loadSize - items.length; i++) {
this._requestedIndexes.splice(this._requestedIndexes.indexOf(index + i), 1);
}
}
this.notify({
eventName: CHANGE,
object: this,
action: UPDATE,
index: index,
removed: new Array(items.length),
addedCount: items.length
});
};
VirtualArray.prototype.requestItems = function(index) {
var indexesToLoad = [];
var pageIndex = this._loadSize > 0 ? this._loadSize * Math.floor(index / this._loadSize) : index;
var count = 0;
var start = -1;
for (var i = 0; i < this.loadSize; i++) {
var itemIndex = pageIndex + i;
if (itemIndex >= this._length) {
break;
}
if (this._loadedIndexes.indexOf(itemIndex) < 0) {
if (start < 0) {
start = itemIndex;
}
indexesToLoad.push(itemIndex);
if (this._requestedIndexes.indexOf(itemIndex) < 0) {
this._requestedIndexes.push(itemIndex);
}
count++;
} else {
if (count > 0) {
this.notify({
eventName: VirtualArray.itemsLoadingEvent,
object: this,
index: start,
count: count
});
}
start = -1;
count = 0;
}
}
if (start >= 0 && count > 0) {
this.notify({
eventName: VirtualArray.itemsLoadingEvent,
object: this,
index: start,
count: count
});
}
};
return VirtualArray;
}(observable_1.Observable);
VirtualArray.changeEvent = CHANGE;
VirtualArray.itemsLoadingEvent = "itemsLoading";
exports.VirtualArray = VirtualArray;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var fpsNative = __webpack_require__(91);
var callbacks = {};
var idCounter = 0;
var _minFps = 1e3;
var framesRendered = 0;
var frameStartTime = 0;
function doFrame(currentTimeMillis) {
var fps = 0;
if (frameStartTime > 0) {
var timeSpan = currentTimeMillis - frameStartTime;
framesRendered++;
if (timeSpan > 1e3) {
fps = framesRendered * 1e3 / timeSpan;
if (fps < _minFps) {
_minFps = fps;
}
notify(fps);
frameStartTime = currentTimeMillis;
framesRendered = 0;
}
} else {
frameStartTime = currentTimeMillis;
}
}
var native;
function ensureNative() {
if (!native) {
native = new fpsNative.FPSCallback(doFrame);
}
}
function reset() {
_minFps = 1e3;
frameStartTime = 0;
framesRendered = 0;
}
exports.reset = reset;
function running() {
if (!native) {
return false;
}
return native.running;
}
exports.running = running;
function minFps() {
return _minFps;
}
exports.minFps = minFps;
function start() {
ensureNative();
native.start();
}
exports.start = start;
function stop() {
if (!native) {
return;
}
native.stop();
reset();
}
exports.stop = stop;
function addCallback(callback) {
var id = idCounter;
callbacks[id] = zonedCallback(callback);
idCounter++;
return id;
}
exports.addCallback = addCallback;
function removeCallback(id) {
if (id in callbacks) {
delete callbacks[id];
}
}
exports.removeCallback = removeCallback;
function notify(fps) {
var callback;
for (var id in callbacks) {
callback = callbacks[id];
callback(fps, _minFps);
}
}
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var FPSCallback = function() {
function FPSCallback(onFrame) {
var _this = this;
this.running = false;
this.onFrame = onFrame;
this.impl = new android.view.Choreographer.FrameCallback({
doFrame: function(nanos) {
_this.handleFrame(nanos);
}
});
}
FPSCallback.prototype.start = function() {
if (this.running) {
return;
}
android.view.Choreographer.getInstance().postFrameCallback(this.impl);
this.running = true;
};
FPSCallback.prototype.stop = function() {
if (!this.running) {
return;
}
android.view.Choreographer.getInstance().removeFrameCallback(this.impl);
this.running = false;
};
FPSCallback.prototype.handleFrame = function(nanos) {
if (!this.running) {
return;
}
this.onFrame(nanos / 1e6);
android.view.Choreographer.getInstance().postFrameCallback(this.impl);
};
return FPSCallback;
}();
exports.FPSCallback = FPSCallback;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var platform = __webpack_require__(22);
var common = __webpack_require__(93);
global.moduleMerge(common, exports);
var ImageAsset = function(_super) {
__extends(ImageAsset, _super);
function ImageAsset(asset) {
var _this = _super.call(this) || this;
_this.android = asset;
return _this;
}
ImageAsset.prototype.getImageAsync = function(callback) {
var bitmapOptions = new android.graphics.BitmapFactory.Options();
bitmapOptions.inJustDecodeBounds = true;
var bitmap = android.graphics.BitmapFactory.decodeFile(this.android, bitmapOptions);
var sourceSize = {
width: bitmapOptions.outWidth,
height: bitmapOptions.outHeight
};
var requestedSize = common.getRequestedImageSize(sourceSize, this.options);
var sampleSize = calculateInSampleSize(bitmapOptions.outWidth, bitmapOptions.outHeight, requestedSize.width, requestedSize.height);
var finalBitmapOptions = new android.graphics.BitmapFactory.Options();
finalBitmapOptions.inSampleSize = sampleSize;
try {
bitmap = android.graphics.BitmapFactory.decodeFile(this.android, finalBitmapOptions);
callback(bitmap, null);
} catch (ex) {
callback(null, ex);
}
};
return ImageAsset;
}(common.ImageAsset);
exports.ImageAsset = ImageAsset;
var calculateInSampleSize = function(imageWidth, imageHeight, reqWidth, reqHeight) {
var sampleSize = 1;
var displayWidth = platform.screen.mainScreen.widthDIPs;
var displayHeigth = platform.screen.mainScreen.heightDIPs;
reqWidth = reqWidth > 0 && reqWidth < displayWidth ? reqWidth : displayWidth;
reqHeight = reqHeight > 0 && reqHeight < displayHeigth ? reqHeight : displayHeigth;
if (imageWidth > reqWidth && imageHeight > reqHeight) {
var halfWidth = imageWidth / 2;
var halfHeight = imageHeight / 2;
while (halfWidth / sampleSize > reqWidth && halfHeight / sampleSize > reqHeight) {
sampleSize *= 2;
}
}
return sampleSize;
};
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var observable = __webpack_require__(32);
var platform = __webpack_require__(22);
var ImageAsset = function(_super) {
__extends(ImageAsset, _super);
function ImageAsset() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(ImageAsset.prototype, "options", {
get: function() {
return this._options;
},
set: function(value) {
this._options = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageAsset.prototype, "ios", {
get: function() {
return this._ios;
},
set: function(value) {
this._ios = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageAsset.prototype, "android", {
get: function() {
return this._android;
},
set: function(value) {
this._android = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageAsset.prototype, "nativeImage", {
get: function() {
return this._nativeImage;
},
set: function(value) {
this._nativeImage = value;
},
enumerable: true,
configurable: true
});
ImageAsset.prototype.getImageAsync = function(callback) {};
return ImageAsset;
}(observable.Observable);
exports.ImageAsset = ImageAsset;
function getAspectSafeDimensions(sourceWidth, sourceHeight, reqWidth, reqHeight) {
var widthCoef = sourceWidth / reqWidth;
var heightCoef = sourceHeight / reqHeight;
var aspectCoef = widthCoef > heightCoef ? widthCoef : heightCoef;
return {
width: Math.floor(sourceWidth / aspectCoef),
height: Math.floor(sourceHeight / aspectCoef)
};
}
exports.getAspectSafeDimensions = getAspectSafeDimensions;
function getRequestedImageSize(src, options) {
var reqWidth = platform.screen.mainScreen.widthDIPs;
var reqHeight = platform.screen.mainScreen.heightDIPs;
if (options && options.width) {
reqWidth = options.width > 0 && options.width < reqWidth ? options.width : reqWidth;
}
if (options && options.height) {
reqHeight = options.height > 0 && options.height < reqHeight ? options.height : reqHeight;
}
if (options && options.keepAspectRatio) {
var safeAspectSize = getAspectSafeDimensions(src.width, src.height, reqWidth, reqHeight);
reqWidth = safeAspectSize.width;
reqHeight = safeAspectSize.height;
}
return {
width: reqWidth,
height: reqHeight
};
}
exports.getRequestedImageSize = getRequestedImageSize;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var action_bar_common_1 = __webpack_require__(95);
var utils_1 = __webpack_require__(14);
var image_source_1 = __webpack_require__(83);
var application = __webpack_require__(3);
__export(__webpack_require__(95));
var R_ID_HOME = 16908332;
var ACTION_ITEM_ID_OFFSET = 1e4;
var actionItemIdGenerator = ACTION_ITEM_ID_OFFSET;
function generateItemId() {
actionItemIdGenerator++;
return actionItemIdGenerator;
}
var appResources;
var MenuItemClickListener;
function initializeMenuItemClickListener() {
if (MenuItemClickListener) {
return;
}
var MenuItemClickListenerImpl = function(_super) {
__extends(MenuItemClickListenerImpl, _super);
function MenuItemClickListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
MenuItemClickListenerImpl.prototype.onMenuItemClick = function(item) {
var itemId = item.getItemId();
return this.owner._onAndroidItemSelected(itemId);
};
return MenuItemClickListenerImpl;
}(java.lang.Object);
MenuItemClickListenerImpl = __decorate([ Interfaces([ android.support.v7.widget.Toolbar.OnMenuItemClickListener ]) ], MenuItemClickListenerImpl);
MenuItemClickListener = MenuItemClickListenerImpl;
appResources = application.android.context.getResources();
}
var ActionItem = function(_super) {
__extends(ActionItem, _super);
function ActionItem() {
var _this = _super.call(this) || this;
_this._androidPosition = {
position: "actionBar",
systemIcon: undefined
};
_this._itemId = generateItemId();
return _this;
}
Object.defineProperty(ActionItem.prototype, "android", {
get: function() {
return this._androidPosition;
},
set: function(value) {
throw new Error("ActionItem.android is read-only");
},
enumerable: true,
configurable: true
});
ActionItem.prototype._getItemId = function() {
return this._itemId;
};
return ActionItem;
}(action_bar_common_1.ActionItemBase);
exports.ActionItem = ActionItem;
var AndroidActionBarSettings = function() {
function AndroidActionBarSettings(actionBar) {
this._iconVisibility = "auto";
this._actionBar = actionBar;
}
Object.defineProperty(AndroidActionBarSettings.prototype, "icon", {
get: function() {
return this._icon;
},
set: function(value) {
if (value !== this._icon) {
this._icon = value;
this._actionBar._onIconPropertyChanged();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidActionBarSettings.prototype, "iconVisibility", {
get: function() {
return this._iconVisibility;
},
set: function(value) {
if (value !== this._iconVisibility) {
this._iconVisibility = value;
this._actionBar._onIconPropertyChanged();
}
},
enumerable: true,
configurable: true
});
return AndroidActionBarSettings;
}();
exports.AndroidActionBarSettings = AndroidActionBarSettings;
var NavigationButton = function(_super) {
__extends(NavigationButton, _super);
function NavigationButton() {
return _super !== null && _super.apply(this, arguments) || this;
}
return NavigationButton;
}(ActionItem);
exports.NavigationButton = NavigationButton;
var ActionBar = function(_super) {
__extends(ActionBar, _super);
function ActionBar() {
var _this = _super.call(this) || this;
_this._android = new AndroidActionBarSettings(_this);
return _this;
}
Object.defineProperty(ActionBar.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
ActionBar.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof NavigationButton) {
this.navigationButton = value;
} else if (value instanceof ActionItem) {
this.actionItems.addItem(value);
} else if (value instanceof action_bar_common_1.View) {
this.titleView = value;
}
};
ActionBar.prototype.createNativeView = function() {
initializeMenuItemClickListener();
var toolbar = new android.support.v7.widget.Toolbar(this._context);
var menuItemClickListener = new MenuItemClickListener(this);
toolbar.setOnMenuItemClickListener(menuItemClickListener);
toolbar.menuItemClickListener = menuItemClickListener;
return toolbar;
};
ActionBar.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
this.nativeView.menuItemClickListener.owner = this;
};
ActionBar.prototype.disposeNativeView = function() {
this.nativeView.menuItemClickListener.owner = null;
_super.prototype.disposeNativeView.call(this);
};
ActionBar.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
this.update();
};
ActionBar.prototype.update = function() {
if (!this.nativeView) {
return;
}
var page = this.page;
if (!page.frame || !page.frame._getNavBarVisible(page)) {
this.nativeView.setVisibility(android.view.View.GONE);
return;
}
this.nativeView.setVisibility(android.view.View.VISIBLE);
this._addActionItems();
this._updateTitleAndTitleView();
this._updateIcon();
this._updateNavigationButton();
};
ActionBar.prototype._onAndroidItemSelected = function(itemId) {
if (this.navigationButton && itemId === R_ID_HOME) {
this.navigationButton._raiseTap();
return true;
}
var menuItem = undefined;
var items = this.actionItems.getItems();
for (var i = 0; i < items.length; i++) {
if (items[i]._getItemId() === itemId) {
menuItem = items[i];
break;
}
}
if (menuItem) {
menuItem._raiseTap();
return true;
}
return false;
};
ActionBar.prototype._updateNavigationButton = function() {
var navButton = this.navigationButton;
if (navButton && action_bar_common_1.isVisible(navButton)) {
var systemIcon = navButton.android.systemIcon;
if (systemIcon !== undefined) {
var systemResourceId = getSystemResourceId(systemIcon);
if (systemResourceId) {
this.nativeView.setNavigationIcon(systemResourceId);
}
} else if (navButton.icon) {
var drawableOrId = getDrawableOrResourceId(navButton.icon, appResources);
this.nativeView.setNavigationIcon(drawableOrId);
}
var navBtn_1 = new WeakRef(navButton);
this.nativeView.setNavigationOnClickListener(new android.view.View.OnClickListener({
onClick: function(v) {
var owner = navBtn_1.get();
if (owner) {
owner._raiseTap();
}
}
}));
} else {
this.nativeView.setNavigationIcon(null);
}
};
ActionBar.prototype._updateIcon = function() {
var visibility = getIconVisibility(this.android.iconVisibility);
if (visibility) {
var icon = this.android.icon;
if (icon !== undefined) {
var drawableOrId = getDrawableOrResourceId(icon, appResources);
if (drawableOrId) {
this.nativeView.setLogo(drawableOrId);
}
} else {
var defaultIcon = application.android.nativeApp.getApplicationInfo().icon;
this.nativeView.setLogo(defaultIcon);
}
} else {
this.nativeView.setLogo(null);
}
};
ActionBar.prototype._updateTitleAndTitleView = function() {
if (!this.titleView) {
var title = this.title;
if (title !== undefined) {
this.nativeView.setTitle(title);
} else {
var appContext = application.android.context;
var appInfo = appContext.getApplicationInfo();
var appLabel = appContext.getPackageManager().getApplicationLabel(appInfo);
if (appLabel) {
this.nativeView.setTitle(appLabel);
}
}
}
};
ActionBar.prototype._addActionItems = function() {
var menu = this.nativeView.getMenu();
var items = this.actionItems.getVisibleItems();
menu.clear();
for (var i = 0; i < items.length; i++) {
var item = items[i];
var menuItem = menu.add(android.view.Menu.NONE, item._getItemId(), android.view.Menu.NONE, item.text + "");
if (item.actionView && item.actionView.android) {
item.android.position = "actionBar";
menuItem.setActionView(item.actionView.android);
ActionBar._setOnClickListener(item);
} else if (item.android.systemIcon) {
var systemResourceId = getSystemResourceId(item.android.systemIcon);
if (systemResourceId) {
menuItem.setIcon(systemResourceId);
}
} else if (item.icon) {
var drawableOrId = getDrawableOrResourceId(item.icon, appResources);
if (drawableOrId) {
menuItem.setIcon(drawableOrId);
} else {
throw new Error("Error loading icon from " + item.icon);
}
}
var showAsAction = getShowAsAction(item);
menuItem.setShowAsAction(showAsAction);
}
};
ActionBar._setOnClickListener = function(item) {
item.actionView.android.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(v) {
item._raiseTap();
}
}));
};
ActionBar.prototype._onTitlePropertyChanged = function() {
if (this.nativeView) {
this._updateTitleAndTitleView();
}
};
ActionBar.prototype._onIconPropertyChanged = function() {
if (this.nativeView) {
this._updateIcon();
}
};
ActionBar.prototype._addViewToNativeVisualTree = function(child, atIndex) {
if (atIndex === void 0) {
atIndex = Number.MAX_VALUE;
}
_super.prototype._addViewToNativeVisualTree.call(this, child);
if (this.nativeView && child.nativeView) {
if (atIndex >= this.nativeView.getChildCount()) {
this.nativeView.addView(child.nativeView);
} else {
this.nativeView.addView(child.nativeView, atIndex);
}
return true;
}
return false;
};
ActionBar.prototype._removeViewFromNativeVisualTree = function(child) {
_super.prototype._removeViewFromNativeVisualTree.call(this, child);
if (this.nativeView && child.nativeView) {
this.nativeView.removeView(child.nativeView);
}
};
ActionBar.prototype[action_bar_common_1.colorProperty.getDefault] = function() {
if (!defaultTitleTextColor) {
var textView = new android.widget.TextView(this._context);
defaultTitleTextColor = textView.getTextColors().getDefaultColor();
}
return defaultTitleTextColor;
};
ActionBar.prototype[action_bar_common_1.colorProperty.setNative] = function(value) {
var color = value instanceof action_bar_common_1.Color ? value.android : value;
this.nativeView.setTitleTextColor(color);
};
return ActionBar;
}(action_bar_common_1.ActionBarBase);
exports.ActionBar = ActionBar;
var defaultTitleTextColor;
function getDrawableOrResourceId(icon, resources) {
if (typeof icon !== "string") {
return undefined;
}
if (icon.indexOf(utils_1.RESOURCE_PREFIX) === 0) {
var resourceId = resources.getIdentifier(icon.substr(utils_1.RESOURCE_PREFIX.length), "drawable", application.android.packageName);
if (resourceId > 0) {
return resourceId;
}
} else {
var drawable = void 0;
var is = image_source_1.fromFileOrResource(icon);
if (is) {
drawable = new android.graphics.drawable.BitmapDrawable(is.android);
}
return drawable;
}
return undefined;
}
function getShowAsAction(menuItem) {
switch (menuItem.android.position) {
case "actionBarIfRoom":
return android.view.MenuItem.SHOW_AS_ACTION_IF_ROOM;

case "popup":
return android.view.MenuItem.SHOW_AS_ACTION_NEVER;

case "actionBar":
default:
return android.view.MenuItem.SHOW_AS_ACTION_ALWAYS;
}
}
function getIconVisibility(iconVisibility) {
switch (iconVisibility) {
case "always":
return true;

case "auto":
case "never":
default:
return false;
}
}
function getSystemResourceId(systemIcon) {
return android.content.res.Resources.getSystem().getIdentifier(systemIcon, "drawable", "android");
}
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
__export(__webpack_require__(12));
var view_1 = __webpack_require__(12);
var knownCollections;
(function(knownCollections) {
knownCollections.actionItems = "actionItems";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var ActionBarBase = function(_super) {
__extends(ActionBarBase, _super);
function ActionBarBase() {
var _this = _super.call(this) || this;
_this._actionItems = new ActionItems(_this);
return _this;
}
Object.defineProperty(ActionBarBase.prototype, "navigationButton", {
get: function() {
return this._navigationButton;
},
set: function(value) {
if (this._navigationButton !== value) {
if (this._navigationButton) {
this._removeView(this._navigationButton);
this._navigationButton.actionBar = undefined;
}
this._navigationButton = value;
if (this._navigationButton) {
this._navigationButton.actionBar = this;
this._addView(this._navigationButton);
}
this.update();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBarBase.prototype, "actionItems", {
get: function() {
return this._actionItems;
},
set: function(value) {
throw new Error("actionItems property is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBarBase.prototype, "titleView", {
get: function() {
return this._titleView;
},
set: function(value) {
if (this._titleView !== value) {
if (this._titleView) {
this._removeView(this._titleView);
this._titleView.style[view_1.horizontalAlignmentProperty.cssName] = view_1.unsetValue;
this._titleView.style[view_1.verticalAlignmentProperty.cssName] = view_1.unsetValue;
}
this._titleView = value;
if (value) {
this._addView(value);
var style = value.style;
if (!view_1.horizontalAlignmentProperty.isSet(style)) {
style[view_1.horizontalAlignmentProperty.cssName] = "center";
}
if (!view_1.verticalAlignmentProperty.isSet(style)) {
style[view_1.verticalAlignmentProperty.cssName] = "middle";
}
}
this.update();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBarBase.prototype, "android", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBarBase.prototype, "_childrenCount", {
get: function() {
var actionViewsCount = 0;
this._actionItems.getItems().forEach(function(actionItem) {
if (actionItem.actionView) {
actionViewsCount++;
}
});
return actionViewsCount + (this.titleView ? 1 : 0);
},
enumerable: true,
configurable: true
});
ActionBarBase.prototype.update = function() {};
ActionBarBase.prototype._onTitlePropertyChanged = function() {};
ActionBarBase.prototype._addArrayFromBuilder = function(name, value) {
if (name === "actionItems") {
this.actionItems.setItems(value);
}
};
ActionBarBase.prototype.eachChildView = function(callback) {
var titleView = this.titleView;
if (titleView) {
callback(titleView);
}
};
ActionBarBase.prototype.eachChild = function(callback) {
var titleView = this.titleView;
if (titleView) {
callback(titleView);
}
var navigationButton = this._navigationButton;
if (navigationButton) {
callback(navigationButton);
}
this.actionItems.getItems().forEach(function(actionItem) {
callback(actionItem);
});
};
ActionBarBase.prototype._isEmpty = function() {
if (this.title || this.titleView || this.android && this.android.icon || this.navigationButton || this.actionItems.getItems().length > 0) {
return false;
}
return true;
};
return ActionBarBase;
}(view_1.View);
exports.ActionBarBase = ActionBarBase;
var ActionItems = function() {
function ActionItems(actionBar) {
this._items = new Array();
this._actionBar = actionBar;
}
ActionItems.prototype.addItem = function(item) {
if (!item) {
throw new Error("Cannot add empty item");
}
this._items.push(item);
item.actionBar = this._actionBar;
this._actionBar._addView(item);
this.invalidate();
};
ActionItems.prototype.removeItem = function(item) {
if (!item) {
throw new Error("Cannot remove empty item");
}
var itemIndex = this._items.indexOf(item);
if (itemIndex < 0) {
throw new Error("Cannot find item to remove");
}
this._items.splice(itemIndex, 1);
this._actionBar._removeView(item);
item.actionBar = undefined;
this.invalidate();
};
ActionItems.prototype.getItems = function() {
return this._items.slice();
};
ActionItems.prototype.getVisibleItems = function() {
var visibleItems = [];
this._items.forEach(function(item) {
if (isVisible(item)) {
visibleItems.push(item);
}
});
return visibleItems;
};
ActionItems.prototype.getItemAt = function(index) {
if (index < 0 || index >= this._items.length) {
return undefined;
}
return this._items[index];
};
ActionItems.prototype.setItems = function(items) {
while (this._items.length > 0) {
this.removeItem(this._items[this._items.length - 1]);
}
for (var i = 0; i < items.length; i++) {
this.addItem(items[i]);
}
this.invalidate();
};
ActionItems.prototype.invalidate = function() {
if (this._actionBar) {
this._actionBar.update();
}
};
return ActionItems;
}();
exports.ActionItems = ActionItems;
var ActionItemBase = function(_super) {
__extends(ActionItemBase, _super);
function ActionItemBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(ActionItemBase.prototype, "actionView", {
get: function() {
return this._actionView;
},
set: function(value) {
if (this._actionView !== value) {
if (this._actionView) {
this._actionView.style[view_1.horizontalAlignmentProperty.cssName] = view_1.unsetValue;
this._actionView.style[view_1.verticalAlignmentProperty.cssName] = view_1.unsetValue;
this._removeView(this._actionView);
}
this._actionView = value;
if (this._actionView) {
this._addView(this._actionView);
this._actionView.style[view_1.horizontalAlignmentProperty.cssName] = "center";
this._actionView.style[view_1.verticalAlignmentProperty.cssName] = "middle";
}
if (this._actionBar) {
this._actionBar.update();
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItemBase.prototype, "actionBar", {
get: function() {
return this._actionBar;
},
set: function(value) {
if (value !== this._actionBar) {
this._actionBar = value;
}
},
enumerable: true,
configurable: true
});
ActionItemBase.prototype._raiseTap = function() {
this._emit(ActionItemBase.tapEvent);
};
ActionItemBase.prototype._addChildFromBuilder = function(name, value) {
this.actionView = value;
};
ActionItemBase.prototype.eachChild = function(callback) {
if (this._actionView) {
callback(this._actionView);
}
};
return ActionItemBase;
}(view_1.ViewBase);
ActionItemBase.tapEvent = "tap";
exports.ActionItemBase = ActionItemBase;
function isVisible(item) {
return item.visibility === "visible";
}
exports.isVisible = isVisible;
function onTitlePropertyChanged(actionBar, oldValue, newValue) {
actionBar._onTitlePropertyChanged();
}
var titleProperty = new view_1.Property({
name: "title",
valueChanged: onTitlePropertyChanged
});
titleProperty.register(ActionBarBase);
function onItemChanged(item, oldValue, newValue) {
if (item.actionBar) {
item.actionBar.update();
}
}
var textProperty = new view_1.Property({
name: "text",
defaultValue: "",
valueChanged: onItemChanged
});
textProperty.register(ActionItemBase);
var iconProperty = new view_1.Property({
name: "icon",
valueChanged: onItemChanged
});
iconProperty.register(ActionItemBase);
var visibilityProperty = new view_1.Property({
name: "visibility",
defaultValue: "visible",
valueChanged: onItemChanged
});
visibilityProperty.register(ActionItemBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var activity_indicator_common_1 = __webpack_require__(97);
__export(__webpack_require__(97));
var ActivityIndicator = function(_super) {
__extends(ActivityIndicator, _super);
function ActivityIndicator() {
return _super !== null && _super.apply(this, arguments) || this;
}
ActivityIndicator.prototype.createNativeView = function() {
var progressBar = new android.widget.ProgressBar(this._context);
progressBar.setVisibility(android.view.View.INVISIBLE);
progressBar.setIndeterminate(true);
return progressBar;
};
ActivityIndicator.prototype[activity_indicator_common_1.busyProperty.getDefault] = function() {
return false;
};
ActivityIndicator.prototype[activity_indicator_common_1.busyProperty.setNative] = function(value) {
if (this.visibility === activity_indicator_common_1.Visibility.VISIBLE) {
this.nativeView.setVisibility(value ? android.view.View.VISIBLE : android.view.View.INVISIBLE);
}
};
ActivityIndicator.prototype[activity_indicator_common_1.visibilityProperty.getDefault] = function() {
return activity_indicator_common_1.Visibility.HIDDEN;
};
ActivityIndicator.prototype[activity_indicator_common_1.visibilityProperty.setNative] = function(value) {
switch (value) {
case activity_indicator_common_1.Visibility.VISIBLE:
this.nativeView.setVisibility(this.busy ? android.view.View.VISIBLE : android.view.View.INVISIBLE);
break;

case activity_indicator_common_1.Visibility.HIDDEN:
this.nativeView.setVisibility(android.view.View.INVISIBLE);
break;

case activity_indicator_common_1.Visibility.COLLAPSE:
this.nativeView.setVisibility(android.view.View.GONE);
break;

default:
throw new Error("Invalid visibility value: " + value + '. Valid values are: "' + activity_indicator_common_1.Visibility.VISIBLE + '", "' + activity_indicator_common_1.Visibility.HIDDEN + '", "' + activity_indicator_common_1.Visibility.COLLAPSE + '".');
}
};
ActivityIndicator.prototype[activity_indicator_common_1.colorProperty.getDefault] = function() {
return -1;
};
ActivityIndicator.prototype[activity_indicator_common_1.colorProperty.setNative] = function(value) {
if (value instanceof activity_indicator_common_1.Color) {
this.nativeView.getIndeterminateDrawable().setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
} else {
this.nativeView.getIndeterminateDrawable().clearColorFilter();
}
};
return ActivityIndicator;
}(activity_indicator_common_1.ActivityIndicatorBase);
exports.ActivityIndicator = ActivityIndicator;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var ActivityIndicatorBase = function(_super) {
__extends(ActivityIndicatorBase, _super);
function ActivityIndicatorBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return ActivityIndicatorBase;
}(view_1.View);
exports.ActivityIndicatorBase = ActivityIndicatorBase;
exports.busyProperty = new view_1.Property({
name: "busy",
defaultValue: false,
valueConverter: view_1.booleanConverter
});
exports.busyProperty.register(ActivityIndicatorBase);
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var content_view_1 = __webpack_require__(99);
var Border = function(_super) {
__extends(Border, _super);
function Border() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(Border.prototype, "cornerRadius", {
get: function() {
if (typeof this.borderRadius === "number") {
return this.borderRadius;
}
return 0;
},
set: function(value) {
this.borderRadius = value;
},
enumerable: true,
configurable: true
});
Border.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var width = content_view_1.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = content_view_1.layout.getMeasureSpecMode(widthMeasureSpec);
var height = content_view_1.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = content_view_1.layout.getMeasureSpecMode(heightMeasureSpec);
var horizontalBorderLength = this.effectiveBorderLeftWidth + this.effectiveBorderRightWidth;
var verticalBorderLength = this.effectiveBorderTopWidth + this.effectiveBorderBottomWidth;
var result = content_view_1.View.measureChild(this, this.layoutView, content_view_1.layout.makeMeasureSpec(width - horizontalBorderLength, widthMode), content_view_1.layout.makeMeasureSpec(height - verticalBorderLength, heightMode));
var widthAndState = content_view_1.View.resolveSizeAndState(result.measuredWidth + horizontalBorderLength, width, widthMode, 0);
var heightAndState = content_view_1.View.resolveSizeAndState(result.measuredHeight + verticalBorderLength, height, heightMode, 0);
this.setMeasuredDimension(widthAndState, heightAndState);
};
Border.prototype.onLayout = function(left, top, right, bottom) {
var horizontalBorderLength = this.effectiveBorderLeftWidth + this.effectiveBorderRightWidth;
var verticalBorderLength = this.effectiveBorderTopWidth + this.effectiveBorderBottomWidth;
content_view_1.View.layoutChild(this, this.layoutView, this.effectiveBorderLeftWidth, this.effectiveBorderTopWidth, right - left - horizontalBorderLength, bottom - top - verticalBorderLength);
};
return Border;
}(content_view_1.ContentView);
Border = __decorate([ Deprecated ], Border);
exports.Border = Border;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var ContentView = function(_super) {
__extends(ContentView, _super);
function ContentView() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(ContentView.prototype, "content", {
get: function() {
return this._content;
},
set: function(value) {
var oldView = this._content;
if (this._content) {
this._removeView(this._content);
}
this._content = value;
if (this._content) {
this._addView(this._content);
}
this._onContentChanged(oldView, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ContentView.prototype, "layoutView", {
get: function() {
var result;
if (this._content) {
var first_1 = true;
this._content._eachLayoutView(function(child) {
if (first_1) {
first_1 = false;
result = child;
} else {
throw new Error("More than one layout child inside a ContentView");
}
});
}
return result;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ContentView.prototype, "_childrenCount", {
get: function() {
if (this._content) {
return 1;
}
return 0;
},
enumerable: true,
configurable: true
});
ContentView.prototype._onContentChanged = function(oldView, newView) {};
ContentView.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof view_1.View) {
this.content = value;
}
};
ContentView.prototype.eachChildView = function(callback) {
var content = this._content;
if (content) {
callback(content);
}
};
ContentView.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var result = view_1.View.measureChild(this, this.layoutView, widthMeasureSpec, heightMeasureSpec);
var width = view_1.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = view_1.layout.getMeasureSpecMode(widthMeasureSpec);
var height = view_1.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = view_1.layout.getMeasureSpecMode(heightMeasureSpec);
var measureWidth = Math.max(result.measuredWidth, this.effectiveMinWidth);
var measureHeight = Math.max(result.measuredHeight, this.effectiveMinHeight);
var widthAndState = view_1.View.resolveSizeAndState(measureWidth, width, widthMode, 0);
var heightAndState = view_1.View.resolveSizeAndState(measureHeight, height, heightMode, 0);
this.setMeasuredDimension(widthAndState, heightAndState);
};
ContentView.prototype.onLayout = function(left, top, right, bottom) {
view_1.View.layoutChild(this, this.layoutView, 0, 0, right - left, bottom - top);
};
return ContentView;
}(view_1.CustomLayoutView);
exports.ContentView = ContentView;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var observable_1 = __webpack_require__(32);
var types_1 = __webpack_require__(17);
var properties_1 = __webpack_require__(31);
var propertyFromKey = {};
function generatePropertyKey(name, ownerType, validate) {
if (validate) {
validateRegisterParameters(name, ownerType);
}
return ownerType + "." + name;
}
function validateRegisterParameters(name, ownerType) {
if (name == null || name.trim().length === 0) {
throw new Error("Name should not be null or empty string.");
}
if (ownerType == null || ownerType.trim().length === 0) {
throw new Error("OwnerType should not be null or empty string.");
}
}
function getPropertyByNameAndType(name, owner) {
var result;
var key;
var classInfo = types_1.getClassInfo(owner);
while (classInfo) {
key = generatePropertyKey(name, classInfo.name);
result = propertyFromKey[key];
if (result) {
break;
}
classInfo = classInfo.baseClassInfo;
}
return result;
}
var PropertyMetadataSettings;
(function(PropertyMetadataSettings) {
PropertyMetadataSettings.None = 0;
PropertyMetadataSettings.AffectsLayout = 1;
PropertyMetadataSettings.AffectsStyle = 1 << 1;
PropertyMetadataSettings.Inheritable = 1 << 2;
})(PropertyMetadataSettings = exports.PropertyMetadataSettings || (exports.PropertyMetadataSettings = {}));
var ValueSource;
(function(ValueSource) {
ValueSource.Default = 0;
ValueSource.Inherited = 1;
ValueSource.Css = 2;
ValueSource.Local = 3;
ValueSource.VisualState = 4;
})(ValueSource = exports.ValueSource || (exports.ValueSource = {}));
var PropertyMetadata = function() {
function PropertyMetadata(defaultValue, options, onChanged, onValidateValue, equalityComparer) {
if (options === void 0) {
options = PropertyMetadataSettings.None;
}
this.defaultValue = defaultValue;
this.options = options;
throw new Error("* @deprecated use 'ui/core/properties' module instead.");
}
return PropertyMetadata;
}();
exports.PropertyMetadata = PropertyMetadata;
var Property = function() {
function Property(name, ownerType, metadata, valueConverter) {
this.name = name;
this.ownerType = ownerType;
this.metadata = metadata;
throw new Error("* @deprecated use 'ui/core/properties' module instead.");
}
return Property;
}();
exports.Property = Property;
var PropertyEntry = function() {
function PropertyEntry(property) {
this.property = property;
this.valueSource = ValueSource.Default;
throw new Error("* @deprecated use 'ui/core/properties' module instead.");
}
PropertyEntry.prototype.resetValue = function() {
this.valueSource = ValueSource.Default;
this.inheritedValue = this.cssValue = this.localValue = this.visualStateValue = this.effectiveValue = undefined;
};
return PropertyEntry;
}();
exports.PropertyEntry = PropertyEntry;
var DependencyObservable = function(_super) {
__extends(DependencyObservable, _super);
function DependencyObservable() {
var _this = _super.call(this) || this;
_this._propertyEntries = {};
throw new Error("* @deprecated use 'ui/core/view-base or ui/core/view' as base class.");
return _this;
}
DependencyObservable.prototype.set = function(name, value) {
var property = getPropertyByNameAndType(name, this);
if (property) {
this._setValueInternal(property, value, ValueSource.Local);
} else {
_super.prototype.set.call(this, name, value);
}
};
DependencyObservable.prototype.get = function(name) {
var property = getPropertyByNameAndType(name, this);
if (property) {
return this._getValue(property);
} else {
return _super.prototype.get.call(this, name);
}
};
DependencyObservable.prototype._setValue = function(property, value, source) {
this._setValueInternal(property, value, source || ValueSource.Local);
};
DependencyObservable.prototype._getValueSource = function(property) {
var entry = this._propertyEntries[property.id];
if (entry) {
return entry.valueSource;
}
return ValueSource.Default;
};
DependencyObservable.prototype._getValue = function(property) {
var entry = this._propertyEntries[property.id];
if (entry) {
return entry.effectiveValue;
} else {
return this._getDefaultValue(property);
}
};
DependencyObservable.prototype._getDefaultValue = function(property) {
if (property.defaultValueGetter) {
var defaultValueResult = property.defaultValueGetter(this);
var defaultValue = defaultValueResult.result;
if (defaultValueResult.cacheable) {
var entry = new PropertyEntry(property);
entry.effectiveValue = entry.defaultValue = defaultValue;
this._propertyEntries[property.id] = entry;
}
return defaultValue;
}
return property.defaultValue;
};
DependencyObservable.prototype._resetValues = function(valueSource) {
for (var i = 0, keys = Object.keys(this._propertyEntries); i < keys.length; i++) {
var key = keys[i];
var entry = this._propertyEntries[key];
this._resetValueInternal(entry.property, entry, valueSource);
}
};
DependencyObservable.prototype._resetValue = function(property, valueSource) {
if (valueSource === void 0) {
valueSource = ValueSource.Local;
}
var entry = this._propertyEntries[property.id];
if (!entry) {
return;
}
this._resetValueInternal(property, entry, valueSource);
};
DependencyObservable.prototype._resetValueInternal = function(property, entry, valueSource) {
switch (valueSource) {
case ValueSource.Inherited:
entry.inheritedValue = undefined;
break;

case ValueSource.Css:
entry.cssValue = undefined;
break;

case ValueSource.Local:
entry.localValue = undefined;
break;

case ValueSource.VisualState:
entry.visualStateValue = undefined;
break;
}
var currentValueSource = entry.valueSource;
if (currentValueSource !== valueSource) {
return;
}
var currentValue = entry.effectiveValue;
var newValue = this.getEffectiveValueAndUpdateEntry(currentValueSource, entry, property);
if (!property.equalityComparer(currentValue, newValue)) {
if (entry.valueSource === ValueSource.Default && !property.defaultValueGetter) {
delete this._propertyEntries[property.id];
} else {
entry.effectiveValue = newValue;
}
this._onPropertyChanged(property, currentValue, newValue);
}
};
DependencyObservable.prototype._onPropertyChanged = function(property, oldValue, newValue) {
var valueChanged = property.onValueChanged;
if (valueChanged) {
valueChanged({
object: this,
property: property,
eventName: observable_1.Observable.propertyChangeEvent,
newValue: newValue,
oldValue: oldValue
});
}
var propName = property.name;
if (this.hasListeners(observable_1.Observable.propertyChangeEvent)) {
this.notifyPropertyChange(propName, newValue);
}
var eventName = property.nameEvent;
if (this.hasListeners(eventName)) {
var ngChangedData = {
eventName: eventName,
propertyName: propName,
object: this,
value: newValue
};
this.notify(ngChangedData);
}
};
DependencyObservable.prototype._eachSetProperty = function(callback) {
for (var i = 0, keys = Object.keys(this._propertyEntries); i < keys.length; i++) {
var key = keys[i];
var entry = this._propertyEntries[key];
if (!callback(entry.property)) {
break;
}
}
};
DependencyObservable.prototype._eachSetPropertyValue = function(callback) {
for (var i = 0, keys = Object.keys(this._propertyEntries); i < keys.length; i++) {
var key = keys[i];
var entry = this._propertyEntries[key];
if (entry.valueSource === ValueSource.Default) {
continue;
}
if (!callback(entry.property, entry.effectiveValue)) {
break;
}
}
};
DependencyObservable.prototype._setValueInternal = function(property, value, source) {
if (value === properties_1.unsetValue) {
this._resetValue(property, source);
return;
}
var wrapped = value && value.wrapped;
var realValue = wrapped ? observable_1.WrappedValue.unwrap(value) : value;
var validate = property.onValidateValue;
if (validate && !validate(realValue)) {
throw new Error("Invalid value " + realValue + " for property " + property.name);
}
var converter = property.valueConverter;
if (converter && types_1.isString(realValue)) {
realValue = converter(realValue);
}
var entry = this._propertyEntries[property.id];
var currentValue;
if (!entry) {
entry = new PropertyEntry(property);
entry.effectiveValue = this._getDefaultValue(property);
this._propertyEntries[property.id] = entry;
}
currentValue = entry.effectiveValue;
switch (source) {
case ValueSource.Inherited:
entry.inheritedValue = realValue;
break;

case ValueSource.Css:
entry.cssValue = realValue;
break;

case ValueSource.Local:
entry.localValue = realValue;
break;

case ValueSource.VisualState:
entry.visualStateValue = realValue;
break;
}
var currentValueSource = entry.valueSource;
if (currentValueSource > source) {
return;
} else if (currentValueSource < source) {
entry.valueSource = source;
}
if (wrapped || !property.equalityComparer(currentValue, realValue)) {
entry.effectiveValue = realValue;
this._onPropertyChanged(property, currentValue, realValue);
}
};
DependencyObservable.prototype.getEffectiveValueAndUpdateEntry = function(currentValueSource, entry, property) {
var newValue;
switch (currentValueSource) {
case ValueSource.Inherited:
newValue = property.defaultValue;
entry.valueSource = ValueSource.Default;
break;

case ValueSource.Css:
if (entry.inheritedValue !== undefined) {
newValue = entry.inheritedValue;
entry.valueSource = ValueSource.Inherited;
} else {
newValue = entry.defaultValue !== undefined ? entry.defaultValue : property.defaultValue;
entry.valueSource = ValueSource.Default;
}
break;

case ValueSource.Local:
if (entry.cssValue !== undefined) {
newValue = entry.cssValue;
entry.valueSource = ValueSource.Css;
} else if (entry.inheritedValue !== undefined) {
newValue = entry.inheritedValue;
entry.valueSource = ValueSource.Inherited;
} else {
newValue = entry.defaultValue !== undefined ? entry.defaultValue : property.defaultValue;
entry.valueSource = ValueSource.Default;
}
break;

case ValueSource.VisualState:
if (entry.localValue !== undefined) {
newValue = entry.localValue;
entry.valueSource = ValueSource.Local;
} else if (entry.cssValue !== undefined) {
newValue = entry.cssValue;
entry.valueSource = ValueSource.Css;
} else if (entry.inheritedValue !== undefined) {
newValue = entry.inheritedValue;
entry.valueSource = ValueSource.Inherited;
} else {
newValue = entry.defaultValue !== undefined ? entry.defaultValue : property.defaultValue;
entry.valueSource = ValueSource.Default;
}
break;
}
return newValue;
};
return DependencyObservable;
}(observable_1.Observable);
exports.DependencyObservable = DependencyObservable;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var date_picker_common_1 = __webpack_require__(102);
__export(__webpack_require__(102));
var DateChangedListener;
function initializeDateChangedListener() {
if (DateChangedListener) {
return;
}
var DateChangedListenerImpl = function(_super) {
__extends(DateChangedListenerImpl, _super);
function DateChangedListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
DateChangedListenerImpl.prototype.onDateChanged = function(picker, year, month, day) {
var owner = this.owner;
var dateChanged = false;
if (year !== owner.year) {
date_picker_common_1.yearProperty.nativeValueChange(owner, year);
dateChanged = true;
}
if (month + 1 !== owner.month) {
date_picker_common_1.monthProperty.nativeValueChange(owner, month + 1);
dateChanged = true;
}
if (day !== owner.day) {
date_picker_common_1.dayProperty.nativeValueChange(owner, day);
dateChanged = true;
}
if (dateChanged) {
date_picker_common_1.dateProperty.nativeValueChange(owner, new Date(year, month, day));
}
};
return DateChangedListenerImpl;
}(java.lang.Object);
DateChangedListenerImpl = __decorate([ Interfaces([ android.widget.DatePicker.OnDateChangedListener ]) ], DateChangedListenerImpl);
DateChangedListener = DateChangedListenerImpl;
}
var DatePicker = function(_super) {
__extends(DatePicker, _super);
function DatePicker() {
return _super !== null && _super.apply(this, arguments) || this;
}
DatePicker.prototype.createNativeView = function() {
initializeDateChangedListener();
var picker = new android.widget.DatePicker(this._context);
picker.setCalendarViewShown(false);
var listener = new DateChangedListener(this);
picker.init(0, 0, 0, listener);
picker.listener = listener;
return picker;
};
DatePicker.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
this.nativeView.listener.owner = this;
};
DatePicker.prototype.disposeNativeView = function() {
this.nativeView.listener.owner = null;
_super.prototype.disposeNativeView.call(this);
};
DatePicker.prototype.updateNativeDate = function() {
var nativeView = this.nativeView;
var year = typeof this.year === "number" ? this.year : nativeView.getYear();
var month = typeof this.month === "number" ? this.month - 1 : nativeView.getMonth();
var day = typeof this.day === "number" ? this.day : nativeView.getDayOfMonth();
this.date = new Date(year, month, day);
};
DatePicker.prototype[date_picker_common_1.yearProperty.getDefault] = function() {
return this.nativeView.getYear();
};
DatePicker.prototype[date_picker_common_1.yearProperty.setNative] = function(value) {
if (this.nativeView.getYear() !== value) {
this.updateNativeDate();
}
};
DatePicker.prototype[date_picker_common_1.monthProperty.getDefault] = function() {
return this.nativeView.getMonth();
};
DatePicker.prototype[date_picker_common_1.monthProperty.setNative] = function(value) {
if (this.nativeView.getMonth() !== value - 1) {
this.updateNativeDate();
}
};
DatePicker.prototype[date_picker_common_1.dayProperty.getDefault] = function() {
return this.nativeView.getDayOfMonth();
};
DatePicker.prototype[date_picker_common_1.dayProperty.setNative] = function(value) {
if (this.nativeView.getDayOfMonth() !== value) {
this.updateNativeDate();
}
};
DatePicker.prototype[date_picker_common_1.dateProperty.getDefault] = function() {
var nativeView = this.nativeView;
return new Date(nativeView.getYear(), nativeView.getMonth(), nativeView.getDayOfMonth());
};
DatePicker.prototype[date_picker_common_1.dateProperty.setNative] = function(value) {
var nativeView = this.nativeView;
if (nativeView.getDayOfMonth() !== value.getDay() || nativeView.getMonth() !== value.getMonth() || nativeView.getYear() !== value.getFullYear()) {
nativeView.updateDate(value.getFullYear(), value.getMonth(), value.getDate());
}
};
DatePicker.prototype[date_picker_common_1.maxDateProperty.getDefault] = function() {
return this.nativeView.getMaxDate();
};
DatePicker.prototype[date_picker_common_1.maxDateProperty.setNative] = function(value) {
var newValue = value instanceof Date ? value.getTime() : value;
this.nativeView.setMaxDate(newValue);
};
DatePicker.prototype[date_picker_common_1.minDateProperty.getDefault] = function() {
return this.nativeView.getMinDate();
};
DatePicker.prototype[date_picker_common_1.minDateProperty.setNative] = function(value) {
var newValue = value instanceof Date ? value.getTime() : value;
this.nativeView.setMinDate(newValue);
};
return DatePicker;
}(date_picker_common_1.DatePickerBase);
exports.DatePicker = DatePicker;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var DatePickerBase = function(_super) {
__extends(DatePickerBase, _super);
function DatePickerBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return DatePickerBase;
}(view_1.View);
exports.DatePickerBase = DatePickerBase;
exports.yearProperty = new view_1.Property({
name: "year",
valueConverter: function(v) {
return parseInt(v);
}
});
exports.yearProperty.register(DatePickerBase);
exports.monthProperty = new view_1.Property({
name: "month",
valueConverter: function(v) {
return parseInt(v);
}
});
exports.monthProperty.register(DatePickerBase);
exports.dayProperty = new view_1.Property({
name: "day",
valueConverter: function(v) {
return parseInt(v);
}
});
exports.dayProperty.register(DatePickerBase);
function dateComparer(x, y) {
return x <= y && x >= y ? true : false;
}
exports.maxDateProperty = new view_1.Property({
name: "maxDate",
equalityComparer: dateComparer,
valueConverter: function(v) {
return new Date(v);
}
});
exports.maxDateProperty.register(DatePickerBase);
exports.minDateProperty = new view_1.Property({
name: "minDate",
equalityComparer: dateComparer,
valueConverter: function(v) {
return new Date(v);
}
});
exports.minDateProperty.register(DatePickerBase);
exports.dateProperty = new view_1.Property({
name: "date",
equalityComparer: dateComparer,
valueConverter: function(v) {
return new Date(v);
}
});
exports.dateProperty.register(DatePickerBase);
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var KeyboardType;
(function(KeyboardType) {
KeyboardType.datetime = "datetime";
KeyboardType.phone = "phone";
KeyboardType.number = "number";
KeyboardType.url = "url";
KeyboardType.email = "email";
})(KeyboardType = exports.KeyboardType || (exports.KeyboardType = {}));
var ReturnKeyType;
(function(ReturnKeyType) {
ReturnKeyType.done = "done";
ReturnKeyType.next = "next";
ReturnKeyType.go = "go";
ReturnKeyType.search = "search";
ReturnKeyType.send = "send";
})(ReturnKeyType = exports.ReturnKeyType || (exports.ReturnKeyType = {}));
var TextAlignment;
(function(TextAlignment) {
TextAlignment.left = "left";
TextAlignment.center = "center";
TextAlignment.right = "right";
})(TextAlignment = exports.TextAlignment || (exports.TextAlignment = {}));
var TextDecoration;
(function(TextDecoration) {
TextDecoration.none = "none";
TextDecoration.underline = "underline";
TextDecoration.lineThrough = "line-through";
})(TextDecoration = exports.TextDecoration || (exports.TextDecoration = {}));
var TextTransform;
(function(TextTransform) {
TextTransform.none = "none";
TextTransform.capitalize = "capitalize";
TextTransform.uppercase = "uppercase";
TextTransform.lowercase = "lowercase";
})(TextTransform = exports.TextTransform || (exports.TextTransform = {}));
var WhiteSpace;
(function(WhiteSpace) {
WhiteSpace.normal = "normal";
WhiteSpace.nowrap = "nowrap";
})(WhiteSpace = exports.WhiteSpace || (exports.WhiteSpace = {}));
var Orientation;
(function(Orientation) {
Orientation.horizontal = "horizontal";
Orientation.vertical = "vertical";
})(Orientation = exports.Orientation || (exports.Orientation = {}));
var DeviceOrientation;
(function(DeviceOrientation) {
DeviceOrientation.portrait = "portrait";
DeviceOrientation.landscape = "landscape";
DeviceOrientation.unknown = "unknown";
})(DeviceOrientation = exports.DeviceOrientation || (exports.DeviceOrientation = {}));
var HorizontalAlignment;
(function(HorizontalAlignment) {
HorizontalAlignment.left = "left";
HorizontalAlignment.center = "center";
HorizontalAlignment.right = "right";
HorizontalAlignment.stretch = "stretch";
})(HorizontalAlignment = exports.HorizontalAlignment || (exports.HorizontalAlignment = {}));
var VerticalAlignment;
(function(VerticalAlignment) {
VerticalAlignment.top = "top";
VerticalAlignment.middle = "middle";
VerticalAlignment.bottom = "bottom";
VerticalAlignment.stretch = "stretch";
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));
var Stretch;
(function(Stretch) {
Stretch.none = "none";
Stretch.aspectFill = "aspectFill";
Stretch.aspectFit = "aspectFit";
Stretch.fill = "fill";
})(Stretch = exports.Stretch || (exports.Stretch = {}));
var Visibility;
(function(Visibility) {
Visibility.visible = "visible";
Visibility.collapse = "collapse";
Visibility.collapsed = "collapsed";
})(Visibility = exports.Visibility || (exports.Visibility = {}));
var FontAttributes;
(function(FontAttributes) {
FontAttributes.Normal = 0;
FontAttributes.Bold = 1;
FontAttributes.Italic = 1 << 1;
})(FontAttributes = exports.FontAttributes || (exports.FontAttributes = {}));
var DeviceType;
(function(DeviceType) {
DeviceType.Phone = "Phone";
DeviceType.Tablet = "Tablet";
})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));
var UpdateTextTrigger;
(function(UpdateTextTrigger) {
UpdateTextTrigger.focusLost = "focusLost";
UpdateTextTrigger.textChanged = "textChanged";
})(UpdateTextTrigger = exports.UpdateTextTrigger || (exports.UpdateTextTrigger = {}));
var Accuracy;
(function(Accuracy) {
Accuracy.any = 300;
Accuracy.high = 3;
})(Accuracy = exports.Accuracy || (exports.Accuracy = {}));
var Dock;
(function(Dock) {
Dock.left = "left";
Dock.top = "top";
Dock.right = "right";
Dock.bottom = "bottom";
})(Dock = exports.Dock || (exports.Dock = {}));
var AutocapitalizationType;
(function(AutocapitalizationType) {
AutocapitalizationType.none = "none";
AutocapitalizationType.words = "words";
AutocapitalizationType.sentences = "sentences";
AutocapitalizationType.allCharacters = "allcharacters";
})(AutocapitalizationType = exports.AutocapitalizationType || (exports.AutocapitalizationType = {}));
var NavigationBarVisibility;
(function(NavigationBarVisibility) {
NavigationBarVisibility.auto = "auto";
NavigationBarVisibility.never = "never";
NavigationBarVisibility.always = "always";
})(NavigationBarVisibility = exports.NavigationBarVisibility || (exports.NavigationBarVisibility = {}));
var AndroidActionBarIconVisibility;
(function(AndroidActionBarIconVisibility) {
AndroidActionBarIconVisibility.auto = "auto";
AndroidActionBarIconVisibility.never = "never";
AndroidActionBarIconVisibility.always = "always";
})(AndroidActionBarIconVisibility = exports.AndroidActionBarIconVisibility || (exports.AndroidActionBarIconVisibility = {}));
var AndroidActionItemPosition;
(function(AndroidActionItemPosition) {
AndroidActionItemPosition.actionBar = "actionBar";
AndroidActionItemPosition.actionBarIfRoom = "actionBarIfRoom";
AndroidActionItemPosition.popup = "popup";
})(AndroidActionItemPosition = exports.AndroidActionItemPosition || (exports.AndroidActionItemPosition = {}));
var IOSActionItemPosition;
(function(IOSActionItemPosition) {
IOSActionItemPosition.left = "left";
IOSActionItemPosition.right = "right";
})(IOSActionItemPosition = exports.IOSActionItemPosition || (exports.IOSActionItemPosition = {}));
var ImageFormat;
(function(ImageFormat) {
ImageFormat.png = "png";
ImageFormat.jpeg = "jpeg";
ImageFormat.jpg = "jpg";
})(ImageFormat = exports.ImageFormat || (exports.ImageFormat = {}));
var FontStyle;
(function(FontStyle) {
FontStyle.normal = "normal";
FontStyle.italic = "italic";
})(FontStyle = exports.FontStyle || (exports.FontStyle = {}));
var FontWeight;
(function(FontWeight) {
FontWeight.thin = "100";
FontWeight.extraLight = "200";
FontWeight.light = "300";
FontWeight.normal = "normal";
FontWeight.medium = "500";
FontWeight.semiBold = "600";
FontWeight.bold = "bold";
FontWeight.extraBold = "800";
FontWeight.black = "900";
})(FontWeight = exports.FontWeight || (exports.FontWeight = {}));
var BackgroundRepeat;
(function(BackgroundRepeat) {
BackgroundRepeat.repeat = "repeat";
BackgroundRepeat.repeatX = "repeat-x";
BackgroundRepeat.repeatY = "repeat-y";
BackgroundRepeat.noRepeat = "no-repeat";
})(BackgroundRepeat = exports.BackgroundRepeat || (exports.BackgroundRepeat = {}));
var animationModule;
var AnimationCurve;
(function(AnimationCurve) {
AnimationCurve.ease = "ease";
AnimationCurve.easeIn = "easeIn";
AnimationCurve.easeOut = "easeOut";
AnimationCurve.easeInOut = "easeInOut";
AnimationCurve.linear = "linear";
AnimationCurve.spring = "spring";
function cubicBezier(x1, y1, x2, y2) {
animationModule = animationModule || __webpack_require__(49);
return new animationModule.CubicBezierAnimationCurve(x1, y1, x2, y2);
}
AnimationCurve.cubicBezier = cubicBezier;
})(AnimationCurve = exports.AnimationCurve || (exports.AnimationCurve = {}));
var StatusBarStyle;
(function(StatusBarStyle) {
StatusBarStyle.light = "light";
StatusBarStyle.dark = "dark";
})(StatusBarStyle = exports.StatusBarStyle || (exports.StatusBarStyle = {}));
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var html_view_common_1 = __webpack_require__(105);
__export(__webpack_require__(105));
var HtmlView = function(_super) {
__extends(HtmlView, _super);
function HtmlView() {
return _super !== null && _super.apply(this, arguments) || this;
}
HtmlView.prototype.createNativeView = function() {
var textView = new android.widget.TextView(this._context);
textView.setLinksClickable(true);
textView.setMovementMethod(android.text.method.LinkMovementMethod.getInstance());
return textView;
};
HtmlView.prototype[html_view_common_1.htmlProperty.getDefault] = function() {
return "";
};
HtmlView.prototype[html_view_common_1.htmlProperty.setNative] = function(value) {
var mask = 15;
if (value.search(/<a\s/i) >= 0) {
mask = 0;
}
this.nativeView.setAutoLinkMask(mask);
this.nativeView.setText(android.text.Html.fromHtml(value));
};
return HtmlView;
}(html_view_common_1.HtmlViewBase);
exports.HtmlView = HtmlView;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var HtmlViewBase = function(_super) {
__extends(HtmlViewBase, _super);
function HtmlViewBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return HtmlViewBase;
}(view_1.View);
exports.HtmlViewBase = HtmlViewBase;
exports.htmlProperty = new view_1.Property({
name: "html",
defaultValue: "",
affectsLayout: true
});
exports.htmlProperty.register(HtmlViewBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var image_common_1 = __webpack_require__(107);
var file_system_1 = __webpack_require__(19);
__export(__webpack_require__(107));
var FILE_PREFIX = "file:///";
var ASYNC = "async";
var AndroidImageView;
var ImageLoadedListener;
function initializeImageLoadedListener() {
if (ImageLoadedListener) {
return;
}
var ImageLoadedListenerImpl = function(_super) {
__extends(ImageLoadedListenerImpl, _super);
function ImageLoadedListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
ImageLoadedListenerImpl.prototype.onImageLoaded = function(success) {
var owner = this.owner;
if (owner) {
owner.isLoading = false;
}
};
return ImageLoadedListenerImpl;
}(java.lang.Object);
ImageLoadedListenerImpl = __decorate([ Interfaces([ org.nativescript.widgets.image.Worker.OnImageLoadedListener ]) ], ImageLoadedListenerImpl);
ImageLoadedListener = ImageLoadedListenerImpl;
}
var Image = function(_super) {
__extends(Image, _super);
function Image() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this.decodeWidth = 0;
_this.decodeHeight = 0;
_this.useCache = true;
return _this;
}
Image.prototype.createNativeView = function() {
if (!AndroidImageView) {
AndroidImageView = org.nativescript.widgets.ImageView;
}
initializeImageLoadedListener();
var imageView = new AndroidImageView(this._context);
var listener = new ImageLoadedListener(this);
imageView.setImageLoadedListener(listener);
imageView.listener = listener;
return imageView;
};
Image.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
this.nativeView.listener.owner = this;
};
Image.prototype.disposeNativeView = function() {
this.nativeView.listener.owner = null;
_super.prototype.disposeNativeView.call(this);
};
Image.prototype._createImageSourceFromSrc = function() {
var imageView = this.nativeView;
if (!imageView) {
return;
}
var value = this.src;
if (!value) {
imageView.setUri(null, 0, 0, false, true);
return;
}
var async = this.loadMode === ASYNC;
if (typeof value === "string" || value instanceof String) {
value = value.trim();
this.isLoading = true;
if (image_common_1.isDataURI(value)) {
_super.prototype._createImageSourceFromSrc.call(this);
} else if (image_common_1.isFileOrResourcePath(value)) {
if (value.indexOf(image_common_1.RESOURCE_PREFIX) === 0) {
imageView.setUri(value, this.decodeWidth, this.decodeHeight, this.useCache, async);
} else {
var fileName = value;
if (fileName.indexOf("~/") === 0) {
fileName = file_system_1.knownFolders.currentApp().path + "/" + fileName.replace("~/", "");
}
imageView.setUri(FILE_PREFIX + fileName, this.decodeWidth, this.decodeHeight, this.useCache, async);
}
} else {
imageView.setUri(value, this.decodeWidth, this.decodeHeight, this.useCache, true);
}
} else {
_super.prototype._createImageSourceFromSrc.call(this);
}
};
Image.prototype[image_common_1.stretchProperty.getDefault] = function() {
return "aspectFit";
};
Image.prototype[image_common_1.stretchProperty.setNative] = function(value) {
switch (value) {
case "aspectFit":
this.nativeView.setScaleType(android.widget.ImageView.ScaleType.FIT_CENTER);
break;

case "aspectFill":
this.nativeView.setScaleType(android.widget.ImageView.ScaleType.CENTER_CROP);
break;

case "fill":
this.nativeView.setScaleType(android.widget.ImageView.ScaleType.FIT_XY);
break;

case "none":
default:
this.nativeView.setScaleType(android.widget.ImageView.ScaleType.MATRIX);
break;
}
};
Image.prototype[image_common_1.tintColorProperty.getDefault] = function() {
return undefined;
};
Image.prototype[image_common_1.tintColorProperty.setNative] = function(value) {
if (value === undefined) {
this.nativeView.clearColorFilter();
} else {
this.nativeView.setColorFilter(value.android);
}
};
Image.prototype[image_common_1.imageSourceProperty.getDefault] = function() {
return undefined;
};
Image.prototype[image_common_1.imageSourceProperty.setNative] = function(value) {
var nativeView = this.nativeView;
if (value && value.android) {
var rotation = value.rotationAngle ? value.rotationAngle : 0;
nativeView.setRotationAngle(rotation);
nativeView.setImageBitmap(value.android);
} else {
nativeView.setRotationAngle(0);
nativeView.setImageBitmap(null);
}
};
Image.prototype[image_common_1.srcProperty.getDefault] = function() {
return undefined;
};
Image.prototype[image_common_1.srcProperty.setNative] = function(value) {
this._createImageSourceFromSrc();
};
return Image;
}(image_common_1.ImageBase);
exports.Image = Image;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
var image_asset_1 = __webpack_require__(92);
var image_source_1 = __webpack_require__(83);
exports.ImageSource = image_source_1.ImageSource;
exports.fromAsset = image_source_1.fromAsset;
exports.fromNativeSource = image_source_1.fromNativeSource;
exports.fromUrl = image_source_1.fromUrl;
var utils_1 = __webpack_require__(14);
exports.isDataURI = utils_1.isDataURI;
exports.isFileOrResourcePath = utils_1.isFileOrResourcePath;
exports.RESOURCE_PREFIX = utils_1.RESOURCE_PREFIX;
__export(__webpack_require__(12));
var ImageBase = function(_super) {
__extends(ImageBase, _super);
function ImageBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(ImageBase.prototype, "tintColor", {
get: function() {
return this.style.tintColor;
},
set: function(value) {
this.style.tintColor = value;
},
enumerable: true,
configurable: true
});
ImageBase.prototype._createImageSourceFromSrc = function() {
var _this = this;
var value = this.src;
var originalValue = value;
var sync = this.loadMode === "sync";
if (typeof value === "string" || value instanceof String) {
value = value.trim();
this.imageSource = null;
this["_url"] = value;
this.isLoading = true;
var source_1 = new image_source_1.ImageSource();
var imageLoaded = function() {
var currentValue = _this.src;
if (currentValue !== originalValue) {
return;
}
_this.imageSource = source_1;
_this.isLoading = false;
};
if (utils_1.isDataURI(value)) {
var base64Data = value.split(",")[1];
if (base64Data !== undefined) {
if (sync) {
source_1.loadFromBase64(base64Data);
imageLoaded();
} else {
source_1.fromBase64(base64Data).then(imageLoaded);
}
}
} else if (utils_1.isFileOrResourcePath(value)) {
if (value.indexOf(utils_1.RESOURCE_PREFIX) === 0) {
var resPath = value.substr(utils_1.RESOURCE_PREFIX.length);
if (sync) {
source_1.loadFromResource(resPath);
imageLoaded();
} else {
this.imageSource = null;
source_1.fromResource(resPath).then(imageLoaded);
}
} else {
if (sync) {
source_1.loadFromFile(value);
imageLoaded();
} else {
this.imageSource = null;
source_1.fromFile(value).then(imageLoaded);
}
}
} else {
this.imageSource = null;
image_source_1.fromUrl(value).then(function(r) {
if (_this["_url"] === value) {
_this.imageSource = r;
_this.isLoading = false;
}
});
}
} else if (value instanceof image_source_1.ImageSource) {
this.imageSource = value;
this.isLoading = false;
} else if (value instanceof image_asset_1.ImageAsset) {
image_source_1.fromAsset(value).then(function(result) {
_this.imageSource = result;
_this.isLoading = false;
});
} else {
this.imageSource = image_source_1.fromNativeSource(value);
this.isLoading = false;
}
};
return ImageBase;
}(view_1.View);
exports.ImageBase = ImageBase;
exports.imageSourceProperty = new view_1.Property({
name: "imageSource"
});
exports.imageSourceProperty.register(ImageBase);
exports.srcProperty = new view_1.Property({
name: "src"
});
exports.srcProperty.register(ImageBase);
exports.loadModeProperty = new view_1.Property({
name: "loadMode",
defaultValue: "sync"
});
exports.loadModeProperty.register(ImageBase);
exports.isLoadingProperty = new view_1.Property({
name: "isLoading",
defaultValue: false,
valueConverter: view_1.booleanConverter
});
exports.isLoadingProperty.register(ImageBase);
exports.stretchProperty = new view_1.Property({
name: "stretch",
defaultValue: "aspectFit",
affectsLayout: view_1.isIOS
});
exports.stretchProperty.register(ImageBase);
exports.tintColorProperty = new view_1.InheritedCssProperty({
name: "tintColor",
cssName: "tint-color",
equalityComparer: view_1.Color.equals,
valueConverter: function(value) {
return new view_1.Color(value);
}
});
exports.tintColorProperty.register(view_1.Style);
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var common = __webpack_require__(109);
var LruBitmapCacheClass;
function ensureLruBitmapCacheClass() {
if (LruBitmapCacheClass) {
return;
}
var LruBitmapCache = function(_super) {
__extends(LruBitmapCache, _super);
function LruBitmapCache(cacheSize) {
var _this = _super.call(this, cacheSize) || this;
return global.__native(_this);
}
LruBitmapCache.prototype.sizeOf = function(key, bitmap) {
var result = Math.round(bitmap.getByteCount() / 1024);
return result;
};
return LruBitmapCache;
}(android.util.LruCache);
LruBitmapCacheClass = LruBitmapCache;
}
var Cache = function(_super) {
__extends(Cache, _super);
function Cache() {
var _this = _super.call(this) || this;
ensureLruBitmapCacheClass();
var maxMemory = java.lang.Runtime.getRuntime().maxMemory() / 1024;
var cacheSize = maxMemory / 8;
_this._cache = new LruBitmapCacheClass(cacheSize);
var that = new WeakRef(_this);
_this._callback = new org.nativescript.widgets.Async.CompleteCallback({
onComplete: function(result, context) {
var instance = that.get();
if (instance) {
instance._onDownloadCompleted(context, result);
}
}
});
return _this;
}
Cache.prototype._downloadCore = function(request) {
org.nativescript.widgets.Async.Image.download(request.url, this._callback, request.key);
};
Cache.prototype.get = function(key) {
var result = this._cache.get(key);
return result;
};
Cache.prototype.set = function(key, image) {
this._cache.put(key, image);
};
Cache.prototype.remove = function(key) {
this._cache.remove(key);
};
Cache.prototype.clear = function() {
this._cache.evictAll();
};
return Cache;
}(common.Cache);
exports.Cache = Cache;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var observable = __webpack_require__(32);
var Cache = function(_super) {
__extends(Cache, _super);
function Cache() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this.maxRequests = 5;
_this._enabled = true;
_this._pendingDownloads = {};
_this._queue = [];
_this._currentDownloads = 0;
return _this;
}
Cache.prototype.enableDownload = function() {
if (this._enabled) {
return;
}
this._enabled = true;
var request;
while (this._queue.length > 0 && this._currentDownloads < this.maxRequests) {
request = this._queue.pop();
if (!(request.key in this._pendingDownloads)) {
this._download(request);
}
}
};
Cache.prototype.disableDownload = function() {
if (!this._enabled) {
return;
}
this._enabled = false;
};
Cache.prototype.push = function(request) {
this._addRequest(request, true);
};
Cache.prototype.enqueue = function(request) {
this._addRequest(request, false);
};
Cache.prototype._addRequest = function(request, onTop) {
if (request.key in this._pendingDownloads) {
var existingRequest = this._pendingDownloads[request.key];
this._mergeRequests(existingRequest, request);
} else {
var queueRequest;
for (var i = 0; i < this._queue.length; i++) {
if (this._queue[i].key === request.key) {
queueRequest = this._queue[i];
break;
}
}
if (queueRequest) {
this._mergeRequests(queueRequest, request);
} else {
if (this._shouldDownload(request, onTop)) {
this._download(request);
}
}
}
};
Cache.prototype._mergeRequests = function(existingRequest, newRequest) {
if (existingRequest.completed) {
if (newRequest.completed) {
var existingCompleted = existingRequest.completed;
var stackCompleted = function(result, key) {
existingCompleted(result, key);
newRequest.completed(result, key);
};
existingRequest.completed = stackCompleted;
}
} else {
existingRequest.completed = newRequest.completed;
}
};
Cache.prototype.get = function(key) {
throw new Error("Abstract");
};
Cache.prototype.set = function(key, image) {
throw new Error("Abstract");
};
Cache.prototype.remove = function(key) {
throw new Error("Abstract");
};
Cache.prototype.clear = function() {
throw new Error("Abstract");
};
Cache.prototype._downloadCore = function(request) {
throw new Error("Abstract");
};
Cache.prototype._onDownloadCompleted = function(key, image) {
var request = this._pendingDownloads[key];
if (request.key && image) {
this.set(request.key, image);
}
this._currentDownloads--;
if (request.completed) {
request.completed(image, request.key);
}
if (this.hasListeners(Cache.downloadedEvent)) {
this.notify({
eventName: Cache.downloadedEvent,
object: this,
key: key,
image: image
});
}
delete this._pendingDownloads[request.key];
this._updateQueue();
};
Cache.prototype._shouldDownload = function(request, onTop) {
if (this.get(request.key) || request.key in this._pendingDownloads) {
return false;
}
if (this._currentDownloads >= this.maxRequests || !this._enabled) {
if (onTop) {
this._queue.push(request);
} else {
this._queue.unshift(request);
}
return false;
}
return true;
};
Cache.prototype._download = function(request) {
this._currentDownloads++;
this._pendingDownloads[request.key] = request;
this._downloadCore(request);
};
Cache.prototype._updateQueue = function() {
if (!this._enabled || this._queue.length === 0 || this._currentDownloads === this.maxRequests) {
return;
}
var request = this._queue.pop();
this._download(request);
};
return Cache;
}(observable.Observable);
Cache.downloadedEvent = "downloaded";
exports.Cache = Cache;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var layout_base_common_1 = __webpack_require__(111);
__export(__webpack_require__(111));
var LayoutBase = function(_super) {
__extends(LayoutBase, _super);
function LayoutBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
LayoutBase.prototype[layout_base_common_1.clipToBoundsProperty.getDefault] = function() {
return true;
};
LayoutBase.prototype[layout_base_common_1.clipToBoundsProperty.setNative] = function(value) {
console.warn("clipToBounds with value false is not supported on Android. You can use this.android.getParent().setClipChildren(false) as an alternative");
};
LayoutBase.prototype[layout_base_common_1.paddingTopProperty.getDefault] = function() {
return {
value: this._defaultPaddingTop,
unit: "px"
};
};
LayoutBase.prototype[layout_base_common_1.paddingTopProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingTop(this.nativeView, layout_base_common_1.Length.toDevicePixels(value, 0) + layout_base_common_1.Length.toDevicePixels(this.style.borderTopWidth, 0));
};
LayoutBase.prototype[layout_base_common_1.paddingRightProperty.getDefault] = function() {
return {
value: this._defaultPaddingRight,
unit: "px"
};
};
LayoutBase.prototype[layout_base_common_1.paddingRightProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingRight(this.nativeView, layout_base_common_1.Length.toDevicePixels(value, 0) + layout_base_common_1.Length.toDevicePixels(this.style.borderRightWidth, 0));
};
LayoutBase.prototype[layout_base_common_1.paddingBottomProperty.getDefault] = function() {
return {
value: this._defaultPaddingBottom,
unit: "px"
};
};
LayoutBase.prototype[layout_base_common_1.paddingBottomProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingBottom(this.nativeView, layout_base_common_1.Length.toDevicePixels(value, 0) + layout_base_common_1.Length.toDevicePixels(this.style.borderBottomWidth, 0));
};
LayoutBase.prototype[layout_base_common_1.paddingLeftProperty.getDefault] = function() {
return {
value: this._defaultPaddingLeft,
unit: "px"
};
};
LayoutBase.prototype[layout_base_common_1.paddingLeftProperty.setNative] = function(value) {
org.nativescript.widgets.ViewHelper.setPaddingLeft(this.nativeView, layout_base_common_1.Length.toDevicePixels(value, 0) + layout_base_common_1.Length.toDevicePixels(this.style.borderLeftWidth, 0));
};
return LayoutBase;
}(layout_base_common_1.LayoutBaseCommon);
exports.LayoutBase = LayoutBase;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var LayoutBaseCommon = function(_super) {
__extends(LayoutBaseCommon, _super);
function LayoutBaseCommon() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._subViews = new Array();
return _this;
}
LayoutBaseCommon.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof view_1.View) {
this.addChild(value);
}
};
LayoutBaseCommon.prototype.getChildrenCount = function() {
return this._subViews.length;
};
Object.defineProperty(LayoutBaseCommon.prototype, "_childrenCount", {
get: function() {
return this._subViews.length;
},
enumerable: true,
configurable: true
});
LayoutBaseCommon.prototype.getChildAt = function(index) {
return this._subViews[index];
};
LayoutBaseCommon.prototype.getChildIndex = function(child) {
return this._subViews.indexOf(child);
};
LayoutBaseCommon.prototype.getChildById = function(id) {
return view_1.getViewById(this, id);
};
LayoutBaseCommon.prototype._registerLayoutChild = function(child) {};
LayoutBaseCommon.prototype._unregisterLayoutChild = function(child) {};
LayoutBaseCommon.prototype.addChild = function(child) {
this._subViews.push(child);
this._addView(child);
this._registerLayoutChild(child);
};
LayoutBaseCommon.prototype.insertChild = function(child, atIndex) {
this._subViews.splice(atIndex, 0, child);
this._addView(child, atIndex);
this._registerLayoutChild(child);
};
LayoutBaseCommon.prototype.removeChild = function(child) {
this._removeView(child);
var index = this._subViews.indexOf(child);
this._subViews.splice(index, 1);
this._unregisterLayoutChild(child);
};
LayoutBaseCommon.prototype.removeChildren = function() {
while (this.getChildrenCount() !== 0) {
this.removeChild(this._subViews[this.getChildrenCount() - 1]);
}
};
Object.defineProperty(LayoutBaseCommon.prototype, "padding", {
get: function() {
return this.style.padding;
},
set: function(value) {
this.style.padding = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBaseCommon.prototype, "paddingTop", {
get: function() {
return this.style.paddingTop;
},
set: function(value) {
this.style.paddingTop = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBaseCommon.prototype, "paddingRight", {
get: function() {
return this.style.paddingRight;
},
set: function(value) {
this.style.paddingRight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBaseCommon.prototype, "paddingBottom", {
get: function() {
return this.style.paddingBottom;
},
set: function(value) {
this.style.paddingBottom = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBaseCommon.prototype, "paddingLeft", {
get: function() {
return this.style.paddingLeft;
},
set: function(value) {
this.style.paddingLeft = value;
},
enumerable: true,
configurable: true
});
LayoutBaseCommon.prototype._childIndexToNativeChildIndex = function(index) {
if (index === undefined) {
return undefined;
}
var result = 0;
for (var i = 0; i < index && i < this._subViews.length; i++) {
result += this._subViews[i]._getNativeViewsCount();
}
return result;
};
LayoutBaseCommon.prototype.eachChildView = function(callback) {
for (var i = 0, length_1 = this._subViews.length; i < length_1; i++) {
var retVal = callback(this._subViews[i]);
if (retVal === false) {
break;
}
}
};
LayoutBaseCommon.prototype.eachLayoutChild = function(callback) {
var lastChild = null;
this.eachChildView(function(cv) {
cv._eachLayoutView(function(lv) {
if (lastChild && !lastChild.isCollapsed) {
callback(lastChild, false);
}
lastChild = lv;
});
return true;
});
if (lastChild && !lastChild.isCollapsed) {
callback(lastChild, true);
}
};
return LayoutBaseCommon;
}(view_1.CustomLayoutView);
exports.LayoutBaseCommon = LayoutBaseCommon;
exports.clipToBoundsProperty = new view_1.Property({
name: "clipToBounds",
defaultValue: true,
valueConverter: view_1.booleanConverter
});
exports.clipToBoundsProperty.register(LayoutBaseCommon);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var layout_base_1 = __webpack_require__(110);
__export(__webpack_require__(110));
var OWNER = Symbol("_owner");
var NativeViewGroup;
function initializeNativeViewGroup() {
if (NativeViewGroup) {
return;
}
var NativeViewGroupImpl = function(_super) {
__extends(NativeViewGroupImpl, _super);
function NativeViewGroupImpl(context) {
var _this = _super.call(this, context) || this;
return global.__native(_this);
}
NativeViewGroupImpl.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var owner = this[OWNER];
owner.onMeasure(widthMeasureSpec, heightMeasureSpec);
this.setMeasuredDimension(owner.getMeasuredWidth(), owner.getMeasuredHeight());
};
NativeViewGroupImpl.prototype.onLayout = function(changed, left, top, right, bottom) {
var owner = this[OWNER];
owner.onLayout(left, top, right, bottom);
};
return NativeViewGroupImpl;
}(android.view.ViewGroup);
NativeViewGroup = NativeViewGroupImpl;
}
var Layout = function(_super) {
__extends(Layout, _super);
function Layout() {
return _super !== null && _super.apply(this, arguments) || this;
}
Layout.prototype.createNativeView = function() {
initializeNativeViewGroup();
return new NativeViewGroup(this._context);
};
Layout.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
this.nativeView[OWNER] = this;
};
Layout.prototype.disposeNativeView = function() {
this.nativeView[OWNER] = undefined;
_super.prototype.disposeNativeView.call(this);
};
Layout.prototype.measure = function(widthMeasureSpec, heightMeasureSpec) {
this._setCurrentMeasureSpecs(widthMeasureSpec, heightMeasureSpec);
var view = this.nativeView;
if (view) {
if (layout_base_1.traceEnabled()) {
layout_base_1.traceWrite(this + " :measure: " + layout_base_1.layout.measureSpecToString(widthMeasureSpec) + ", " + layout_base_1.layout.measureSpecToString(heightMeasureSpec), layout_base_1.traceCategories.Layout);
}
view.measure(widthMeasureSpec, heightMeasureSpec);
}
};
Layout.prototype.layout = function(left, top, right, bottom) {
this._setCurrentLayoutBounds(left, top, right, bottom);
var view = this.nativeView;
if (view) {
this.layoutNativeView(left, top, right, bottom);
if (layout_base_1.traceEnabled()) {
layout_base_1.traceWrite(this + " :layout: " + left + ", " + top + ", " + (right - left) + ", " + (bottom - top), layout_base_1.traceCategories.Layout);
}
}
};
Layout.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {};
Layout.prototype.onLayout = function(left, top, right, bottom) {};
Layout.prototype.setMeasuredDimension = function(measuredWidth, measuredHeight) {
_super.prototype.setMeasuredDimension.call(this, measuredWidth, measuredHeight);
this._measuredWidth = measuredWidth;
this._measuredHeight = measuredHeight;
};
Layout.prototype.getMeasuredWidth = function() {
return this._measuredWidth;
};
Layout.prototype.getMeasuredHeight = function() {
return this._measuredHeight;
};
return Layout;
}(layout_base_1.LayoutBase);
exports.Layout = Layout;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var absolute_layout_common_1 = __webpack_require__(114);
__export(__webpack_require__(114));
function makeNativeSetter(setter) {
return function(value) {
var nativeView = this.nativeView;
var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();
if (lp instanceof org.nativescript.widgets.CommonLayoutParams) {
setter.call(this, lp, value);
nativeView.setLayoutParams(lp);
}
};
}
absolute_layout_common_1.View.prototype[absolute_layout_common_1.topProperty.setNative] = makeNativeSetter(function(lp, value) {
lp.top = absolute_layout_common_1.Length.toDevicePixels(value, 0);
});
absolute_layout_common_1.View.prototype[absolute_layout_common_1.leftProperty.setNative] = makeNativeSetter(function(lp, value) {
lp.left = absolute_layout_common_1.Length.toDevicePixels(value, 0);
});
var AbsoluteLayout = function(_super) {
__extends(AbsoluteLayout, _super);
function AbsoluteLayout() {
return _super !== null && _super.apply(this, arguments) || this;
}
AbsoluteLayout.prototype.createNativeView = function() {
return new org.nativescript.widgets.AbsoluteLayout(this._context);
};
return AbsoluteLayout;
}(absolute_layout_common_1.AbsoluteLayoutBase);
exports.AbsoluteLayout = AbsoluteLayout;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var layout_base_1 = __webpack_require__(110);
__export(__webpack_require__(110));
layout_base_1.View.prototype.effectiveLeft = 0;
layout_base_1.View.prototype.effectiveTop = 0;
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
var AbsoluteLayoutBase = function(_super) {
__extends(AbsoluteLayoutBase, _super);
function AbsoluteLayoutBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
AbsoluteLayoutBase.getLeft = function(element) {
return validateArgs(element).left;
};
AbsoluteLayoutBase.setLeft = function(element, value) {
validateArgs(element).left = value;
};
AbsoluteLayoutBase.getTop = function(element) {
return validateArgs(element).top;
};
AbsoluteLayoutBase.setTop = function(element, value) {
validateArgs(element).top = value;
};
AbsoluteLayoutBase.prototype.onLeftChanged = function(view, oldValue, newValue) {};
AbsoluteLayoutBase.prototype.onTopChanged = function(view, oldValue, newValue) {};
return AbsoluteLayoutBase;
}(layout_base_1.LayoutBase);
exports.AbsoluteLayoutBase = AbsoluteLayoutBase;
exports.leftProperty = new layout_base_1.Property({
name: "left",
defaultValue: layout_base_1.zeroLength,
valueChanged: function(target, oldValue, newValue) {
target.effectiveLeft = layout_base_1.Length.toDevicePixels(newValue, 0);
var layout = target.parent;
if (layout instanceof AbsoluteLayoutBase) {
layout.onLeftChanged(target, oldValue, newValue);
}
},
valueConverter: function(v) {
return layout_base_1.Length.parse(v);
}
});
exports.leftProperty.register(layout_base_1.View);
exports.topProperty = new layout_base_1.Property({
name: "top",
defaultValue: layout_base_1.zeroLength,
valueChanged: function(target, oldValue, newValue) {
target.effectiveTop = layout_base_1.Length.toDevicePixels(newValue, 0);
var layout = target.parent;
if (layout instanceof AbsoluteLayoutBase) {
layout.onTopChanged(target, oldValue, newValue);
}
},
valueConverter: function(v) {
return layout_base_1.Length.parse(v);
}
});
exports.topProperty.register(layout_base_1.View);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var dock_layout_common_1 = __webpack_require__(116);
__export(__webpack_require__(116));
dock_layout_common_1.View.prototype[dock_layout_common_1.dockProperty.setNative] = function(value) {
var nativeView = this.nativeView;
var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();
if (lp instanceof org.nativescript.widgets.CommonLayoutParams) {
switch (value) {
case "left":
lp.dock = org.nativescript.widgets.Dock.left;
break;

case "top":
lp.dock = org.nativescript.widgets.Dock.top;
break;

case "right":
lp.dock = org.nativescript.widgets.Dock.right;
break;

case "bottom":
lp.dock = org.nativescript.widgets.Dock.bottom;
break;

default:
throw new Error("Invalid value for dock property: " + value);
}
nativeView.setLayoutParams(lp);
}
};
var DockLayout = function(_super) {
__extends(DockLayout, _super);
function DockLayout() {
return _super !== null && _super.apply(this, arguments) || this;
}
DockLayout.prototype.createNativeView = function() {
return new org.nativescript.widgets.DockLayout(this._context);
};
DockLayout.prototype[dock_layout_common_1.stretchLastChildProperty.getDefault] = function() {
return true;
};
DockLayout.prototype[dock_layout_common_1.stretchLastChildProperty.setNative] = function(value) {
this.nativeView.setStretchLastChild(value);
};
return DockLayout;
}(dock_layout_common_1.DockLayoutBase);
exports.DockLayout = DockLayout;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var layout_base_1 = __webpack_require__(110);
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
__export(__webpack_require__(110));
var DockLayoutBase = function(_super) {
__extends(DockLayoutBase, _super);
function DockLayoutBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
DockLayoutBase.getDock = function(element) {
return validateArgs(element).dock;
};
DockLayoutBase.setDock = function(element, value) {
validateArgs(element).dock = value;
};
DockLayoutBase.prototype.onDockChanged = function(view, oldValue, newValue) {};
return DockLayoutBase;
}(layout_base_1.LayoutBase);
exports.DockLayoutBase = DockLayoutBase;
var dockConverter = layout_base_1.makeParser(layout_base_1.makeValidator("left", "top", "right", "bottom"));
exports.dockProperty = new layout_base_1.Property({
name: "dock",
defaultValue: "left",
valueChanged: function(target, oldValue, newValue) {
if (target instanceof layout_base_1.View) {
var layout = target.parent;
if (layout instanceof DockLayoutBase) {
layout.onDockChanged(target, oldValue, newValue);
}
}
},
valueConverter: dockConverter
});
exports.dockProperty.register(layout_base_1.View);
exports.stretchLastChildProperty = new layout_base_1.Property({
name: "stretchLastChild",
defaultValue: true,
affectsLayout: layout_base_1.isIOS,
valueConverter: layout_base_1.booleanConverter
});
exports.stretchLastChildProperty.register(DockLayoutBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var flexbox_layout_common_1 = __webpack_require__(118);
__export(__webpack_require__(118));
var widgetFlexboxLayout;
var widgetLayoutParams;
function makeNativeSetter(setter) {
return function(value) {
var nativeView = this.nativeView;
var lp = nativeView.getLayoutParams() || new widgetLayoutParams();
if (lp instanceof widgetLayoutParams) {
setter(lp, value);
nativeView.setLayoutParams(lp);
}
};
}
flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.orderProperty.setNative] = makeNativeSetter(function(lp, value) {
return lp.order = value;
});
flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.flexGrowProperty.setNative] = makeNativeSetter(function(lp, value) {
return lp.flexGrow = value;
});
flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.flexShrinkProperty.setNative] = makeNativeSetter(function(lp, value) {
return lp.flexShrink = value;
});
flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.flexWrapBeforeProperty.setNative] = makeNativeSetter(function(lp, value) {
return lp.wrapBefore = value;
});
flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.alignSelfProperty.setNative] = makeNativeSetter(function(lp, value) {
return lp.alignSelf = alignSelfMap[value];
});
var flexDirectionMap = (_a = {}, _a[flexbox_layout_common_1.FlexDirection.ROW] = 0, 
_a[flexbox_layout_common_1.FlexDirection.ROW_REVERSE] = 1, _a[flexbox_layout_common_1.FlexDirection.COLUMN] = 2, 
_a[flexbox_layout_common_1.FlexDirection.COLUMN_REVERSE] = 3, _a);
var flexWrapMap = (_b = {}, _b[flexbox_layout_common_1.FlexWrap.NOWRAP] = 0, _b[flexbox_layout_common_1.FlexWrap.WRAP] = 1, 
_b[flexbox_layout_common_1.FlexWrap.WRAP_REVERSE] = 2, _b);
var justifyContentMap = (_c = {}, _c[flexbox_layout_common_1.JustifyContent.FLEX_START] = 0, 
_c[flexbox_layout_common_1.JustifyContent.FLEX_END] = 1, _c[flexbox_layout_common_1.JustifyContent.CENTER] = 2, 
_c[flexbox_layout_common_1.JustifyContent.SPACE_BETWEEN] = 3, _c[flexbox_layout_common_1.JustifyContent.SPACE_AROUND] = 4, 
_c);
var alignItemsMap = (_d = {}, _d[flexbox_layout_common_1.AlignItems.FLEX_START] = 0, 
_d[flexbox_layout_common_1.AlignItems.FLEX_END] = 1, _d[flexbox_layout_common_1.AlignItems.CENTER] = 2, 
_d[flexbox_layout_common_1.AlignItems.BASELINE] = 3, _d[flexbox_layout_common_1.AlignItems.STRETCH] = 4, 
_d);
var alignContentMap = (_e = {}, _e[flexbox_layout_common_1.AlignContent.FLEX_START] = 0, 
_e[flexbox_layout_common_1.AlignContent.FLEX_END] = 1, _e[flexbox_layout_common_1.AlignContent.CENTER] = 2, 
_e[flexbox_layout_common_1.AlignContent.SPACE_BETWEEN] = 3, _e[flexbox_layout_common_1.AlignContent.SPACE_AROUND] = 4, 
_e[flexbox_layout_common_1.AlignContent.STRETCH] = 5, _e);
var alignSelfMap = (_f = {}, _f[flexbox_layout_common_1.AlignSelf.AUTO] = -1, _f[flexbox_layout_common_1.AlignSelf.FLEX_START] = 0, 
_f[flexbox_layout_common_1.AlignSelf.FLEX_END] = 1, _f[flexbox_layout_common_1.AlignSelf.CENTER] = 2, 
_f[flexbox_layout_common_1.AlignSelf.BASELINE] = 3, _f[flexbox_layout_common_1.AlignSelf.STRETCH] = 4, 
_f);
var FlexboxLayout = function(_super) {
__extends(FlexboxLayout, _super);
function FlexboxLayout() {
return _super !== null && _super.apply(this, arguments) || this;
}
FlexboxLayout.prototype.createNativeView = function() {
if (!widgetFlexboxLayout) {
widgetFlexboxLayout = org.nativescript.widgets.FlexboxLayout;
widgetLayoutParams = widgetFlexboxLayout.LayoutParams;
}
return new widgetFlexboxLayout(this._context);
};
FlexboxLayout.prototype.disposeNativeView = function() {
this.nativeView.invalidateOrdersCache();
_super.prototype.disposeNativeView.call(this);
};
FlexboxLayout.prototype[flexbox_layout_common_1.flexDirectionProperty.getDefault] = function() {
return flexbox_layout_common_1.flexDirectionProperty.defaultValue;
};
FlexboxLayout.prototype[flexbox_layout_common_1.flexDirectionProperty.setNative] = function(flexDirection) {
this.nativeView.setFlexDirection(flexDirectionMap[flexDirection]);
};
FlexboxLayout.prototype[flexbox_layout_common_1.flexWrapProperty.getDefault] = function() {
return flexbox_layout_common_1.flexWrapProperty.defaultValue;
};
FlexboxLayout.prototype[flexbox_layout_common_1.flexWrapProperty.setNative] = function(flexWrap) {
this.nativeView.setFlexWrap(flexWrapMap[flexWrap]);
};
FlexboxLayout.prototype[flexbox_layout_common_1.justifyContentProperty.getDefault] = function() {
return flexbox_layout_common_1.justifyContentProperty.defaultValue;
};
FlexboxLayout.prototype[flexbox_layout_common_1.justifyContentProperty.setNative] = function(justifyContent) {
this.nativeView.setJustifyContent(justifyContentMap[justifyContent]);
};
FlexboxLayout.prototype[flexbox_layout_common_1.alignItemsProperty.getDefault] = function() {
return flexbox_layout_common_1.alignItemsProperty.defaultValue;
};
FlexboxLayout.prototype[flexbox_layout_common_1.alignItemsProperty.setNative] = function(alignItems) {
this.nativeView.setAlignItems(alignItemsMap[alignItems]);
};
FlexboxLayout.prototype[flexbox_layout_common_1.alignContentProperty.getDefault] = function() {
return flexbox_layout_common_1.alignContentProperty.defaultValue;
};
FlexboxLayout.prototype[flexbox_layout_common_1.alignContentProperty.setNative] = function(alignContent) {
this.nativeView.setAlignContent(alignContentMap[alignContent]);
};
FlexboxLayout.prototype._updateNativeLayoutParams = function(child) {
_super.prototype._updateNativeLayoutParams.call(this, child);
var lp = child.nativeView.getLayoutParams();
var style = child.style;
lp.order = style.order;
lp.flexGrow = style.flexGrow;
lp.flexShrink = style.flexShrink;
lp.wrapBefore = style.flexWrapBefore;
lp.alignSelf = alignSelfMap[style.alignSelf];
child.nativeView.setLayoutParams(lp);
};
FlexboxLayout.prototype._setChildMinWidthNative = function(child) {
child._setMinWidthNative(0);
var nativeView = child.nativeView;
var lp = nativeView.getLayoutParams();
if (lp instanceof widgetLayoutParams) {
lp.minWidth = flexbox_layout_common_1.Length.toDevicePixels(child.style.minWidth, 0);
nativeView.setLayoutParams(lp);
}
};
FlexboxLayout.prototype._setChildMinHeightNative = function(child) {
child._setMinHeightNative(0);
var nativeView = child.nativeView;
var lp = nativeView.getLayoutParams();
if (lp instanceof widgetLayoutParams) {
lp.minHeight = flexbox_layout_common_1.Length.toDevicePixels(child.style.minHeight, 0);
nativeView.setLayoutParams(lp);
}
};
return FlexboxLayout;
}(flexbox_layout_common_1.FlexboxLayoutBase);
exports.FlexboxLayout = FlexboxLayout;
var _a, _b, _c, _d, _e, _f;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var layout_base_1 = __webpack_require__(110);
__export(__webpack_require__(110));
exports.ORDER_DEFAULT = 1;
exports.FLEX_GROW_DEFAULT = 0;
exports.FLEX_SHRINK_DEFAULT = 1;
var FlexDirection;
(function(FlexDirection) {
FlexDirection.ROW = "row";
FlexDirection.ROW_REVERSE = "row-reverse";
FlexDirection.COLUMN = "column";
FlexDirection.COLUMN_REVERSE = "column-reverse";
FlexDirection.isValid = layout_base_1.makeValidator(FlexDirection.ROW, FlexDirection.ROW_REVERSE, FlexDirection.COLUMN, FlexDirection.COLUMN_REVERSE);
FlexDirection.parse = layout_base_1.makeParser(FlexDirection.isValid);
})(FlexDirection = exports.FlexDirection || (exports.FlexDirection = {}));
var FlexWrap;
(function(FlexWrap) {
FlexWrap.NOWRAP = "nowrap";
FlexWrap.WRAP = "wrap";
FlexWrap.WRAP_REVERSE = "wrap-reverse";
FlexWrap.isValid = layout_base_1.makeValidator(FlexWrap.NOWRAP, FlexWrap.WRAP, FlexWrap.WRAP_REVERSE);
FlexWrap.parse = layout_base_1.makeParser(FlexWrap.isValid);
})(FlexWrap = exports.FlexWrap || (exports.FlexWrap = {}));
var JustifyContent;
(function(JustifyContent) {
JustifyContent.FLEX_START = "flex-start";
JustifyContent.FLEX_END = "flex-end";
JustifyContent.CENTER = "center";
JustifyContent.SPACE_BETWEEN = "space-between";
JustifyContent.SPACE_AROUND = "space-around";
JustifyContent.isValid = layout_base_1.makeValidator(JustifyContent.FLEX_START, JustifyContent.FLEX_END, JustifyContent.CENTER, JustifyContent.SPACE_BETWEEN, JustifyContent.SPACE_AROUND);
JustifyContent.parse = layout_base_1.makeParser(JustifyContent.isValid);
})(JustifyContent = exports.JustifyContent || (exports.JustifyContent = {}));
var FlexBasisPercent;
(function(FlexBasisPercent) {
FlexBasisPercent.DEFAULT = -1;
})(FlexBasisPercent = exports.FlexBasisPercent || (exports.FlexBasisPercent = {}));
var AlignItems;
(function(AlignItems) {
AlignItems.FLEX_START = "flex-start";
AlignItems.FLEX_END = "flex-end";
AlignItems.CENTER = "center";
AlignItems.BASELINE = "baseline";
AlignItems.STRETCH = "stretch";
AlignItems.isValid = layout_base_1.makeValidator(AlignItems.FLEX_START, AlignItems.FLEX_END, AlignItems.CENTER, AlignItems.BASELINE, AlignItems.STRETCH);
AlignItems.parse = layout_base_1.makeParser(AlignItems.isValid);
})(AlignItems = exports.AlignItems || (exports.AlignItems = {}));
var AlignContent;
(function(AlignContent) {
AlignContent.FLEX_START = "flex-start";
AlignContent.FLEX_END = "flex-end";
AlignContent.CENTER = "center";
AlignContent.SPACE_BETWEEN = "space-between";
AlignContent.SPACE_AROUND = "space-around";
AlignContent.STRETCH = "stretch";
AlignContent.isValid = layout_base_1.makeValidator(AlignContent.FLEX_START, AlignContent.FLEX_END, AlignContent.CENTER, AlignContent.SPACE_BETWEEN, AlignContent.SPACE_AROUND, AlignContent.STRETCH);
AlignContent.parse = layout_base_1.makeParser(AlignContent.isValid);
})(AlignContent = exports.AlignContent || (exports.AlignContent = {}));
var Order;
(function(Order) {
function isValid(value) {
return isFinite(parseInt(value));
}
Order.isValid = isValid;
Order.parse = parseInt;
})(Order = exports.Order || (exports.Order = {}));
var FlexGrow;
(function(FlexGrow) {
function isValid(value) {
var parsed = parseInt(value);
return isFinite(parsed) && value >= 0;
}
FlexGrow.isValid = isValid;
FlexGrow.parse = parseFloat;
})(FlexGrow = exports.FlexGrow || (exports.FlexGrow = {}));
var FlexShrink;
(function(FlexShrink) {
function isValid(value) {
var parsed = parseInt(value);
return isFinite(parsed) && value >= 0;
}
FlexShrink.isValid = isValid;
FlexShrink.parse = parseFloat;
})(FlexShrink = exports.FlexShrink || (exports.FlexShrink = {}));
var FlexWrapBefore;
(function(FlexWrapBefore) {
function isValid(value) {
if (typeof value === "boolean") {
return true;
}
if (typeof value === "string") {
var str = value.trim().toLowerCase();
return str === "true" || str === "false";
}
return false;
}
FlexWrapBefore.isValid = isValid;
function parse(value) {
return value && value.toString().trim().toLowerCase() === "true";
}
FlexWrapBefore.parse = parse;
})(FlexWrapBefore = exports.FlexWrapBefore || (exports.FlexWrapBefore = {}));
var AlignSelf;
(function(AlignSelf) {
AlignSelf.AUTO = "auto";
AlignSelf.FLEX_START = "flex-start";
AlignSelf.FLEX_END = "flex-end";
AlignSelf.CENTER = "center";
AlignSelf.BASELINE = "baseline";
AlignSelf.STRETCH = "stretch";
AlignSelf.isValid = layout_base_1.makeValidator(AlignSelf.AUTO, AlignSelf.FLEX_START, AlignSelf.FLEX_END, AlignSelf.CENTER, AlignSelf.BASELINE, AlignSelf.STRETCH);
AlignSelf.parse = layout_base_1.makeParser(AlignSelf.isValid);
})(AlignSelf = exports.AlignSelf || (exports.AlignSelf = {}));
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
var FlexboxLayoutBase = function(_super) {
__extends(FlexboxLayoutBase, _super);
function FlexboxLayoutBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(FlexboxLayoutBase.prototype, "flexDirection", {
get: function() {
return this.style.flexDirection;
},
set: function(value) {
this.style.flexDirection = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FlexboxLayoutBase.prototype, "flexWrap", {
get: function() {
return this.style.flexWrap;
},
set: function(value) {
this.style.flexWrap = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FlexboxLayoutBase.prototype, "justifyContent", {
get: function() {
return this.style.justifyContent;
},
set: function(value) {
this.style.justifyContent = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FlexboxLayoutBase.prototype, "alignItems", {
get: function() {
return this.style.alignItems;
},
set: function(value) {
this.style.alignItems = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FlexboxLayoutBase.prototype, "alignContent", {
get: function() {
return this.style.alignContent;
},
set: function(value) {
this.style.alignContent = value;
},
enumerable: true,
configurable: true
});
FlexboxLayoutBase.setOrder = function(view, order) {
validateArgs(view).style.order = order;
};
FlexboxLayoutBase.getOrder = function(view) {
return validateArgs(view).style.order;
};
FlexboxLayoutBase.setFlexGrow = function(view, grow) {
validateArgs(view).style.flexGrow = grow;
};
FlexboxLayoutBase.getFlexGrow = function(view) {
return validateArgs(view).style.flexGrow;
};
FlexboxLayoutBase.setFlexShrink = function(view, shrink) {
validateArgs(view).style.flexShrink = shrink;
};
FlexboxLayoutBase.getFlexShrink = function(view) {
return validateArgs(view).style.flexShrink;
};
FlexboxLayoutBase.setAlignSelf = function(view, align) {
validateArgs(view).style.alignSelf = align;
};
FlexboxLayoutBase.getAlignSelf = function(view) {
return validateArgs(view).style.alignSelf;
};
FlexboxLayoutBase.setFlexWrapBefore = function(view, wrap) {
validateArgs(view).style.flexWrapBefore = wrap;
};
FlexboxLayoutBase.getFlexWrapBefore = function(view) {
return validateArgs(view).style.flexWrapBefore;
};
return FlexboxLayoutBase;
}(layout_base_1.LayoutBase);
exports.FlexboxLayoutBase = FlexboxLayoutBase;
exports.flexDirectionProperty = new layout_base_1.CssProperty({
name: "flexDirection",
cssName: "flex-direction",
defaultValue: FlexDirection.ROW,
affectsLayout: layout_base_1.isIOS,
valueConverter: FlexDirection.parse
});
exports.flexDirectionProperty.register(layout_base_1.Style);
exports.flexWrapProperty = new layout_base_1.CssProperty({
name: "flexWrap",
cssName: "flex-wrap",
defaultValue: "nowrap",
affectsLayout: layout_base_1.isIOS,
valueConverter: FlexWrap.parse
});
exports.flexWrapProperty.register(layout_base_1.Style);
exports.justifyContentProperty = new layout_base_1.CssProperty({
name: "justifyContent",
cssName: "justify-content",
defaultValue: JustifyContent.FLEX_START,
affectsLayout: layout_base_1.isIOS,
valueConverter: JustifyContent.parse
});
exports.justifyContentProperty.register(layout_base_1.Style);
exports.alignItemsProperty = new layout_base_1.CssProperty({
name: "alignItems",
cssName: "align-items",
defaultValue: AlignItems.STRETCH,
affectsLayout: layout_base_1.isIOS,
valueConverter: AlignItems.parse
});
exports.alignItemsProperty.register(layout_base_1.Style);
exports.alignContentProperty = new layout_base_1.CssProperty({
name: "alignContent",
cssName: "align-content",
defaultValue: AlignContent.STRETCH,
affectsLayout: layout_base_1.isIOS,
valueConverter: AlignContent.parse
});
exports.alignContentProperty.register(layout_base_1.Style);
exports.orderProperty = new layout_base_1.CssProperty({
name: "order",
cssName: "order",
defaultValue: exports.ORDER_DEFAULT,
valueConverter: Order.parse
});
exports.orderProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "order", {
get: function() {
return this.style.order;
},
set: function(value) {
this.style.order = value;
},
enumerable: true,
configurable: true
});
exports.flexGrowProperty = new layout_base_1.CssProperty({
name: "flexGrow",
cssName: "flex-grow",
defaultValue: exports.FLEX_GROW_DEFAULT,
valueConverter: FlexGrow.parse
});
exports.flexGrowProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "flexGrow", {
get: function() {
return this.style.flexGrow;
},
set: function(value) {
this.style.flexGrow = value;
},
enumerable: true,
configurable: true
});
exports.flexShrinkProperty = new layout_base_1.CssProperty({
name: "flexShrink",
cssName: "flex-shrink",
defaultValue: exports.FLEX_SHRINK_DEFAULT,
valueConverter: FlexShrink.parse
});
exports.flexShrinkProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "flexShrink", {
get: function() {
return this.style.flexShrink;
},
set: function(value) {
this.style.flexShrink = value;
},
enumerable: true,
configurable: true
});
exports.flexWrapBeforeProperty = new layout_base_1.CssProperty({
name: "flexWrapBefore",
cssName: "flex-wrap-before",
defaultValue: false,
valueConverter: FlexWrapBefore.parse
});
exports.flexWrapBeforeProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "flexWrapBefore", {
get: function() {
return this.style.flexWrapBefore;
},
set: function(value) {
this.style.flexWrapBefore = value;
},
enumerable: true,
configurable: true
});
exports.alignSelfProperty = new layout_base_1.CssProperty({
name: "alignSelf",
cssName: "align-self",
defaultValue: AlignSelf.AUTO,
valueConverter: AlignSelf.parse
});
exports.alignSelfProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "alignSelf", {
get: function() {
return this.style.alignSelf;
},
set: function(value) {
this.style.alignSelf = value;
},
enumerable: true,
configurable: true
});
var flexFlowProperty = new layout_base_1.ShorthandProperty({
name: "flex-flow",
cssName: "flex-flow",
getter: function() {
return this.flexDirection + " " + this.flexWrap;
},
converter: function(value) {
var properties = [];
if (value === layout_base_1.unsetValue) {
properties.push([ exports.flexDirectionProperty, value ]);
properties.push([ exports.flexWrapProperty, value ]);
} else {
var trimmed = value && value.trim();
if (trimmed) {
var values = trimmed.split(/\s+/);
if (values.length >= 1 && FlexDirection.isValid(values[0])) {
properties.push([ exports.flexDirectionProperty, FlexDirection.parse(values[0]) ]);
}
if (value.length >= 2 && FlexWrap.isValid(values[1])) {
properties.push([ exports.flexWrapProperty, FlexWrap.parse(values[1]) ]);
}
}
}
return properties;
}
});
flexFlowProperty.register(layout_base_1.Style);
var flexProperty = new layout_base_1.ShorthandProperty({
name: "flex",
cssName: "flex",
getter: function() {
return this.flexGrow + " " + this.flexShrink;
},
converter: function(value) {
var properties = [];
if (value === layout_base_1.unsetValue) {
properties.push([ exports.flexGrowProperty, value ]);
properties.push([ exports.flexShrinkProperty, value ]);
} else {
var trimmed = value && value.trim();
if (trimmed) {
var values = trimmed.split(/\s+/);
if (values.length === 1) {
switch (values[0]) {
case "inital":
properties.push([ exports.flexGrowProperty, 0 ]);
properties.push([ exports.flexShrinkProperty, 1 ]);
break;

case "auto":
properties.push([ exports.flexGrowProperty, 1 ]);
properties.push([ exports.flexShrinkProperty, 1 ]);
break;

case "none":
properties.push([ exports.flexGrowProperty, 0 ]);
properties.push([ exports.flexShrinkProperty, 0 ]);
break;

default:
if (FlexGrow.isValid(values[0])) {
properties.push([ exports.flexGrowProperty, FlexGrow.parse(values[0]) ]);
properties.push([ exports.flexShrinkProperty, 1 ]);
}
}
}
if (values.length >= 2) {
if (FlexGrow.isValid(values[0]) && FlexShrink.isValid(values[1])) {
properties.push([ exports.flexGrowProperty, FlexGrow.parse(values[0]) ]);
properties.push([ exports.flexShrinkProperty, FlexShrink.parse(values[1]) ]);
}
}
}
}
return properties;
}
});
flexProperty.register(layout_base_1.Style);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var grid_layout_common_1 = __webpack_require__(120);
__export(__webpack_require__(120));
function makeNativeSetter(setter) {
return function(value) {
var nativeView = this.nativeView;
var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();
if (lp instanceof org.nativescript.widgets.CommonLayoutParams) {
setter(lp, value);
nativeView.setLayoutParams(lp);
}
};
}
grid_layout_common_1.View.prototype[grid_layout_common_1.rowProperty.setNative] = makeNativeSetter(function(lp, value) {
return lp.row = value;
});
grid_layout_common_1.View.prototype[grid_layout_common_1.columnProperty.setNative] = makeNativeSetter(function(lp, value) {
return lp.column = value;
});
grid_layout_common_1.View.prototype[grid_layout_common_1.rowSpanProperty.setNative] = makeNativeSetter(function(lp, value) {
return lp.rowSpan = value;
});
grid_layout_common_1.View.prototype[grid_layout_common_1.columnSpanProperty.setNative] = makeNativeSetter(function(lp, value) {
return lp.columnSpan = value;
});
function createNativeSpec(itemSpec) {
switch (itemSpec.gridUnitType) {
case grid_layout_common_1.GridUnitType.AUTO:
return new org.nativescript.widgets.ItemSpec(itemSpec.value, org.nativescript.widgets.GridUnitType.auto);

case grid_layout_common_1.GridUnitType.STAR:
return new org.nativescript.widgets.ItemSpec(itemSpec.value, org.nativescript.widgets.GridUnitType.star);

case grid_layout_common_1.GridUnitType.PIXEL:
return new org.nativescript.widgets.ItemSpec(itemSpec.value * grid_layout_common_1.layout.getDisplayDensity(), org.nativescript.widgets.GridUnitType.pixel);

default:
throw new Error("Invalid gridUnitType: " + itemSpec.gridUnitType);
}
}
var ItemSpec = function(_super) {
__extends(ItemSpec, _super);
function ItemSpec() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(ItemSpec.prototype, "actualLength", {
get: function() {
if (this.nativeSpec) {
return Math.round(this.nativeSpec.getActualLength() / grid_layout_common_1.layout.getDisplayDensity());
}
return 0;
},
enumerable: true,
configurable: true
});
return ItemSpec;
}(grid_layout_common_1.ItemSpec);
exports.ItemSpec = ItemSpec;
var GridLayout = function(_super) {
__extends(GridLayout, _super);
function GridLayout() {
return _super !== null && _super.apply(this, arguments) || this;
}
GridLayout.prototype.createNativeView = function() {
return new org.nativescript.widgets.GridLayout(this._context);
};
GridLayout.prototype.initNativeView = function() {
var _this = this;
_super.prototype.initNativeView.call(this);
this.rowsInternal.forEach(function(itemSpec, index, rows) {
_this._onRowAdded(itemSpec);
}, this);
this.columnsInternal.forEach(function(itemSpec, index, rows) {
_this._onColumnAdded(itemSpec);
}, this);
};
GridLayout.prototype.disposeNativeView = function() {
for (var i = this.rowsInternal.length; i--; i >= 0) {
var itemSpec = this.rowsInternal[i];
this._onRowRemoved(itemSpec, i);
}
for (var i = this.columnsInternal.length; i--; i >= 0) {
var itemSpec = this.columnsInternal[i];
this._onColumnRemoved(itemSpec, i);
}
_super.prototype.disposeNativeView.call(this);
};
GridLayout.prototype._onRowAdded = function(itemSpec) {
if (this.nativeView) {
var nativeSpec = createNativeSpec(itemSpec);
itemSpec.nativeSpec = nativeSpec;
this.nativeView.addRow(nativeSpec);
}
};
GridLayout.prototype._onColumnAdded = function(itemSpec) {
if (this.nativeView) {
var nativeSpec = createNativeSpec(itemSpec);
itemSpec.nativeSpec = nativeSpec;
this.nativeView.addColumn(nativeSpec);
}
};
GridLayout.prototype._onRowRemoved = function(itemSpec, index) {
itemSpec.nativeSpec = null;
if (this.nativeView) {
this.nativeView.removeRowAt(index);
}
};
GridLayout.prototype._onColumnRemoved = function(itemSpec, index) {
itemSpec.nativeSpec = null;
if (this.nativeView) {
this.nativeView.removeColumnAt(index);
}
};
GridLayout.prototype.invalidate = function() {};
return GridLayout;
}(grid_layout_common_1.GridLayoutBase);
exports.GridLayout = GridLayout;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var layout_base_1 = __webpack_require__(110);
__export(__webpack_require__(110));
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
layout_base_1.View.prototype.row = 0;
layout_base_1.View.prototype.col = 0;
layout_base_1.View.prototype.rowSpan = 1;
layout_base_1.View.prototype.colSpan = 1;
function validateItemSpec(itemSpec) {
if (!itemSpec) {
throw new Error("Value cannot be undefined.");
}
if (itemSpec.owner) {
throw new Error("itemSpec is already added to GridLayout.");
}
}
function convertGridLength(value) {
if (value === GridUnitType.AUTO) {
return ItemSpec.create(1, GridUnitType.AUTO);
} else if (value.indexOf("*") !== -1) {
var starCount = parseInt(value.replace("*", "") || "1");
return ItemSpec.create(starCount, GridUnitType.STAR);
} else if (!isNaN(parseInt(value))) {
return ItemSpec.create(parseInt(value), GridUnitType.PIXEL);
} else {
throw new Error("Cannot parse item spec from string: " + value);
}
}
function parseAndAddItemSpecs(value, func) {
var arr = value.split(/[\s,]+/);
for (var i = 0, length_1 = arr.length; i < length_1; i++) {
var str = arr[i].trim();
if (str.length > 0) {
func(convertGridLength(arr[i].trim()));
}
}
}
var ItemSpec = function(_super) {
__extends(ItemSpec, _super);
function ItemSpec() {
var _this = _super.call(this) || this;
_this._actualLength = 0;
if (arguments.length === 0) {
_this._value = 1;
_this._unitType = GridUnitType.STAR;
} else if (arguments.length === 2) {
var value = arguments[0];
var type = arguments[1];
if (typeof value === "number" && typeof type === "string") {
if (value < 0 || isNaN(value) || !isFinite(value)) {
throw new Error("Value should not be negative, NaN or Infinity: " + value);
}
_this._value = value;
_this._unitType = GridUnitType.parse(type);
} else {
throw new Error("First argument should be number, second argument should be string.");
}
} else {
throw new Error("ItemSpec expects 0 or 2 arguments");
}
_this.index = -1;
return _this;
}
ItemSpec.create = function(value, type) {
var spec = new ItemSpec();
spec._value = value;
spec._unitType = type;
return spec;
};
Object.defineProperty(ItemSpec.prototype, "actualLength", {
get: function() {
return this._actualLength;
},
enumerable: true,
configurable: true
});
ItemSpec.equals = function(value1, value2) {
return value1.gridUnitType === value2.gridUnitType && value1.value === value2.value && value1.owner === value2.owner && value1.index === value2.index;
};
Object.defineProperty(ItemSpec.prototype, "gridUnitType", {
get: function() {
return this._unitType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "isAbsolute", {
get: function() {
return this._unitType === GridUnitType.PIXEL;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "isAuto", {
get: function() {
return this._unitType === GridUnitType.AUTO;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "isStar", {
get: function() {
return this._unitType === GridUnitType.STAR;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "value", {
get: function() {
return this._value;
},
enumerable: true,
configurable: true
});
return ItemSpec;
}(layout_base_1.Observable);
exports.ItemSpec = ItemSpec;
var GridLayoutBase = function(_super) {
__extends(GridLayoutBase, _super);
function GridLayoutBase() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._rows = new Array();
_this._cols = new Array();
return _this;
}
GridLayoutBase.getColumn = function(element) {
return validateArgs(element).col;
};
GridLayoutBase.setColumn = function(element, value) {
validateArgs(element).col = value;
};
GridLayoutBase.getColumnSpan = function(element) {
return validateArgs(element).colSpan;
};
GridLayoutBase.setColumnSpan = function(element, value) {
validateArgs(element).colSpan = value;
};
GridLayoutBase.getRow = function(element) {
return validateArgs(element).row;
};
GridLayoutBase.setRow = function(element, value) {
validateArgs(element).row = value;
};
GridLayoutBase.getRowSpan = function(element) {
return validateArgs(element).rowSpan;
};
GridLayoutBase.setRowSpan = function(element, value) {
validateArgs(element).rowSpan = value;
};
GridLayoutBase.prototype.addRow = function(itemSpec) {
validateItemSpec(itemSpec);
itemSpec.owner = this;
this._rows.push(itemSpec);
this._onRowAdded(itemSpec);
this.invalidate();
};
GridLayoutBase.prototype.addColumn = function(itemSpec) {
validateItemSpec(itemSpec);
itemSpec.owner = this;
this._cols.push(itemSpec);
this._onColumnAdded(itemSpec);
this.invalidate();
};
GridLayoutBase.prototype.removeRow = function(itemSpec) {
if (!itemSpec) {
throw new Error("Value is null.");
}
var index = this._rows.indexOf(itemSpec);
if (itemSpec.owner !== this || index < 0) {
throw new Error("Row is not child of this GridLayout");
}
itemSpec.index = -1;
this._rows.splice(index, 1);
this._onRowRemoved(itemSpec, index);
this.invalidate();
};
GridLayoutBase.prototype.removeColumn = function(itemSpec) {
if (!itemSpec) {
throw new Error("Value is null.");
}
var index = this._cols.indexOf(itemSpec);
if (itemSpec.owner !== this || index < 0) {
throw new Error("Column is not child of this GridLayout");
}
itemSpec.index = -1;
this._cols.splice(index, 1);
this._onColumnRemoved(itemSpec, index);
this.invalidate();
};
GridLayoutBase.prototype.removeColumns = function() {
for (var i = this._cols.length - 1; i >= 0; i--) {
var colSpec = this._cols[i];
this._onColumnRemoved(colSpec, i);
colSpec.index = -1;
}
this._cols.length = 0;
this.invalidate();
};
GridLayoutBase.prototype.removeRows = function() {
for (var i = this._rows.length - 1; i >= 0; i--) {
var rowSpec = this._rows[i];
this._onRowRemoved(rowSpec, i);
rowSpec.index = -1;
}
this._rows.length = 0;
this.invalidate();
};
GridLayoutBase.prototype.onRowChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayoutBase.prototype.onRowSpanChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayoutBase.prototype.onColumnChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayoutBase.prototype.onColumnSpanChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayoutBase.prototype._onRowAdded = function(itemSpec) {};
GridLayoutBase.prototype._onColumnAdded = function(itemSpec) {};
GridLayoutBase.prototype._onRowRemoved = function(itemSpec, index) {};
GridLayoutBase.prototype._onColumnRemoved = function(itemSpec, index) {};
GridLayoutBase.prototype.getColumns = function() {
return this._cols.slice();
};
GridLayoutBase.prototype.getRows = function() {
return this._rows.slice();
};
Object.defineProperty(GridLayoutBase.prototype, "columnsInternal", {
get: function() {
return this._cols;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GridLayoutBase.prototype, "rowsInternal", {
get: function() {
return this._rows;
},
enumerable: true,
configurable: true
});
GridLayoutBase.prototype.invalidate = function() {
this.requestLayout();
};
GridLayoutBase.prototype._applyXmlAttribute = function(attributeName, attributeValue) {
if (attributeName === "columns") {
this._setColumns(attributeValue);
return true;
} else if (attributeName === "rows") {
this._setRows(attributeValue);
return true;
}
return _super.prototype._applyXmlAttribute.call(this, attributeName, attributeValue);
};
GridLayoutBase.prototype._setColumns = function(value) {
var _this = this;
this.removeColumns();
parseAndAddItemSpecs(value, function(spec) {
return _this.addColumn(spec);
});
};
GridLayoutBase.prototype._setRows = function(value) {
var _this = this;
this.removeRows();
parseAndAddItemSpecs(value, function(spec) {
return _this.addRow(spec);
});
};
return GridLayoutBase;
}(layout_base_1.LayoutBase);
exports.GridLayoutBase = GridLayoutBase;
exports.columnProperty = new layout_base_1.Property({
name: "col",
defaultValue: 0,
valueChanged: function(target, oldValue, newValue) {
var grid = target.parent;
if (grid instanceof GridLayoutBase) {
grid.onColumnChanged(target, oldValue, newValue);
}
},
valueConverter: function(v) {
return Math.max(0, parseInt(v));
}
});
exports.columnProperty.register(layout_base_1.View);
exports.columnSpanProperty = new layout_base_1.Property({
name: "colSpan",
defaultValue: 1,
valueChanged: function(target, oldValue, newValue) {
var grid = target.parent;
if (grid instanceof GridLayoutBase) {
grid.onColumnSpanChanged(target, oldValue, newValue);
}
},
valueConverter: function(v) {
return Math.max(1, parseInt(v));
}
});
exports.columnSpanProperty.register(layout_base_1.View);
exports.rowProperty = new layout_base_1.Property({
name: "row",
defaultValue: 0,
valueChanged: function(target, oldValue, newValue) {
var grid = target.parent;
if (grid instanceof GridLayoutBase) {
grid.onRowChanged(target, oldValue, newValue);
}
},
valueConverter: function(v) {
return Math.max(0, parseInt(v));
}
});
exports.rowProperty.register(layout_base_1.View);
exports.rowSpanProperty = new layout_base_1.Property({
name: "rowSpan",
defaultValue: 1,
valueChanged: function(target, oldValue, newValue) {
var grid = target.parent;
if (grid instanceof GridLayoutBase) {
grid.onRowSpanChanged(target, oldValue, newValue);
}
},
valueConverter: function(v) {
return Math.max(1, parseInt(v));
}
});
exports.rowSpanProperty.register(layout_base_1.View);
var GridUnitType;
(function(GridUnitType) {
GridUnitType.PIXEL = "pixel";
GridUnitType.STAR = "star";
GridUnitType.AUTO = "auto";
GridUnitType.isValid = layout_base_1.makeValidator(GridUnitType.PIXEL, GridUnitType.STAR, GridUnitType.AUTO);
GridUnitType.parse = layout_base_1.makeParser(GridUnitType.isValid);
})(GridUnitType = exports.GridUnitType || (exports.GridUnitType = {}));
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var stack_layout_common_1 = __webpack_require__(122);
__export(__webpack_require__(122));
var StackLayout = function(_super) {
__extends(StackLayout, _super);
function StackLayout() {
return _super !== null && _super.apply(this, arguments) || this;
}
StackLayout.prototype.createNativeView = function() {
return new org.nativescript.widgets.StackLayout(this._context);
};
StackLayout.prototype[stack_layout_common_1.orientationProperty.setNative] = function(value) {
this.nativeView.setOrientation(value === "vertical" ? org.nativescript.widgets.Orientation.vertical : org.nativescript.widgets.Orientation.horizontal);
};
return StackLayout;
}(stack_layout_common_1.StackLayoutBase);
exports.StackLayout = StackLayout;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var layout_base_1 = __webpack_require__(110);
__export(__webpack_require__(110));
var StackLayoutBase = function(_super) {
__extends(StackLayoutBase, _super);
function StackLayoutBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return StackLayoutBase;
}(layout_base_1.LayoutBase);
exports.StackLayoutBase = StackLayoutBase;
var converter = layout_base_1.makeParser(layout_base_1.makeValidator("horizontal", "vertical"));
exports.orientationProperty = new layout_base_1.Property({
name: "orientation",
defaultValue: "vertical",
affectsLayout: layout_base_1.isIOS,
valueConverter: converter
});
exports.orientationProperty.register(StackLayoutBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var wrap_layout_common_1 = __webpack_require__(124);
__export(__webpack_require__(124));
var WrapLayout = function(_super) {
__extends(WrapLayout, _super);
function WrapLayout() {
return _super !== null && _super.apply(this, arguments) || this;
}
WrapLayout.prototype.createNativeView = function() {
return new org.nativescript.widgets.WrapLayout(this._context);
};
WrapLayout.prototype[wrap_layout_common_1.orientationProperty.setNative] = function(value) {
this.nativeView.setOrientation(value === "vertical" ? org.nativescript.widgets.Orientation.vertical : org.nativescript.widgets.Orientation.horizontal);
};
WrapLayout.prototype[wrap_layout_common_1.itemWidthProperty.setNative] = function(value) {
this.nativeView.setItemWidth(wrap_layout_common_1.Length.toDevicePixels(value, -1));
};
WrapLayout.prototype[wrap_layout_common_1.itemHeightProperty.setNative] = function(value) {
this.nativeView.setItemHeight(wrap_layout_common_1.Length.toDevicePixels(value, -1));
};
return WrapLayout;
}(wrap_layout_common_1.WrapLayoutBase);
exports.WrapLayout = WrapLayout;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var layout_base_1 = __webpack_require__(110);
__export(__webpack_require__(110));
var WrapLayoutBase = function(_super) {
__extends(WrapLayoutBase, _super);
function WrapLayoutBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return WrapLayoutBase;
}(layout_base_1.LayoutBase);
exports.WrapLayoutBase = WrapLayoutBase;
exports.itemWidthProperty = new layout_base_1.Property({
name: "itemWidth",
defaultValue: "auto",
affectsLayout: layout_base_1.isIOS,
valueConverter: function(v) {
return layout_base_1.Length.parse(v);
},
valueChanged: function(target, oldValue, newValue) {
return target.effectiveItemWidth = layout_base_1.Length.toDevicePixels(newValue, -1);
}
});
exports.itemWidthProperty.register(WrapLayoutBase);
exports.itemHeightProperty = new layout_base_1.Property({
name: "itemHeight",
defaultValue: "auto",
affectsLayout: layout_base_1.isIOS,
valueConverter: function(v) {
return layout_base_1.Length.parse(v);
},
valueChanged: function(target, oldValue, newValue) {
return target.effectiveItemHeight = layout_base_1.Length.toDevicePixels(newValue, -1);
}
});
exports.itemHeightProperty.register(WrapLayoutBase);
var converter = layout_base_1.makeParser(layout_base_1.makeValidator("horizontal", "vertical"));
exports.orientationProperty = new layout_base_1.Property({
name: "orientation",
defaultValue: "horizontal",
affectsLayout: layout_base_1.isIOS,
valueConverter: converter
});
exports.orientationProperty.register(WrapLayoutBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var list_picker_common_1 = __webpack_require__(126);
__export(__webpack_require__(126));
var Formatter;
var ValueChangeListener;
function initializeNativeClasses() {
if (Formatter) {
return;
}
var FormatterImpl = function(_super) {
__extends(FormatterImpl, _super);
function FormatterImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
FormatterImpl.prototype.format = function(index) {
return this.owner._getItemAsString(index);
};
return FormatterImpl;
}(java.lang.Object);
FormatterImpl = __decorate([ Interfaces([ android.widget.NumberPicker.Formatter ]) ], FormatterImpl);
var ValueChangeListenerImpl = function(_super) {
__extends(ValueChangeListenerImpl, _super);
function ValueChangeListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
ValueChangeListenerImpl.prototype.onValueChange = function(picker, oldValue, newValue) {
list_picker_common_1.selectedIndexProperty.nativeValueChange(this.owner, newValue);
};
return ValueChangeListenerImpl;
}(java.lang.Object);
ValueChangeListenerImpl = __decorate([ Interfaces([ android.widget.NumberPicker.OnValueChangeListener ]) ], ValueChangeListenerImpl);
Formatter = FormatterImpl;
ValueChangeListener = ValueChangeListenerImpl;
}
function getEditText(picker) {
for (var i = 0, count = picker.getChildCount(); i < count; i++) {
var child = picker.getChildAt(i);
if (child instanceof android.widget.EditText) {
return child;
}
}
return null;
}
var selectorWheelPaintField;
function getSelectorWheelPaint(picker) {
if (!selectorWheelPaintField) {
selectorWheelPaintField = picker.getClass().getDeclaredField("mSelectorWheelPaint");
selectorWheelPaintField.setAccessible(true);
}
return selectorWheelPaintField.get(picker);
}
var ListPicker = function(_super) {
__extends(ListPicker, _super);
function ListPicker() {
return _super !== null && _super.apply(this, arguments) || this;
}
ListPicker.prototype.createNativeView = function() {
initializeNativeClasses();
var picker = new android.widget.NumberPicker(this._context);
picker.setDescendantFocusability(android.widget.NumberPicker.FOCUS_BLOCK_DESCENDANTS);
picker.setMinValue(0);
picker.setMaxValue(0);
picker.setValue(0);
var formatter = new Formatter(this);
picker.setFormatter(formatter);
picker.formatter = formatter;
var valueChangedListener = new ValueChangeListener(this);
picker.setOnValueChangedListener(valueChangedListener);
picker.valueChangedListener = valueChangedListener;
var editText = getEditText(picker);
if (editText) {
picker.editText = editText;
}
picker.setWrapSelectorWheel(false);
return picker;
};
ListPicker.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
var nativeView = this.nativeView;
this._selectorWheelPaint = getSelectorWheelPaint(nativeView);
nativeView.formatter.owner = this;
nativeView.valueChangedListener.owner = this;
var editText = nativeView.editText;
if (editText) {
editText.setFilters([]);
editText.setText(" ", android.widget.TextView.BufferType.NORMAL);
}
};
ListPicker.prototype.disposeNativeView = function() {
var nativeView = this.nativeView;
nativeView.formatter.owner = null;
nativeView.valueChangedListener.owner = null;
_super.prototype.disposeNativeView.call(this);
};
ListPicker.prototype._fixNumberPickerRendering = function() {
var nativeView = this.nativeView;
nativeView.setFormatter(null);
nativeView.setFormatter(nativeView.formatter);
var editText = nativeView.editText;
if (editText) {
editText.setFilters([]);
editText.invalidate();
}
nativeView.invalidate();
};
ListPicker.prototype[list_picker_common_1.selectedIndexProperty.getDefault] = function() {
return -1;
};
ListPicker.prototype[list_picker_common_1.selectedIndexProperty.setNative] = function(value) {
if (value >= 0) {
this.nativeView.setValue(value);
}
};
ListPicker.prototype[list_picker_common_1.itemsProperty.getDefault] = function() {
return null;
};
ListPicker.prototype[list_picker_common_1.itemsProperty.setNative] = function(value) {
var maxValue = value && value.length > 0 ? value.length - 1 : 0;
this.nativeView.setMaxValue(maxValue);
this._fixNumberPickerRendering();
list_picker_common_1.selectedIndexProperty.coerce(this);
};
ListPicker.prototype[list_picker_common_1.colorProperty.getDefault] = function() {
var editText = this.nativeView.editText;
return {
wheelColor: this._selectorWheelPaint.getColor(),
textColor: editText ? editText.getTextColors().getDefaultColor() : -1
};
};
ListPicker.prototype[list_picker_common_1.colorProperty.setNative] = function(value) {
var color;
var wheelColor;
if (value instanceof list_picker_common_1.Color) {
color = wheelColor = value.android;
} else {
color = value.textColor;
wheelColor = value.wheelColor;
}
this._selectorWheelPaint.setColor(wheelColor);
var editText = this.nativeView.editText;
if (editText) {
editText.setTextColor(color);
}
};
return ListPicker;
}(list_picker_common_1.ListPickerBase);
exports.ListPicker = ListPicker;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var ListPickerBase = function(_super) {
__extends(ListPickerBase, _super);
function ListPickerBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
ListPickerBase.prototype._getItemAsString = function(index) {
var items = this.items;
if (!items) {
return " ";
}
var item = this.isItemsSource ? this.items.getItem(index) : this.items[index];
return item === undefined || item === null ? index + "" : item + "";
};
return ListPickerBase;
}(view_1.View);
exports.ListPickerBase = ListPickerBase;
exports.selectedIndexProperty = new view_1.CoercibleProperty({
name: "selectedIndex",
defaultValue: -1,
valueConverter: function(v) {
return parseInt(v);
},
coerceValue: function(target, value) {
var items = target.items;
if (items) {
var max = items.length - 1;
if (value < 0) {
value = 0;
}
if (value > max) {
value = max;
}
} else {
value = -1;
}
return value;
}
});
exports.selectedIndexProperty.register(ListPickerBase);
exports.itemsProperty = new view_1.Property({
name: "items",
valueChanged: function(target, oldValue, newValue) {
var getItem = newValue && newValue.getItem;
target.isItemsSource = typeof getItem === "function";
}
});
exports.itemsProperty.register(ListPickerBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var list_view_common_1 = __webpack_require__(128);
var stack_layout_1 = __webpack_require__(121);
var proxy_view_container_1 = __webpack_require__(129);
var layout_base_1 = __webpack_require__(110);
__export(__webpack_require__(128));
var ITEMLOADING = list_view_common_1.ListViewBase.itemLoadingEvent;
var LOADMOREITEMS = list_view_common_1.ListViewBase.loadMoreItemsEvent;
var ITEMTAP = list_view_common_1.ListViewBase.itemTapEvent;
var ItemClickListener;
function initializeItemClickListener() {
if (ItemClickListener) {
return;
}
var ItemClickListenerImpl = function(_super) {
__extends(ItemClickListenerImpl, _super);
function ItemClickListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
ItemClickListenerImpl.prototype.onItemClick = function(parent, convertView, index, id) {
var owner = this.owner;
var view = owner._realizedTemplates.get(owner._getItemTemplate(index).key).get(convertView);
owner.notify({
eventName: ITEMTAP,
object: owner,
index: index,
view: view
});
};
return ItemClickListenerImpl;
}(java.lang.Object);
ItemClickListenerImpl = __decorate([ Interfaces([ android.widget.AdapterView.OnItemClickListener ]) ], ItemClickListenerImpl);
ItemClickListener = ItemClickListenerImpl;
}
var ListView = function(_super) {
__extends(ListView, _super);
function ListView() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._androidViewId = -1;
_this._realizedItems = new Map();
_this._realizedTemplates = new Map();
return _this;
}
ListView.prototype.createNativeView = function() {
initializeItemClickListener();
var listView = new android.widget.ListView(this._context);
listView.setDescendantFocusability(android.view.ViewGroup.FOCUS_AFTER_DESCENDANTS);
this.updateEffectiveRowHeight();
listView.setCacheColorHint(android.graphics.Color.TRANSPARENT);
ensureListViewAdapterClass();
var adapter = new ListViewAdapterClass(this);
listView.setAdapter(adapter);
listView.adapter = adapter;
var itemClickListener = new ItemClickListener(this);
listView.setOnItemClickListener(itemClickListener);
listView.itemClickListener = itemClickListener;
return listView;
};
ListView.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
var nativeView = this.nativeView;
nativeView.itemClickListener.owner = this;
var adapter = nativeView.adapter;
adapter.owner = this;
nativeView.setAdapter(adapter);
if (this._androidViewId < 0) {
this._androidViewId = android.view.View.generateViewId();
}
nativeView.setId(this._androidViewId);
};
ListView.prototype.disposeNativeView = function() {
var nativeView = this.nativeView;
nativeView.setAdapter(null);
nativeView.itemClickListener.owner = null;
nativeView.adapter.owner = null;
this.clearRealizedCells();
_super.prototype.disposeNativeView.call(this);
};
ListView.prototype.refresh = function() {
var nativeView = this.nativeView;
if (!nativeView || !nativeView.getAdapter()) {
return;
}
this._realizedItems.forEach(function(view, nativeView) {
if (!(view.bindingContext instanceof list_view_common_1.Observable)) {
view.bindingContext = null;
}
});
nativeView.getAdapter().notifyDataSetChanged();
};
ListView.prototype.scrollToIndex = function(index) {
var nativeView = this.nativeView;
if (nativeView) {
nativeView.setSelection(index);
}
};
Object.defineProperty(ListView.prototype, "_childrenCount", {
get: function() {
return this._realizedItems.size;
},
enumerable: true,
configurable: true
});
ListView.prototype.eachChildView = function(callback) {
this._realizedItems.forEach(function(view, nativeView) {
if (view.parent instanceof ListView) {
callback(view);
} else {
if (view.parent) {
callback(view.parent);
}
}
});
};
ListView.prototype._dumpRealizedTemplates = function() {
console.log("Realized Templates:");
this._realizedTemplates.forEach(function(value, index) {
console.log("\t" + index + ":");
value.forEach(function(value, index) {
console.log("\t\t" + index.hashCode() + ": " + value);
});
});
console.log("Realized Items Size: " + this._realizedItems.size);
};
ListView.prototype.clearRealizedCells = function() {
var _this = this;
this._realizedItems.forEach(function(view, nativeView) {
if (view.parent) {
if (!(view.parent instanceof ListView)) {
_this._removeView(view.parent);
}
view.parent._removeView(view);
}
});
this._realizedItems.clear();
this._realizedTemplates.clear();
};
ListView.prototype[list_view_common_1.separatorColorProperty.getDefault] = function() {
var nativeView = this.nativeView;
return {
dividerHeight: nativeView.getDividerHeight(),
divider: nativeView.getDivider()
};
};
ListView.prototype[list_view_common_1.separatorColorProperty.setNative] = function(value) {
var nativeView = this.nativeView;
if (value instanceof list_view_common_1.Color) {
nativeView.setDivider(new android.graphics.drawable.ColorDrawable(value.android));
nativeView.setDividerHeight(1);
} else {
nativeView.setDivider(value.divider);
nativeView.setDividerHeight(value.dividerHeight);
}
};
ListView.prototype[list_view_common_1.itemTemplatesProperty.getDefault] = function() {
return null;
};
ListView.prototype[list_view_common_1.itemTemplatesProperty.setNative] = function(value) {
this._itemTemplatesInternal = new Array(this._defaultTemplate);
if (value) {
this._itemTemplatesInternal = this._itemTemplatesInternal.concat(value);
}
this.nativeView.setAdapter(new ListViewAdapterClass(this));
this.refresh();
};
return ListView;
}(list_view_common_1.ListViewBase);
exports.ListView = ListView;
var ListViewAdapterClass;
function ensureListViewAdapterClass() {
if (ListViewAdapterClass) {
return;
}
var ListViewAdapter = function(_super) {
__extends(ListViewAdapter, _super);
function ListViewAdapter(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
ListViewAdapter.prototype.getCount = function() {
return this.owner && this.owner.items && this.owner.items.length ? this.owner.items.length : 0;
};
ListViewAdapter.prototype.getItem = function(i) {
if (this.owner && this.owner.items && i < this.owner.items.length) {
var getItem = this.owner.items.getItem;
return getItem ? getItem(i) : this.owner.items[i];
}
return null;
};
ListViewAdapter.prototype.getItemId = function(i) {
return long(i);
};
ListViewAdapter.prototype.hasStableIds = function() {
return true;
};
ListViewAdapter.prototype.getViewTypeCount = function() {
return this.owner._itemTemplatesInternal.length;
};
ListViewAdapter.prototype.getItemViewType = function(index) {
var template = this.owner._getItemTemplate(index);
var itemViewType = this.owner._itemTemplatesInternal.indexOf(template);
return itemViewType;
};
ListViewAdapter.prototype.getView = function(index, convertView, parent) {
if (!this.owner) {
return null;
}
var totalItemCount = this.owner.items ? this.owner.items.length : 0;
if (index === totalItemCount - 1) {
this.owner.notify({
eventName: LOADMOREITEMS,
object: this.owner
});
}
var template = this.owner._getItemTemplate(index);
var view;
if (convertView) {
view = this.owner._realizedTemplates.get(template.key).get(convertView);
if (!view) {
throw new Error("There is no entry with key '" + convertView + "' in the realized views cache for template with key'" + template.key + "'.");
}
} else {
view = template.createView();
}
var args = {
eventName: ITEMLOADING,
object: this.owner,
index: index,
view: view,
android: parent,
ios: undefined
};
this.owner.notify(args);
if (!args.view) {
args.view = this.owner._getDefaultItemContent(index);
}
if (args.view) {
if (this.owner._effectiveRowHeight > -1) {
args.view.height = this.owner.rowHeight;
} else {
args.view.height = list_view_common_1.unsetValue;
}
this.owner._prepareItem(args.view, index);
if (!args.view.parent) {
if (args.view instanceof layout_base_1.LayoutBase && !(args.view instanceof proxy_view_container_1.ProxyViewContainer)) {
this.owner._addView(args.view);
convertView = args.view.nativeView;
} else {
var sp = new stack_layout_1.StackLayout();
sp.addChild(args.view);
this.owner._addView(sp);
convertView = sp.nativeView;
}
}
var realizedItemsForTemplateKey = this.owner._realizedTemplates.get(template.key);
if (!realizedItemsForTemplateKey) {
realizedItemsForTemplateKey = new Map();
this.owner._realizedTemplates.set(template.key, realizedItemsForTemplateKey);
}
realizedItemsForTemplateKey.set(convertView, args.view);
this.owner._realizedItems.set(convertView, args.view);
}
return convertView;
};
return ListViewAdapter;
}(android.widget.BaseAdapter);
ListViewAdapterClass = ListViewAdapter;
}
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
var builder_1 = __webpack_require__(57);
var label_1 = __webpack_require__(78);
var observable_array_1 = __webpack_require__(73);
var weak_event_listener_1 = __webpack_require__(38);
__export(__webpack_require__(12));
var knownTemplates;
(function(knownTemplates) {
knownTemplates.itemTemplate = "itemTemplate";
})(knownTemplates = exports.knownTemplates || (exports.knownTemplates = {}));
var knownMultiTemplates;
(function(knownMultiTemplates) {
knownMultiTemplates.itemTemplates = "itemTemplates";
})(knownMultiTemplates = exports.knownMultiTemplates || (exports.knownMultiTemplates = {}));
var autoEffectiveRowHeight = -1;
var ListViewBase = function(_super) {
__extends(ListViewBase, _super);
function ListViewBase() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._itemTemplateSelectorBindable = new label_1.Label();
_this._defaultTemplate = {
key: "default",
createView: function() {
if (_this.itemTemplate) {
return builder_1.parse(_this.itemTemplate, _this);
}
return undefined;
}
};
_this._itemTemplatesInternal = new Array(_this._defaultTemplate);
_this._effectiveRowHeight = autoEffectiveRowHeight;
return _this;
}
Object.defineProperty(ListViewBase.prototype, "separatorColor", {
get: function() {
return this.style.separatorColor;
},
set: function(value) {
this.style.separatorColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListViewBase.prototype, "itemTemplateSelector", {
get: function() {
return this._itemTemplateSelector;
},
set: function(value) {
var _this = this;
if (typeof value === "string") {
this._itemTemplateSelectorBindable.bind({
sourceProperty: null,
targetProperty: "templateKey",
expression: value
});
this._itemTemplateSelector = function(item, index, items) {
item["$index"] = index;
_this._itemTemplateSelectorBindable.bindingContext = item;
return _this._itemTemplateSelectorBindable.get("templateKey");
};
} else if (typeof value === "function") {
this._itemTemplateSelector = value;
}
},
enumerable: true,
configurable: true
});
ListViewBase.prototype.refresh = function() {};
ListViewBase.prototype.scrollToIndex = function(index) {};
ListViewBase.prototype._getItemTemplate = function(index) {
var templateKey = "default";
if (this.itemTemplateSelector) {
var dataItem = this._getDataItem(index);
templateKey = this._itemTemplateSelector(dataItem, index, this.items);
}
for (var i = 0, length_1 = this._itemTemplatesInternal.length; i < length_1; i++) {
if (this._itemTemplatesInternal[i].key === templateKey) {
return this._itemTemplatesInternal[i];
}
}
return this._itemTemplatesInternal[0];
};
ListViewBase.prototype._prepareItem = function(item, index) {
if (item) {
item.bindingContext = this._getDataItem(index);
}
};
ListViewBase.prototype._getDataItem = function(index) {
var thisItems = this.items;
return thisItems.getItem ? thisItems.getItem(index) : thisItems[index];
};
ListViewBase.prototype._getDefaultItemContent = function(index) {
var lbl = new label_1.Label();
lbl.bind({
targetProperty: "text",
sourceProperty: "$value"
});
return lbl;
};
ListViewBase.prototype._onItemsChanged = function(args) {
this.refresh();
};
ListViewBase.prototype._onRowHeightPropertyChanged = function(oldValue, newValue) {
this.refresh();
};
ListViewBase.prototype.updateEffectiveRowHeight = function() {
exports.rowHeightProperty.coerce(this);
};
return ListViewBase;
}(view_1.View);
ListViewBase.itemLoadingEvent = "itemLoading";
ListViewBase.itemTapEvent = "itemTap";
ListViewBase.loadMoreItemsEvent = "loadMoreItems";
ListViewBase.knownFunctions = [ "itemTemplateSelector" ];
exports.ListViewBase = ListViewBase;
exports.itemsProperty = new view_1.Property({
name: "items",
valueChanged: function(target, oldValue, newValue) {
if (oldValue instanceof view_1.Observable) {
weak_event_listener_1.removeWeakEventListener(oldValue, observable_array_1.ObservableArray.changeEvent, target._onItemsChanged, target);
}
if (newValue instanceof view_1.Observable) {
weak_event_listener_1.addWeakEventListener(newValue, observable_array_1.ObservableArray.changeEvent, target._onItemsChanged, target);
}
target.refresh();
}
});
exports.itemsProperty.register(ListViewBase);
exports.itemTemplateProperty = new view_1.Property({
name: "itemTemplate",
valueChanged: function(target) {
target.refresh();
}
});
exports.itemTemplateProperty.register(ListViewBase);
exports.itemTemplatesProperty = new view_1.Property({
name: "itemTemplates",
valueConverter: function(value) {
if (typeof value === "string") {
return builder_1.parseMultipleTemplates(value);
}
return value;
}
});
exports.itemTemplatesProperty.register(ListViewBase);
var defaultRowHeight = "auto";
exports.rowHeightProperty = new view_1.CoercibleProperty({
name: "rowHeight",
defaultValue: defaultRowHeight,
equalityComparer: view_1.Length.equals,
coerceValue: function(target, value) {
return target.nativeView ? value : defaultRowHeight;
},
valueChanged: function(target, oldValue, newValue) {
target._effectiveRowHeight = view_1.Length.toDevicePixels(newValue, autoEffectiveRowHeight);
target._onRowHeightPropertyChanged(oldValue, newValue);
},
valueConverter: view_1.Length.parse
});
exports.rowHeightProperty.register(ListViewBase);
exports.separatorColorProperty = new view_1.CssProperty({
name: "separatorColor",
cssName: "separator-color",
equalityComparer: view_1.Color.equals,
valueConverter: function(v) {
return new view_1.Color(v);
}
});
exports.separatorColorProperty.register(view_1.Style);
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var layout_base_1 = __webpack_require__(110);
var ProxyViewContainer = function(_super) {
__extends(ProxyViewContainer, _super);
function ProxyViewContainer() {
var _this = _super.call(this) || this;
_this.nativeView = undefined;
return _this;
}
Object.defineProperty(ProxyViewContainer.prototype, "ios", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyViewContainer.prototype, "android", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyViewContainer.prototype, "isLayoutRequested", {
get: function() {
return false;
},
enumerable: true,
configurable: true
});
ProxyViewContainer.prototype.createNativeView = function() {
return undefined;
};
ProxyViewContainer.prototype._getNativeViewsCount = function() {
var result = 0;
this.eachChildView(function(cv) {
result += cv._getNativeViewsCount();
return true;
});
return result;
};
ProxyViewContainer.prototype._eachLayoutView = function(callback) {
this.eachChildView(function(cv) {
if (!cv.isCollapsed) {
cv._eachLayoutView(callback);
}
return true;
});
};
ProxyViewContainer.prototype._addViewToNativeVisualTree = function(child, atIndex) {
if (layout_base_1.traceEnabled()) {
layout_base_1.traceWrite("ViewContainer._addViewToNativeVisualTree for a child " + child + " ViewContainer.parent: " + this.parent, layout_base_1.traceCategories.ViewHierarchy);
}
_super.prototype._addViewToNativeVisualTree.call(this, child);
var parent = this.parent;
if (parent instanceof layout_base_1.View) {
var baseIndex = 0;
var insideIndex = 0;
if (parent instanceof layout_base_1.LayoutBase) {
baseIndex = parent._childIndexToNativeChildIndex(parent.getChildIndex(this));
}
if (atIndex !== undefined) {
insideIndex = this._childIndexToNativeChildIndex(atIndex);
} else {
insideIndex = this._getNativeViewsCount();
}
if (layout_base_1.traceEnabled()) {
layout_base_1.traceWrite("ProxyViewContainer._addViewToNativeVisualTree at: " + atIndex + " base: " + baseIndex + " additional: " + insideIndex, layout_base_1.traceCategories.ViewHierarchy);
}
return parent._addViewToNativeVisualTree(child, baseIndex + insideIndex);
}
return false;
};
ProxyViewContainer.prototype._removeViewFromNativeVisualTree = function(child) {
if (layout_base_1.traceEnabled()) {
layout_base_1.traceWrite("ProxyViewContainer._removeViewFromNativeVisualTree for a child " + child + " ViewContainer.parent: " + this.parent, layout_base_1.traceCategories.ViewHierarchy);
}
_super.prototype._removeViewFromNativeVisualTree.call(this, child);
var parent = this.parent;
if (parent instanceof layout_base_1.View) {
return parent._removeViewFromNativeVisualTree(child);
}
};
ProxyViewContainer.prototype._registerLayoutChild = function(child) {
var parent = this.parent;
if (parent instanceof layout_base_1.LayoutBase) {
parent._registerLayoutChild(child);
}
};
ProxyViewContainer.prototype._unregisterLayoutChild = function(child) {
var parent = this.parent;
if (parent instanceof layout_base_1.LayoutBase) {
parent._unregisterLayoutChild(child);
}
};
ProxyViewContainer.prototype._parentChanged = function(oldParent) {
_super.prototype._parentChanged.call(this, oldParent);
var addingToParent = this.parent && !oldParent;
var newLayout = this.parent;
var oldLayout = oldParent;
if (addingToParent && newLayout instanceof layout_base_1.LayoutBase) {
this.eachChildView(function(child) {
newLayout._registerLayoutChild(child);
return true;
});
} else if (oldLayout instanceof layout_base_1.LayoutBase) {
this.eachChildView(function(child) {
oldLayout._unregisterLayoutChild(child);
return true;
});
}
};
return ProxyViewContainer;
}(layout_base_1.LayoutBase);
exports.ProxyViewContainer = ProxyViewContainer;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var page_common_1 = __webpack_require__(131);
var action_bar_1 = __webpack_require__(94);
var grid_layout_1 = __webpack_require__(119);
var constants_1 = __webpack_require__(61);
var platform_1 = __webpack_require__(22);
__export(__webpack_require__(131));
var SYSTEM_UI_FLAG_LIGHT_STATUS_BAR = 8192;
var STATUS_BAR_LIGHT_BCKG = -657931;
var STATUS_BAR_DARK_BCKG = 1711276032;
var DialogFragment;
function initializeDialogFragment() {
if (DialogFragment) {
return;
}
var DialogFragmentImpl = function(_super) {
__extends(DialogFragmentImpl, _super);
function DialogFragmentImpl(_owner, _fullscreen, _shownCallback, _dismissCallback) {
var _this = _super.call(this) || this;
_this._owner = _owner;
_this._fullscreen = _fullscreen;
_this._shownCallback = _shownCallback;
_this._dismissCallback = _dismissCallback;
return global.__native(_this);
}
DialogFragmentImpl.prototype.onCreateDialog = function(savedInstanceState) {
var dialog = new android.app.Dialog(this._owner._context);
dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
this._owner.horizontalAlignment = this._fullscreen ? "stretch" : "center";
this._owner.verticalAlignment = this._fullscreen ? "stretch" : "middle";
this._owner.actionBarHidden = true;
var nativeView = this._owner.nativeView;
var layoutParams = nativeView.getLayoutParams();
if (!layoutParams) {
layoutParams = new org.nativescript.widgets.CommonLayoutParams();
nativeView.setLayoutParams(layoutParams);
}
dialog.setContentView(this._owner.nativeView, layoutParams);
var window = dialog.getWindow();
window.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
if (this._fullscreen) {
window.setLayout(android.view.ViewGroup.LayoutParams.FILL_PARENT, android.view.ViewGroup.LayoutParams.FILL_PARENT);
}
return dialog;
};
DialogFragmentImpl.prototype.onStart = function() {
_super.prototype.onStart.call(this);
if (!this._owner.isLoaded) {
this._owner.onLoaded();
}
this._shownCallback();
};
DialogFragmentImpl.prototype.onDestroyView = function() {
_super.prototype.onDestroyView.call(this);
if (this._owner.isLoaded) {
this._owner.onUnloaded();
}
this._owner._isAddedToNativeVisualTree = false;
this._owner._tearDownUI(true);
};
DialogFragmentImpl.prototype.onDismiss = function(dialog) {
_super.prototype.onDismiss.call(this, dialog);
this._dismissCallback();
};
return DialogFragmentImpl;
}(android.app.DialogFragment);
DialogFragment = DialogFragmentImpl;
}
var Page = function(_super) {
__extends(Page, _super);
function Page() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._isBackNavigation = false;
return _this;
}
Page.prototype.createNativeView = function() {
var layout = new org.nativescript.widgets.GridLayout(this._context);
layout.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.auto));
layout.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.star));
return layout;
};
Page.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
this.nativeView.setBackgroundColor(-1);
};
Page.prototype._addViewToNativeVisualTree = function(child, atIndex) {
if (this.nativeView && child.nativeView) {
if (child instanceof action_bar_1.ActionBar) {
grid_layout_1.GridLayout.setRow(child, 0);
child.horizontalAlignment = "stretch";
child.verticalAlignment = "top";
} else {
grid_layout_1.GridLayout.setRow(child, 1);
}
}
return _super.prototype._addViewToNativeVisualTree.call(this, child, atIndex);
};
Page.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
if (this.actionBarHidden !== undefined) {
this.updateActionBar();
}
};
Page.prototype._tearDownUI = function(force) {
var skipDetached = !force && this.frame.android.cachePagesOnNavigate && !this._isBackNavigation;
if (!skipDetached) {
_super.prototype._tearDownUI.call(this);
this._isAddedToNativeVisualTree = false;
}
};
Page.prototype.onNavigatedFrom = function(isBackNavigation) {
this._isBackNavigation = isBackNavigation;
_super.prototype.onNavigatedFrom.call(this, isBackNavigation);
};
Page.prototype._showNativeModalView = function(parent, context, closeCallback, fullscreen) {
var _this = this;
_super.prototype._showNativeModalView.call(this, parent, context, closeCallback, fullscreen);
if (!this.backgroundColor) {
this.backgroundColor = new page_common_1.Color("White");
}
this._setupUI(parent._context);
this._isAddedToNativeVisualTree = true;
initializeDialogFragment();
this._dialogFragment = new DialogFragment(this, !!fullscreen, function() {
return _this._raiseShownModallyEvent();
}, function() {
return _this.closeModal();
});
_super.prototype._raiseShowingModallyEvent.call(this);
this._dialogFragment.show(parent.frame.android.activity.getFragmentManager(), constants_1.DIALOG_FRAGMENT_TAG);
};
Page.prototype._hideNativeModalView = function(parent) {
this._dialogFragment.dismissAllowingStateLoss();
this._dialogFragment = null;
parent._modal = undefined;
_super.prototype._hideNativeModalView.call(this, parent);
};
Page.prototype.updateActionBar = function() {
this.actionBar.update();
};
Page.prototype[page_common_1.actionBarHiddenProperty.getDefault] = function() {
return undefined;
};
Page.prototype[page_common_1.actionBarHiddenProperty.setNative] = function(value) {
this.updateActionBar();
};
Page.prototype[page_common_1.statusBarStyleProperty.getDefault] = function() {
if (platform_1.device.sdkVersion >= "21") {
var window_1 = this._context.getWindow();
var decorView = window_1.getDecorView();
return {
color: window_1.getStatusBarColor(),
systemUiVisibility: decorView.getSystemUiVisibility()
};
}
return null;
};
Page.prototype[page_common_1.statusBarStyleProperty.setNative] = function(value) {
if (platform_1.device.sdkVersion >= "21") {
var window_2 = this._context.getWindow();
var decorView = window_2.getDecorView();
if (value === "light") {
window_2.setStatusBarColor(STATUS_BAR_LIGHT_BCKG);
decorView.setSystemUiVisibility(SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
} else if (value === "dark") {
window_2.setStatusBarColor(STATUS_BAR_DARK_BCKG);
decorView.setSystemUiVisibility(0);
} else {
window_2.setStatusBarColor(value.color);
decorView.setSystemUiVisibility(value.systemUiVisibility);
}
}
};
Page.prototype[page_common_1.androidStatusBarBackgroundProperty.getDefault] = function() {
if (platform_1.device.sdkVersion >= "21") {
var window_3 = this._context.getWindow();
return window_3.getStatusBarColor();
}
return null;
};
Page.prototype[page_common_1.androidStatusBarBackgroundProperty.setNative] = function(value) {
if (platform_1.device.sdkVersion >= "21") {
var window_4 = this._context.getWindow();
var color = value instanceof page_common_1.Color ? value.android : value;
window_4.setStatusBarColor(color);
}
};
return Page;
}(page_common_1.PageBase);
exports.Page = Page;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var content_view_1 = __webpack_require__(99);
var frame_1 = __webpack_require__(10);
var action_bar_1 = __webpack_require__(94);
var style_scope_1 = __webpack_require__(43);
var file_system_1 = __webpack_require__(19);
__export(__webpack_require__(99));
var PageBase = function(_super) {
__extends(PageBase, _super);
function PageBase() {
var _this = _super.call(this) || this;
_this._cssFiles = {};
_this._styleScope = new style_scope_1.StyleScope();
return _this;
}
Object.defineProperty(PageBase.prototype, "navigationContext", {
get: function() {
return this._navigationContext;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PageBase.prototype, "css", {
get: function() {
return this._styleScope.css;
},
set: function(value) {
this._styleScope.css = value;
this._cssFiles = {};
this._refreshCss();
},
enumerable: true,
configurable: true
});
Object.defineProperty(PageBase.prototype, "actionBar", {
get: function() {
if (!this._actionBar) {
this._actionBar = new action_bar_1.ActionBar();
this._addView(this._actionBar);
}
return this._actionBar;
},
set: function(value) {
if (!value) {
throw new Error("ActionBar cannot be null or undefined.");
}
if (this._actionBar !== value) {
if (this._actionBar) {
this._removeView(this._actionBar);
}
this._actionBar = value;
this._addView(this._actionBar);
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(PageBase.prototype, "statusBarStyle", {
get: function() {
return this.style.statusBarStyle;
},
set: function(value) {
this.style.statusBarStyle = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PageBase.prototype, "androidStatusBarBackground", {
get: function() {
return this.style.androidStatusBarBackground;
},
set: function(value) {
this.style.androidStatusBarBackground = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PageBase.prototype, "page", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
PageBase.prototype.onLoaded = function() {
this._refreshCss();
_super.prototype.onLoaded.call(this);
};
PageBase.prototype.onUnloaded = function() {
var styleScope = this._styleScope;
_super.prototype.onUnloaded.call(this);
this._styleScope = styleScope;
};
PageBase.prototype.addCss = function(cssString) {
this._addCssInternal(cssString);
};
PageBase.prototype._addCssInternal = function(cssString, cssFileName) {
this._styleScope.addCss(cssString, cssFileName);
this._refreshCss();
};
PageBase.prototype.addCssFile = function(cssFileName) {
if (cssFileName.indexOf("~/") === 0) {
cssFileName = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, cssFileName.replace("~/", ""));
}
if (!this._cssFiles[cssFileName]) {
if (file_system_1.File.exists(cssFileName)) {
var file = file_system_1.File.fromPath(cssFileName);
var text = file.readTextSync();
if (text) {
this._addCssInternal(text, cssFileName);
this._cssFiles[cssFileName] = true;
}
}
}
};
PageBase.prototype._refreshCss = function() {
var scopeVersion = this._styleScope.ensureSelectors();
if (scopeVersion !== this._cssAppliedVersion) {
var styleScope_1 = this._styleScope;
this._resetCssValues();
var checkSelectors = function(view) {
styleScope_1.applySelectors(view);
return true;
};
checkSelectors(this);
content_view_1.eachDescendant(this, checkSelectors);
this._cssAppliedVersion = scopeVersion;
}
};
PageBase.prototype.getKeyframeAnimationWithName = function(animationName) {
return this._styleScope.getKeyframeAnimationWithName(animationName);
};
Object.defineProperty(PageBase.prototype, "frame", {
get: function() {
return this.parent;
},
enumerable: true,
configurable: true
});
PageBase.prototype.createNavigatedData = function(eventName, isBackNavigation) {
return {
eventName: eventName,
object: this,
context: this.navigationContext,
isBackNavigation: isBackNavigation
};
};
PageBase.prototype.onNavigatingTo = function(context, isBackNavigation, bindingContext) {
this._navigationContext = context;
if (!isBackNavigation && bindingContext !== undefined && bindingContext !== null) {
this.bindingContext = bindingContext;
}
this.notify(this.createNavigatedData(PageBase.navigatingToEvent, isBackNavigation));
};
PageBase.prototype.onNavigatedTo = function(isBackNavigation) {
this.notify(this.createNavigatedData(PageBase.navigatedToEvent, isBackNavigation));
};
PageBase.prototype.onNavigatingFrom = function(isBackNavigation) {
this.notify(this.createNavigatedData(PageBase.navigatingFromEvent, isBackNavigation));
};
PageBase.prototype.onNavigatedFrom = function(isBackNavigation) {
this.notify(this.createNavigatedData(PageBase.navigatedFromEvent, isBackNavigation));
this._navigationContext = undefined;
};
PageBase.prototype.showModal = function() {
if (arguments.length === 0) {
this._showNativeModalView(frame_1.topmost().currentPage, undefined, undefined, true);
return this;
} else {
var context = arguments[1];
var closeCallback = arguments[2];
var fullscreen = arguments[3];
var page = void 0;
if (arguments[0] instanceof PageBase) {
page = arguments[0];
} else {
page = frame_1.resolvePageFromEntry({
moduleName: arguments[0]
});
}
page._showNativeModalView(this, context, closeCallback, fullscreen);
return page;
}
};
PageBase.prototype.closeModal = function() {
if (this._closeModalCallback) {
this._closeModalCallback.apply(undefined, arguments);
}
};
Object.defineProperty(PageBase.prototype, "modal", {
get: function() {
return this._modal;
},
enumerable: true,
configurable: true
});
PageBase.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof action_bar_1.ActionBar) {
this.actionBar = value;
} else {
_super.prototype._addChildFromBuilder.call(this, name, value);
}
};
PageBase.prototype._showNativeModalView = function(parent, context, closeCallback, fullscreen) {
parent._modal = this;
var that = this;
this._modalContext = context;
this._closeModalCallback = function() {
if (that._closeModalCallback) {
that._closeModalCallback = null;
that._modalContext = null;
that._hideNativeModalView(parent);
if (typeof closeCallback === "function") {
closeCallback.apply(undefined, arguments);
}
}
};
};
PageBase.prototype._hideNativeModalView = function(parent) {};
PageBase.prototype._raiseShownModallyEvent = function() {
var args = {
eventName: PageBase.shownModallyEvent,
object: this,
context: this._modalContext,
closeCallback: this._closeModalCallback
};
this.notify(args);
};
PageBase.prototype._raiseShowingModallyEvent = function() {
var args = {
eventName: PageBase.showingModallyEvent,
object: this,
context: this._modalContext,
closeCallback: this._closeModalCallback
};
this.notify(args);
};
PageBase.prototype._getStyleScope = function() {
return this._styleScope;
};
PageBase.prototype.eachChildView = function(callback) {
_super.prototype.eachChildView.call(this, callback);
callback(this.actionBar);
};
Object.defineProperty(PageBase.prototype, "_childrenCount", {
get: function() {
return (this.content ? 1 : 0) + (this.actionBar ? 1 : 0);
},
enumerable: true,
configurable: true
});
PageBase.prototype._resetCssValues = function() {
var resetCssValuesFunc = function(view) {
view._cancelAllAnimations();
content_view_1.resetCSSProperties(view.style);
return true;
};
resetCssValuesFunc(this);
content_view_1.eachDescendant(this, resetCssValuesFunc);
};
return PageBase;
}(content_view_1.ContentView);
PageBase.navigatingToEvent = "navigatingTo";
PageBase.navigatedToEvent = "navigatedTo";
PageBase.navigatingFromEvent = "navigatingFrom";
PageBase.navigatedFromEvent = "navigatedFrom";
PageBase.shownModallyEvent = "shownModally";
PageBase.showingModallyEvent = "showingModally";
exports.PageBase = PageBase;
exports.actionBarHiddenProperty = new content_view_1.Property({
name: "actionBarHidden",
affectsLayout: content_view_1.isIOS,
valueConverter: content_view_1.booleanConverter
});
exports.actionBarHiddenProperty.register(PageBase);
exports.backgroundSpanUnderStatusBarProperty = new content_view_1.Property({
name: "backgroundSpanUnderStatusBar",
defaultValue: false,
affectsLayout: content_view_1.isIOS,
valueConverter: content_view_1.booleanConverter
});
exports.backgroundSpanUnderStatusBarProperty.register(PageBase);
exports.enableSwipeBackNavigationProperty = new content_view_1.Property({
name: "enableSwipeBackNavigation",
defaultValue: true,
valueConverter: content_view_1.booleanConverter
});
exports.enableSwipeBackNavigationProperty.register(PageBase);
exports.statusBarStyleProperty = new content_view_1.CssProperty({
name: "statusBarStyle",
cssName: "status-bar-style"
});
exports.statusBarStyleProperty.register(content_view_1.Style);
exports.androidStatusBarBackgroundProperty = new content_view_1.CssProperty({
name: "androidStatusBarBackground",
cssName: "android-status-bar-background",
equalityComparer: content_view_1.Color.equals,
valueConverter: function(v) {
return new content_view_1.Color(v);
}
});
exports.androidStatusBarBackgroundProperty.register(content_view_1.Style);
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
var Placeholder = function(_super) {
__extends(Placeholder, _super);
function Placeholder() {
return _super !== null && _super.apply(this, arguments) || this;
}
Placeholder.prototype.createNativeView = function() {
var args = {
eventName: Placeholder.creatingViewEvent,
object: this,
view: undefined,
context: this._context
};
this.notify(args);
return args.view;
};
return Placeholder;
}(view_1.View);
Placeholder.creatingViewEvent = "creatingView";
exports.Placeholder = Placeholder;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var progress_common_1 = __webpack_require__(134);
__export(__webpack_require__(134));
var R_ATTR_PROGRESS_BAR_STYLE_HORIZONTAL = 16842872;
var Progress = function(_super) {
__extends(Progress, _super);
function Progress() {
return _super !== null && _super.apply(this, arguments) || this;
}
Progress.prototype.createNativeView = function() {
return new android.widget.ProgressBar(this._context, null, R_ATTR_PROGRESS_BAR_STYLE_HORIZONTAL);
};
Progress.prototype[progress_common_1.valueProperty.getDefault] = function() {
return 0;
};
Progress.prototype[progress_common_1.valueProperty.setNative] = function(value) {
this.nativeView.setProgress(value);
};
Progress.prototype[progress_common_1.maxValueProperty.getDefault] = function() {
return 100;
};
Progress.prototype[progress_common_1.maxValueProperty.setNative] = function(value) {
this.nativeView.setMax(value);
};
Progress.prototype[progress_common_1.colorProperty.getDefault] = function() {
return null;
};
Progress.prototype[progress_common_1.colorProperty.setNative] = function(value) {
var progressDrawable = this.nativeView.getProgressDrawable();
if (!progressDrawable) {
return;
}
if (value instanceof progress_common_1.Color) {
progressDrawable.setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
} else {
progressDrawable.clearColorFilter();
}
};
Progress.prototype[progress_common_1.backgroundColorProperty.getDefault] = function() {
return null;
};
Progress.prototype[progress_common_1.backgroundColorProperty.setNative] = function(value) {
var progressDrawable = this.nativeView.getProgressDrawable();
if (!progressDrawable) {
return;
}
if (progressDrawable instanceof android.graphics.drawable.LayerDrawable && progressDrawable.getNumberOfLayers() > 0) {
var backgroundDrawable = progressDrawable.getDrawable(0);
if (backgroundDrawable) {
if (value instanceof progress_common_1.Color) {
backgroundDrawable.setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
} else {
backgroundDrawable.clearColorFilter();
}
}
}
};
Progress.prototype[progress_common_1.backgroundInternalProperty.getDefault] = function() {
return null;
};
Progress.prototype[progress_common_1.backgroundInternalProperty.setNative] = function(value) {};
return Progress;
}(progress_common_1.ProgressBase);
exports.Progress = Progress;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var ProgressBase = function(_super) {
__extends(ProgressBase, _super);
function ProgressBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return ProgressBase;
}(view_1.View);
exports.ProgressBase = ProgressBase;
exports.valueProperty = new view_1.CoercibleProperty({
name: "value",
defaultValue: 0,
coerceValue: function(t, v) {
return v < 0 ? 0 : Math.min(v, t.maxValue);
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.valueProperty.register(ProgressBase);
exports.maxValueProperty = new view_1.Property({
name: "maxValue",
defaultValue: 100,
valueChanged: function(target, oldValue, newValue) {
exports.valueProperty.coerce(target);
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.maxValueProperty.register(ProgressBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var label_1 = __webpack_require__(78);
var layout_base_1 = __webpack_require__(110);
var stack_layout_1 = __webpack_require__(121);
var observable_array_1 = __webpack_require__(73);
var weak_event_listener_1 = __webpack_require__(38);
var builder_1 = __webpack_require__(57);
__export(__webpack_require__(110));
var knownTemplates;
(function(knownTemplates) {
knownTemplates.itemTemplate = "itemTemplate";
})(knownTemplates = exports.knownTemplates || (exports.knownTemplates = {}));
var Repeater = function(_super) {
__extends(Repeater, _super);
function Repeater() {
var _this = _super.call(this) || this;
_this._isDirty = false;
_this.itemsLayout = new stack_layout_1.StackLayout();
return _this;
}
Repeater.prototype.onLoaded = function() {
if (this._isDirty) {
this.refresh();
}
_super.prototype.onLoaded.call(this);
};
Repeater.prototype._requestRefresh = function() {
this._isDirty = true;
if (this.isLoaded) {
this.refresh();
}
};
Repeater.prototype.refresh = function() {
if (this.itemsLayout) {
this.itemsLayout.removeChildren();
}
if (!this.items) {
return;
}
var length = this.items.length;
for (var i = 0; i < length; i++) {
var viewToAdd = this.itemTemplate ? builder_1.parse(this.itemTemplate, this) : this._getDefaultItemContent(i);
var dataItem = this._getDataItem(i);
viewToAdd.bindingContext = dataItem;
this.itemsLayout.addChild(viewToAdd);
}
this._isDirty = false;
};
Repeater.prototype._onItemsChanged = function(data) {
this._requestRefresh();
};
Repeater.prototype._getDefaultItemContent = function(index) {
var lbl = new label_1.Label();
lbl.bind({
targetProperty: "text",
sourceProperty: "$value"
});
return lbl;
};
Repeater.prototype._getDataItem = function(index) {
var items = this.items;
return items.getItem ? items.getItem(index) : this.items[index];
};
Object.defineProperty(Repeater.prototype, "_childrenCount", {
get: function() {
var count = 0;
if (this.itemsLayout) {
count++;
}
return count;
},
enumerable: true,
configurable: true
});
Repeater.prototype.eachChildView = function(callback) {
if (this.itemsLayout) {
callback(this.itemsLayout);
}
};
Repeater.prototype.onLayout = function(left, top, right, bottom) {
layout_base_1.View.layoutChild(this, this.itemsLayout, 0, 0, right - left, bottom - top);
};
Repeater.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var result = layout_base_1.View.measureChild(this, this.itemsLayout, widthMeasureSpec, heightMeasureSpec);
var width = layout_base_1.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = layout_base_1.layout.getMeasureSpecMode(widthMeasureSpec);
var height = layout_base_1.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = layout_base_1.layout.getMeasureSpecMode(heightMeasureSpec);
var widthAndState = layout_base_1.View.resolveSizeAndState(result.measuredWidth, width, widthMode, 0);
var heightAndState = layout_base_1.View.resolveSizeAndState(result.measuredHeight, height, heightMode, 0);
this.setMeasuredDimension(widthAndState, heightAndState);
};
return Repeater;
}(layout_base_1.CustomLayoutView);
exports.Repeater = Repeater;
exports.itemTemplateProperty = new layout_base_1.Property({
name: "itemTemplate",
affectsLayout: true,
valueChanged: function(target) {
target._requestRefresh();
}
});
exports.itemTemplateProperty.register(Repeater);
exports.itemsProperty = new layout_base_1.Property({
name: "items",
affectsLayout: true,
valueChanged: function(target, oldValue, newValue) {
if (oldValue instanceof observable_array_1.ObservableArray) {
weak_event_listener_1.removeWeakEventListener(oldValue, observable_array_1.ObservableArray.changeEvent, target._onItemsChanged, target);
}
if (newValue instanceof observable_array_1.ObservableArray) {
weak_event_listener_1.addWeakEventListener(newValue, observable_array_1.ObservableArray.changeEvent, target._onItemsChanged, target);
}
target._requestRefresh();
}
});
exports.itemsProperty.register(Repeater);
exports.itemsLayoutProperty = new layout_base_1.Property({
name: "itemsLayout",
affectsLayout: true,
valueChanged: function(target, oldValue, newValue) {
if (oldValue) {
target._removeView(oldValue);
oldValue.removeChildren();
}
if (newValue) {
target._addView(newValue);
}
target._requestRefresh();
}
});
exports.itemsLayoutProperty.register(Repeater);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var scroll_view_common_1 = __webpack_require__(137);
__export(__webpack_require__(137));
var ScrollView = function(_super) {
__extends(ScrollView, _super);
function ScrollView() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._androidViewId = -1;
_this._lastScrollX = -1;
_this._lastScrollY = -1;
return _this;
}
Object.defineProperty(ScrollView.prototype, "horizontalOffset", {
get: function() {
var nativeView = this.nativeView;
if (!nativeView) {
return 0;
}
return nativeView.getScrollX() / scroll_view_common_1.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "verticalOffset", {
get: function() {
var nativeView = this.nativeView;
if (!nativeView) {
return 0;
}
return nativeView.getScrollY() / scroll_view_common_1.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableWidth", {
get: function() {
var nativeView = this.nativeView;
if (!nativeView || this.orientation !== "horizontal") {
return 0;
}
return nativeView.getScrollableLength() / scroll_view_common_1.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableHeight", {
get: function() {
var nativeView = this.nativeView;
if (!nativeView || this.orientation !== "vertical") {
return 0;
}
return nativeView.getScrollableLength() / scroll_view_common_1.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
ScrollView.prototype.scrollToVerticalOffset = function(value, animated) {
var nativeView = this.nativeView;
if (nativeView && this.orientation === "vertical") {
value *= scroll_view_common_1.layout.getDisplayDensity();
if (animated) {
nativeView.smoothScrollTo(0, value);
} else {
nativeView.scrollTo(0, value);
}
}
};
ScrollView.prototype.scrollToHorizontalOffset = function(value, animated) {
var nativeView = this.nativeView;
if (nativeView && this.orientation === "horizontal") {
value *= scroll_view_common_1.layout.getDisplayDensity();
if (animated) {
nativeView.smoothScrollTo(value, 0);
} else {
nativeView.scrollTo(value, 0);
}
}
};
ScrollView.prototype.createNativeView = function() {
var nativeView = this.orientation === "horizontal" ? new org.nativescript.widgets.HorizontalScrollView(this._context) : new org.nativescript.widgets.VerticalScrollView(this._context);
if (this._androidViewId < 0) {
this._androidViewId = android.view.View.generateViewId();
}
nativeView.setId(this._androidViewId);
return nativeView;
};
ScrollView.prototype._onOrientationChanged = function() {
if (this.nativeView) {
var parent_1 = this.parent;
if (parent_1) {
parent_1._removeView(this);
parent_1._addView(this);
}
}
};
ScrollView.prototype.attachNative = function() {
var that = new WeakRef(this);
this.handler = new android.view.ViewTreeObserver.OnScrollChangedListener({
onScrollChanged: function() {
var owner = that.get();
if (owner) {
owner._onScrollChanged();
}
}
});
this.nativeView.getViewTreeObserver().addOnScrollChangedListener(this.handler);
};
ScrollView.prototype._onScrollChanged = function() {
var nativeView = this.nativeView;
if (nativeView) {
var newScrollX = nativeView.getScrollX();
var newScrollY = nativeView.getScrollY();
if (newScrollX !== this._lastScrollX || newScrollY !== this._lastScrollY) {
this.notify({
object: this,
eventName: ScrollView.scrollEvent,
scrollX: newScrollX / scroll_view_common_1.layout.getDisplayDensity(),
scrollY: newScrollY / scroll_view_common_1.layout.getDisplayDensity()
});
this._lastScrollX = newScrollX;
this._lastScrollY = newScrollY;
}
}
};
ScrollView.prototype.dettachNative = function() {
this.nativeView.getViewTreeObserver().removeOnScrollChangedListener(this.handler);
this.handler = null;
};
return ScrollView;
}(scroll_view_common_1.ScrollViewBase);
exports.ScrollView = ScrollView;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var content_view_1 = __webpack_require__(99);
__export(__webpack_require__(99));
var ScrollViewBase = function(_super) {
__extends(ScrollViewBase, _super);
function ScrollViewBase() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._scrollChangeCount = 0;
return _this;
}
ScrollViewBase.prototype.addEventListener = function(arg, callback, thisArg) {
_super.prototype.addEventListener.call(this, arg, callback, thisArg);
if (arg === ScrollViewBase.scrollEvent) {
this._scrollChangeCount++;
this.attach();
}
};
ScrollViewBase.prototype.removeEventListener = function(arg, callback, thisArg) {
_super.prototype.addEventListener.call(this, arg, callback, thisArg);
if (arg === ScrollViewBase.scrollEvent) {
this._scrollChangeCount--;
this.dettach();
}
};
ScrollViewBase.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
this.attach();
};
ScrollViewBase.prototype.onUnloaded = function() {
_super.prototype.onUnloaded.call(this);
this.dettach();
};
ScrollViewBase.prototype.attach = function() {
if (this._scrollChangeCount > 0 && this.isLoaded) {
this.attachNative();
}
};
ScrollViewBase.prototype.dettach = function() {
if (this._scrollChangeCount === 0 && this.isLoaded) {
this.dettachNative();
}
};
ScrollViewBase.prototype.attachNative = function() {};
ScrollViewBase.prototype.dettachNative = function() {};
Object.defineProperty(ScrollViewBase.prototype, "horizontalOffset", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollViewBase.prototype, "verticalOffset", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollViewBase.prototype, "scrollableWidth", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollViewBase.prototype, "scrollableHeight", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
return ScrollViewBase;
}(content_view_1.ContentView);
ScrollViewBase.scrollEvent = "scroll";
exports.ScrollViewBase = ScrollViewBase;
var converter = content_view_1.makeParser(content_view_1.makeValidator("horizontal", "vertical"));
exports.orientationProperty = new content_view_1.Property({
name: "orientation",
defaultValue: "vertical",
affectsLayout: true,
valueChanged: function(target, oldValue, newValue) {
target._onOrientationChanged();
},
valueConverter: converter
});
exports.orientationProperty.register(ScrollViewBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var font_1 = __webpack_require__(29);
var search_bar_common_1 = __webpack_require__(139);
var utils_1 = __webpack_require__(14);
__export(__webpack_require__(139));
var SEARCHTEXT = Symbol("searchText");
var QUERY = Symbol("query");
var QueryTextListener;
var CloseListener;
function initializeNativeClasses() {
if (QueryTextListener) {
return;
}
var QueryTextListenerImpl = function(_super) {
__extends(QueryTextListenerImpl, _super);
function QueryTextListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
QueryTextListenerImpl.prototype.onQueryTextChange = function(newText) {
var owner = this.owner;
search_bar_common_1.textProperty.nativeValueChange(owner, newText);
if (newText === "" && this[SEARCHTEXT] !== newText) {
owner._emit(search_bar_common_1.SearchBarBase.clearEvent);
}
this[SEARCHTEXT] = newText;
return true;
};
QueryTextListenerImpl.prototype.onQueryTextSubmit = function(query) {
var owner = this.owner;
if (query !== "" && this[QUERY] !== query) {
owner._emit(search_bar_common_1.SearchBarBase.submitEvent);
}
this[QUERY] = query;
return true;
};
return QueryTextListenerImpl;
}(java.lang.Object);
QueryTextListenerImpl = __decorate([ Interfaces([ android.widget.SearchView.OnQueryTextListener ]) ], QueryTextListenerImpl);
var CloseListenerImpl = function(_super) {
__extends(CloseListenerImpl, _super);
function CloseListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
CloseListenerImpl.prototype.onClose = function() {
this.owner._emit(search_bar_common_1.SearchBarBase.clearEvent);
return true;
};
return CloseListenerImpl;
}(java.lang.Object);
CloseListenerImpl = __decorate([ Interfaces([ android.widget.SearchView.OnCloseListener ]) ], CloseListenerImpl);
QueryTextListener = QueryTextListenerImpl;
CloseListener = CloseListenerImpl;
}
var SearchBar = function(_super) {
__extends(SearchBar, _super);
function SearchBar() {
return _super !== null && _super.apply(this, arguments) || this;
}
SearchBar.prototype.dismissSoftInput = function() {
utils_1.ad.dismissSoftInput(this.nativeView);
};
SearchBar.prototype.focus = function() {
var result = _super.prototype.focus.call(this);
if (result) {
utils_1.ad.showSoftInput(this.nativeView);
}
return result;
};
SearchBar.prototype.createNativeView = function() {
initializeNativeClasses();
var nativeView = new android.widget.SearchView(this._context);
nativeView.setIconified(false);
var queryTextListener = new QueryTextListener(this);
nativeView.setOnQueryTextListener(queryTextListener);
nativeView.queryTextListener = queryTextListener;
var closeListener = new CloseListener(this);
nativeView.setOnCloseListener(closeListener);
nativeView.closeListener = closeListener;
return nativeView;
};
SearchBar.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
var nativeView = this.nativeView;
nativeView.closeListener.owner = this;
nativeView.queryTextListener.owner = this;
};
SearchBar.prototype.disposeNativeView = function() {
var nativeView = this.nativeView;
nativeView.closeListener.owner = null;
nativeView.queryTextListener.owner = null;
_super.prototype.disposeNativeView.call(this);
};
SearchBar.prototype[search_bar_common_1.backgroundColorProperty.getDefault] = function() {
var result = this.nativeView.getDrawingCacheBackgroundColor();
return result;
};
SearchBar.prototype[search_bar_common_1.backgroundColorProperty.setNative] = function(value) {
var color;
if (typeof value === "number") {
color = value;
} else {
color = value.android;
}
this.nativeView.setBackgroundColor(color);
var searchPlate = this._getSearchPlate();
searchPlate.setBackgroundColor(color);
};
SearchBar.prototype[search_bar_common_1.colorProperty.getDefault] = function() {
var textView = this._getTextView();
return textView.getCurrentTextColor();
};
SearchBar.prototype[search_bar_common_1.colorProperty.setNative] = function(value) {
var color = typeof value === "number" ? value : value.android;
var textView = this._getTextView();
textView.setTextColor(color);
};
SearchBar.prototype[search_bar_common_1.fontSizeProperty.getDefault] = function() {
return {
nativeSize: this._getTextView().getTextSize()
};
};
SearchBar.prototype[search_bar_common_1.fontSizeProperty.setNative] = function(value) {
if (typeof value === "number") {
this._getTextView().setTextSize(value);
} else {
this._getTextView().setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, value.nativeSize);
}
};
SearchBar.prototype[search_bar_common_1.fontInternalProperty.getDefault] = function() {
return this._getTextView().getTypeface();
};
SearchBar.prototype[search_bar_common_1.fontInternalProperty.setNative] = function(value) {
this._getTextView().setTypeface(value instanceof font_1.Font ? value.getAndroidTypeface() : value);
};
SearchBar.prototype[search_bar_common_1.backgroundInternalProperty.getDefault] = function() {
return null;
};
SearchBar.prototype[search_bar_common_1.backgroundInternalProperty.setNative] = function(value) {};
SearchBar.prototype[search_bar_common_1.textProperty.getDefault] = function() {
return "";
};
SearchBar.prototype[search_bar_common_1.textProperty.setNative] = function(value) {
var text = value === null || value === undefined ? "" : value.toString();
this.nativeView.setQuery(text, false);
};
SearchBar.prototype[search_bar_common_1.hintProperty.getDefault] = function() {
return "";
};
SearchBar.prototype[search_bar_common_1.hintProperty.setNative] = function(value) {
var text = value === null || value === undefined ? "" : value.toString();
this.nativeView.setQueryHint(text);
};
SearchBar.prototype[search_bar_common_1.textFieldBackgroundColorProperty.getDefault] = function() {
var textView = this._getTextView();
return textView.getCurrentTextColor();
};
SearchBar.prototype[search_bar_common_1.textFieldBackgroundColorProperty.setNative] = function(value) {
var textView = this._getTextView();
var color = value instanceof search_bar_common_1.Color ? value.android : value;
textView.setBackgroundColor(color);
};
SearchBar.prototype[search_bar_common_1.textFieldHintColorProperty.getDefault] = function() {
var textView = this._getTextView();
return textView.getCurrentTextColor();
};
SearchBar.prototype[search_bar_common_1.textFieldHintColorProperty.setNative] = function(value) {
var textView = this._getTextView();
var color = value instanceof search_bar_common_1.Color ? value.android : value;
textView.setHintTextColor(color);
};
SearchBar.prototype._getTextView = function() {
var id = this.nativeView.getContext().getResources().getIdentifier("android:id/search_src_text", null, null);
return this.nativeView.findViewById(id);
};
SearchBar.prototype._getSearchPlate = function() {
var id = this.nativeView.getContext().getResources().getIdentifier("android:id/search_plate", null, null);
return this.nativeView.findViewById(id);
};
return SearchBar;
}(search_bar_common_1.SearchBarBase);
exports.SearchBar = SearchBar;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var SearchBarBase = function(_super) {
__extends(SearchBarBase, _super);
function SearchBarBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return SearchBarBase;
}(view_1.View);
SearchBarBase.submitEvent = "submit";
SearchBarBase.clearEvent = "clear";
exports.SearchBarBase = SearchBarBase;
exports.textProperty = new view_1.Property({
name: "text",
defaultValue: "",
affectsLayout: view_1.isIOS
});
exports.textProperty.register(SearchBarBase);
exports.hintProperty = new view_1.Property({
name: "hint",
defaultValue: ""
});
exports.hintProperty.register(SearchBarBase);
exports.textFieldHintColorProperty = new view_1.Property({
name: "textFieldHintColor",
equalityComparer: view_1.Color.equals,
valueConverter: function(v) {
return new view_1.Color(v);
}
});
exports.textFieldHintColorProperty.register(SearchBarBase);
exports.textFieldBackgroundColorProperty = new view_1.Property({
name: "textFieldBackgroundColor",
equalityComparer: view_1.Color.equals,
valueConverter: function(v) {
return new view_1.Color(v);
}
});
exports.textFieldBackgroundColorProperty.register(SearchBarBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var font_1 = __webpack_require__(29);
var segmented_bar_common_1 = __webpack_require__(141);
__export(__webpack_require__(141));
var R_ID_TABS = 16908307;
var R_ID_TABCONTENT = 16908305;
var R_ATTR_STATE_SELECTED = 16842913;
var TITLE_TEXT_VIEW_ID = 16908310;
var apiLevel;
var selectedIndicatorThickness;
var TabHost;
var TabChangeListener;
var TabContentFactory;
function initializeNativeClasses() {
if (TabChangeListener) {
return;
}
apiLevel = android.os.Build.VERSION.SDK_INT;
selectedIndicatorThickness = segmented_bar_common_1.layout.toDevicePixels(apiLevel >= 21 ? 2 : 5);
var TabChangeListenerImpl = function(_super) {
__extends(TabChangeListenerImpl, _super);
function TabChangeListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
TabChangeListenerImpl.prototype.onTabChanged = function(id) {
var owner = this.owner;
if (owner.shouldChangeSelectedIndex()) {
owner.selectedIndex = parseInt(id);
}
};
return TabChangeListenerImpl;
}(java.lang.Object);
TabChangeListenerImpl = __decorate([ Interfaces([ android.widget.TabHost.OnTabChangeListener ]) ], TabChangeListenerImpl);
var TabContentFactoryImpl = function(_super) {
__extends(TabContentFactoryImpl, _super);
function TabContentFactoryImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
TabContentFactoryImpl.prototype.createTabContent = function(tag) {
var tv = new android.widget.TextView(this.owner._context);
tv.setVisibility(android.view.View.GONE);
tv.setMaxLines(1);
tv.setEllipsize(android.text.TextUtils.TruncateAt.END);
return tv;
};
return TabContentFactoryImpl;
}(java.lang.Object);
TabContentFactoryImpl = __decorate([ Interfaces([ android.widget.TabHost.TabContentFactory ]) ], TabContentFactoryImpl);
var TabHostImpl = function(_super) {
__extends(TabHostImpl, _super);
function TabHostImpl(context, attrs) {
var _this = _super.call(this, context, attrs) || this;
return global.__native(_this);
}
TabHostImpl.prototype.onAttachedToWindow = function() {};
return TabHostImpl;
}(android.widget.TabHost);
TabHost = TabHostImpl;
TabChangeListener = TabChangeListenerImpl;
TabContentFactory = TabContentFactoryImpl;
}
var SegmentedBarItem = function(_super) {
__extends(SegmentedBarItem, _super);
function SegmentedBarItem() {
return _super !== null && _super.apply(this, arguments) || this;
}
SegmentedBarItem.prototype.createNativeView = function() {
return this.nativeView;
};
SegmentedBarItem.prototype.setupNativeView = function(tabIndex) {
var titleTextView = this.parent.nativeView.getTabWidget().getChildAt(tabIndex).findViewById(TITLE_TEXT_VIEW_ID);
this.nativeView = titleTextView;
if (titleTextView) {
segmented_bar_common_1.initNativeView(this);
if (this.titleDirty) {
this._update();
}
}
};
SegmentedBarItem.prototype._update = function() {
var tv = this.nativeView;
if (tv) {
var title = this.title;
title = title === null || title === undefined ? "" : title;
tv.setText(title);
this.titleDirty = false;
} else {
this.titleDirty = true;
}
};
SegmentedBarItem.prototype[segmented_bar_common_1.colorProperty.getDefault] = function() {
return this.nativeView.getCurrentTextColor();
};
SegmentedBarItem.prototype[segmented_bar_common_1.colorProperty.setNative] = function(value) {
var color = value instanceof segmented_bar_common_1.Color ? value.android : value;
this.nativeView.setTextColor(color);
};
SegmentedBarItem.prototype[segmented_bar_common_1.fontSizeProperty.getDefault] = function() {
return {
nativeSize: this.nativeView.getTextSize()
};
};
SegmentedBarItem.prototype[segmented_bar_common_1.fontSizeProperty.setNative] = function(value) {
if (typeof value === "number") {
this.nativeView.setTextSize(value);
} else {
this.nativeView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, value.nativeSize);
}
};
SegmentedBarItem.prototype[segmented_bar_common_1.fontInternalProperty.getDefault] = function() {
return this.nativeView.getTypeface();
};
SegmentedBarItem.prototype[segmented_bar_common_1.fontInternalProperty.setNative] = function(value) {
this.nativeView.setTypeface(value instanceof font_1.Font ? value.getAndroidTypeface() : value);
};
SegmentedBarItem.prototype[segmented_bar_common_1.selectedBackgroundColorProperty.getDefault] = function() {
var viewGroup = this.nativeView.getParent();
return viewGroup.getBackground().getConstantState();
};
SegmentedBarItem.prototype[segmented_bar_common_1.selectedBackgroundColorProperty.setNative] = function(value) {
var viewGroup = this.nativeView.getParent();
if (value instanceof segmented_bar_common_1.Color) {
var color = value.android;
var backgroundDrawable = viewGroup.getBackground();
if (apiLevel > 21 && backgroundDrawable && typeof backgroundDrawable.setColorFilter === "function") {
var newDrawable = backgroundDrawable.getConstantState().newDrawable();
newDrawable.setColorFilter(color, android.graphics.PorterDuff.Mode.SRC_IN);
org.nativescript.widgets.ViewHelper.setBackground(viewGroup, newDrawable);
} else {
var stateDrawable = new android.graphics.drawable.StateListDrawable();
var colorDrawable = new org.nativescript.widgets.SegmentedBarColorDrawable(color, selectedIndicatorThickness);
var arr = Array.create("int", 1);
arr[0] = R_ATTR_STATE_SELECTED;
stateDrawable.addState(arr, colorDrawable);
stateDrawable.setBounds(0, 15, viewGroup.getRight(), viewGroup.getBottom());
org.nativescript.widgets.ViewHelper.setBackground(viewGroup, stateDrawable);
}
} else {
org.nativescript.widgets.ViewHelper.setBackground(viewGroup, value.newDrawable());
}
};
return SegmentedBarItem;
}(segmented_bar_common_1.SegmentedBarItemBase);
exports.SegmentedBarItem = SegmentedBarItem;
var SegmentedBar = function(_super) {
__extends(SegmentedBar, _super);
function SegmentedBar() {
return _super !== null && _super.apply(this, arguments) || this;
}
SegmentedBar.prototype.shouldChangeSelectedIndex = function() {
return !this._addingTab;
};
SegmentedBar.prototype.createNativeView = function() {
initializeNativeClasses();
var context = this._context;
var nativeView = new TabHost(context, null);
var tabHostLayout = new android.widget.LinearLayout(context);
tabHostLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
var tabWidget = new android.widget.TabWidget(context);
tabWidget.setId(R_ID_TABS);
tabHostLayout.addView(tabWidget);
var frame = new android.widget.FrameLayout(context);
frame.setId(R_ID_TABCONTENT);
frame.setVisibility(android.view.View.GONE);
tabHostLayout.addView(frame);
nativeView.addView(tabHostLayout);
var listener = new TabChangeListener(this);
nativeView.setOnTabChangedListener(listener);
nativeView.listener = listener;
nativeView.setup();
return nativeView;
};
SegmentedBar.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
var nativeView = this.nativeView;
nativeView.listener.owner = this;
this._tabContentFactory = this._tabContentFactory || new TabContentFactory(this);
};
SegmentedBar.prototype.disposeNativeView = function() {
var nativeView = this.nativeView;
nativeView.listener.owner = null;
_super.prototype.disposeNativeView.call(this);
};
SegmentedBar.prototype.insertTab = function(tabItem, index) {
var tabHost = this.nativeView;
var tab = tabHost.newTabSpec(index + "");
tab.setIndicator(tabItem.title + "");
tab.setContent(this._tabContentFactory);
this._addingTab = true;
tabHost.addTab(tab);
tabItem.setupNativeView(index);
this._addingTab = false;
};
SegmentedBar.prototype[segmented_bar_common_1.selectedIndexProperty.getDefault] = function() {
return -1;
};
SegmentedBar.prototype[segmented_bar_common_1.selectedIndexProperty.setNative] = function(value) {
this.nativeView.setCurrentTab(value);
};
SegmentedBar.prototype[segmented_bar_common_1.itemsProperty.getDefault] = function() {
return null;
};
SegmentedBar.prototype[segmented_bar_common_1.itemsProperty.setNative] = function(value) {
var _this = this;
this.nativeView.clearAllTabs();
var newItems = value;
if (newItems) {
newItems.forEach(function(item, i, arr) {
return _this.insertTab(item, i);
});
}
segmented_bar_common_1.selectedIndexProperty.coerce(this);
};
return SegmentedBar;
}(segmented_bar_common_1.SegmentedBarBase);
exports.SegmentedBar = SegmentedBar;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var knownCollections;
(function(knownCollections) {
knownCollections.items = "items";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var SegmentedBarItemBase = function(_super) {
__extends(SegmentedBarItemBase, _super);
function SegmentedBarItemBase() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._title = "";
return _this;
}
Object.defineProperty(SegmentedBarItemBase.prototype, "title", {
get: function() {
return this._title;
},
set: function(value) {
var strValue = value !== null && value !== undefined ? value.toString() : "";
if (this._title !== strValue) {
this._title = strValue;
this._update();
}
},
enumerable: true,
configurable: true
});
return SegmentedBarItemBase;
}(view_1.ViewBase);
exports.SegmentedBarItemBase = SegmentedBarItemBase;
var SegmentedBarBase = function(_super) {
__extends(SegmentedBarBase, _super);
function SegmentedBarBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(SegmentedBarBase.prototype, "selectedBackgroundColor", {
get: function() {
return this.style.selectedBackgroundColor;
},
set: function(value) {
this.style.selectedBackgroundColor = value;
},
enumerable: true,
configurable: true
});
SegmentedBarBase.prototype._addArrayFromBuilder = function(name, value) {
if (name === "items") {
this.items = value;
}
};
SegmentedBarBase.prototype._addChildFromBuilder = function(name, value) {
if (name === "SegmentedBarItem") {
var item = value;
var items = this.items;
if (!items) {
items = new Array();
items.push(item);
this.items = items;
} else {
items.push(item);
this._addView(item);
}
if (this.nativeView) {
this[exports.itemsProperty.setNative](items);
}
}
};
SegmentedBarBase.prototype.onItemsChanged = function(oldItems, newItems) {
if (oldItems) {
for (var i = 0, count = oldItems.length; i < count; i++) {
this._removeView(oldItems[i]);
}
}
if (newItems) {
for (var i = 0, count = newItems.length; i < count; i++) {
this._addView(newItems[i]);
}
}
};
SegmentedBarBase.prototype.eachChild = function(callback) {
var items = this.items;
if (items) {
items.forEach(function(item, i) {
callback(item);
});
}
};
return SegmentedBarBase;
}(view_1.View);
SegmentedBarBase.selectedIndexChangedEvent = "selectedIndexChanged";
exports.SegmentedBarBase = SegmentedBarBase;
exports.selectedIndexProperty = new view_1.CoercibleProperty({
name: "selectedIndex",
defaultValue: -1,
valueChanged: function(target, oldValue, newValue) {
target.notify({
eventName: SegmentedBarBase.selectedIndexChangedEvent,
object: target,
oldIndex: oldValue,
newIndex: newValue
});
},
coerceValue: function(target, value) {
var items = target.items;
if (items) {
var max = items.length - 1;
if (value < 0) {
value = 0;
}
if (value > max) {
value = max;
}
} else {
value = -1;
}
return value;
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.selectedIndexProperty.register(SegmentedBarBase);
exports.itemsProperty = new view_1.Property({
name: "items",
valueChanged: function(target, oldValue, newValue) {
target.onItemsChanged(oldValue, newValue);
}
});
exports.itemsProperty.register(SegmentedBarBase);
exports.selectedBackgroundColorProperty = new view_1.InheritedCssProperty({
name: "selectedBackgroundColor",
cssName: "selected-background-color",
equalityComparer: view_1.Color.equals,
valueConverter: function(v) {
return new view_1.Color(v);
}
});
exports.selectedBackgroundColorProperty.register(view_1.Style);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var slider_common_1 = __webpack_require__(143);
__export(__webpack_require__(143));
var SeekBarChangeListener;
function initializeSeekBarChangeListener() {
if (SeekBarChangeListener) {
return;
}
var SeekBarChangeListenerImpl = function(_super) {
__extends(SeekBarChangeListenerImpl, _super);
function SeekBarChangeListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
SeekBarChangeListenerImpl.prototype.onProgressChanged = function(seekBar, progress, fromUser) {
var owner = this.owner;
if (!owner._supressNativeValue) {
var newValue = seekBar.getProgress() + owner.minValue;
slider_common_1.valueProperty.nativeValueChange(owner, newValue);
}
};
SeekBarChangeListenerImpl.prototype.onStartTrackingTouch = function(seekBar) {};
SeekBarChangeListenerImpl.prototype.onStopTrackingTouch = function(seekBar) {};
return SeekBarChangeListenerImpl;
}(java.lang.Object);
SeekBarChangeListenerImpl = __decorate([ Interfaces([ android.widget.SeekBar.OnSeekBarChangeListener ]) ], SeekBarChangeListenerImpl);
SeekBarChangeListener = SeekBarChangeListenerImpl;
}
var Slider = function(_super) {
__extends(Slider, _super);
function Slider() {
return _super !== null && _super.apply(this, arguments) || this;
}
Slider.prototype.createNativeView = function() {
initializeSeekBarChangeListener();
var listener = new SeekBarChangeListener(this);
var nativeView = new android.widget.SeekBar(this._context);
nativeView.setOnSeekBarChangeListener(listener);
nativeView.listener = listener;
return nativeView;
};
Slider.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
var nativeView = this.nativeView;
nativeView.listener.owner = this;
};
Slider.prototype.disposeNativeView = function() {
var nativeView = this.nativeView;
nativeView.listener.owner = null;
_super.prototype.disposeNativeView.call(this);
};
Slider.prototype.setNativeValuesSilently = function(newValue, newMaxValue) {
this._supressNativeValue = true;
var nativeView = this.nativeView;
try {
nativeView.setMax(newMaxValue);
nativeView.setProgress(newValue);
} finally {
this._supressNativeValue = false;
}
};
Slider.prototype[slider_common_1.valueProperty.getDefault] = function() {
return 0;
};
Slider.prototype[slider_common_1.valueProperty.setNative] = function(value) {
this.setNativeValuesSilently(value - this.minValue, this.maxValue - this.minValue);
};
Slider.prototype[slider_common_1.minValueProperty.getDefault] = function() {
return 0;
};
Slider.prototype[slider_common_1.minValueProperty.setNative] = function(value) {
this.setNativeValuesSilently(this.value - value, this.maxValue - value);
};
Slider.prototype[slider_common_1.maxValueProperty.getDefault] = function() {
return 100;
};
Slider.prototype[slider_common_1.maxValueProperty.setNative] = function(value) {
this.nativeView.setMax(value - this.minValue);
};
Slider.prototype[slider_common_1.colorProperty.getDefault] = function() {
return -1;
};
Slider.prototype[slider_common_1.colorProperty.setNative] = function(value) {
if (value instanceof slider_common_1.Color) {
this.nativeView.getThumb().setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
} else {
this.nativeView.getThumb().clearColorFilter();
}
};
Slider.prototype[slider_common_1.backgroundColorProperty.getDefault] = function() {
return -1;
};
Slider.prototype[slider_common_1.backgroundColorProperty.setNative] = function(value) {
if (value instanceof slider_common_1.Color) {
this.nativeView.getProgressDrawable().setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
} else {
this.nativeView.getProgressDrawable().clearColorFilter();
}
};
Slider.prototype[slider_common_1.backgroundInternalProperty.getDefault] = function() {
return null;
};
Slider.prototype[slider_common_1.backgroundInternalProperty.setNative] = function(value) {};
return Slider;
}(slider_common_1.SliderBase);
exports.Slider = Slider;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var SliderBase = function(_super) {
__extends(SliderBase, _super);
function SliderBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return SliderBase;
}(view_1.View);
exports.SliderBase = SliderBase;
exports.valueProperty = new view_1.CoercibleProperty({
name: "value",
defaultValue: 0,
coerceValue: function(target, value) {
value = Math.max(value, target.minValue);
value = Math.min(value, target.maxValue);
return value;
},
valueConverter: function(v) {
return view_1.isIOS ? parseFloat(v) : parseInt(v);
}
});
exports.valueProperty.register(SliderBase);
exports.minValueProperty = new view_1.Property({
name: "minValue",
defaultValue: 0,
valueChanged: function(target, oldValue, newValue) {
exports.maxValueProperty.coerce(target);
exports.valueProperty.coerce(target);
},
valueConverter: function(v) {
return view_1.isIOS ? parseFloat(v) : parseInt(v);
}
});
exports.minValueProperty.register(SliderBase);
exports.maxValueProperty = new view_1.CoercibleProperty({
name: "maxValue",
defaultValue: 100,
coerceValue: function(target, value) {
var minValue = target.minValue;
if (value < minValue) {
value = minValue;
}
return value;
},
valueChanged: function(target, oldValue, newValue) {
return exports.valueProperty.coerce(target);
},
valueConverter: function(v) {
return view_1.isIOS ? parseFloat(v) : parseInt(v);
}
});
exports.maxValueProperty.register(SliderBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var switch_common_1 = __webpack_require__(145);
__export(__webpack_require__(145));
var CheckedChangeListener;
function initializeCheckedChangeListener() {
if (CheckedChangeListener) {
return;
}
var CheckedChangeListenerImpl = function(_super) {
__extends(CheckedChangeListenerImpl, _super);
function CheckedChangeListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
CheckedChangeListenerImpl.prototype.onCheckedChanged = function(buttonView, isChecked) {
var owner = this.owner;
switch_common_1.checkedProperty.nativeValueChange(owner, isChecked);
};
return CheckedChangeListenerImpl;
}(java.lang.Object);
CheckedChangeListenerImpl = __decorate([ Interfaces([ android.widget.CompoundButton.OnCheckedChangeListener ]) ], CheckedChangeListenerImpl);
CheckedChangeListener = CheckedChangeListenerImpl;
}
var Switch = function(_super) {
__extends(Switch, _super);
function Switch() {
return _super !== null && _super.apply(this, arguments) || this;
}
Switch.prototype.createNativeView = function() {
initializeCheckedChangeListener();
var nativeView = new android.widget.Switch(this._context);
var listener = new CheckedChangeListener(this);
nativeView.setOnCheckedChangeListener(listener);
nativeView.listener = listener;
return nativeView;
};
Switch.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
var nativeView = this.nativeView;
nativeView.listener.owner = this;
};
Switch.prototype.disposeNativeView = function() {
var nativeView = this.nativeView;
nativeView.listener.owner = null;
_super.prototype.disposeNativeView.call(this);
};
Switch.prototype[switch_common_1.checkedProperty.getDefault] = function() {
return false;
};
Switch.prototype[switch_common_1.checkedProperty.setNative] = function(value) {
this.nativeView.setChecked(value);
};
Switch.prototype[switch_common_1.colorProperty.getDefault] = function() {
return -1;
};
Switch.prototype[switch_common_1.colorProperty.setNative] = function(value) {
if (value instanceof switch_common_1.Color) {
this.nativeView.getThumbDrawable().setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
} else {
this.nativeView.getThumbDrawable().clearColorFilter();
}
};
Switch.prototype[switch_common_1.backgroundColorProperty.getDefault] = function() {
return -1;
};
Switch.prototype[switch_common_1.backgroundColorProperty.setNative] = function(value) {
if (value instanceof switch_common_1.Color) {
this.nativeView.getTrackDrawable().setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
} else {
this.nativeView.getTrackDrawable().clearColorFilter();
}
};
Switch.prototype[switch_common_1.backgroundInternalProperty.getDefault] = function() {
return null;
};
Switch.prototype[switch_common_1.backgroundInternalProperty.setNative] = function(value) {};
return Switch;
}(switch_common_1.SwitchBase);
exports.Switch = Switch;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
var SwitchBase = function(_super) {
__extends(SwitchBase, _super);
function SwitchBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return SwitchBase;
}(view_1.View);
exports.SwitchBase = SwitchBase;
exports.checkedProperty = new view_1.Property({
name: "checked",
defaultValue: false,
valueConverter: view_1.booleanConverter
});
exports.checkedProperty.register(SwitchBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var font_1 = __webpack_require__(29);
var tab_view_common_1 = __webpack_require__(147);
var text_base_1 = __webpack_require__(69);
var image_source_1 = __webpack_require__(83);
var utils_1 = __webpack_require__(14);
__export(__webpack_require__(147));
var VIEWS_STATES = "_viewStates";
var ACCENT_COLOR = "colorAccent";
var PRIMARY_COLOR = "colorPrimary";
var DEFAULT_ELEVATION = 4;
var PagerAdapter;
var PageChangedListener;
function initializeNativeClasses() {
if (PagerAdapter) {
return;
}
var PagerAdapterImpl = function(_super) {
__extends(PagerAdapterImpl, _super);
function PagerAdapterImpl(owner, items) {
var _this = _super.call(this) || this;
_this.owner = owner;
_this.items = items;
return global.__native(_this);
}
PagerAdapterImpl.prototype.getCount = function() {
return this.items ? this.items.length : 0;
};
PagerAdapterImpl.prototype.getPageTitle = function(index) {
if (index < 0 || index >= this.items.length) {
return "";
}
return this.items[index].title;
};
PagerAdapterImpl.prototype.instantiateItem = function(container, index) {
if (tab_view_common_1.traceEnabled()) {
tab_view_common_1.traceWrite("TabView.PagerAdapter.instantiateItem; container: " + container + "; index: " + index, tab_view_common_1.traceCategory);
}
var item = this.items[index];
if (this[VIEWS_STATES]) {
if (tab_view_common_1.traceEnabled()) {
tab_view_common_1.traceWrite("TabView.PagerAdapter.instantiateItem; restoreHierarchyState: " + item.view, tab_view_common_1.traceCategory);
}
item.view.nativeView.restoreHierarchyState(this[VIEWS_STATES]);
}
if (item.view.nativeView) {
container.addView(item.view.nativeView);
}
return item.view.nativeView;
};
PagerAdapterImpl.prototype.destroyItem = function(container, index, _object) {
if (tab_view_common_1.traceEnabled()) {
tab_view_common_1.traceWrite("TabView.PagerAdapter.destroyItem; container: " + container + "; index: " + index + "; _object: " + _object, tab_view_common_1.traceCategory);
}
var item = this.items[index];
var nativeView = item.view.nativeView;
if (!nativeView || !_object) {
return;
}
if (nativeView.toString() !== _object.toString()) {
throw new Error("Expected " + nativeView.toString() + " to equal " + _object.toString());
}
container.removeView(nativeView);
};
PagerAdapterImpl.prototype.isViewFromObject = function(view, _object) {
return view === _object;
};
PagerAdapterImpl.prototype.saveState = function() {
if (tab_view_common_1.traceEnabled()) {
tab_view_common_1.traceWrite("TabView.PagerAdapter.saveState", tab_view_common_1.traceCategory);
}
var owner = this.owner;
if (owner._childrenCount === 0) {
return null;
}
if (!this[VIEWS_STATES]) {
this[VIEWS_STATES] = new android.util.SparseArray();
}
var viewStates = this[VIEWS_STATES];
var childCallback = function(view) {
var nativeView = view.nativeView;
if (nativeView && nativeView.isSaveFromParentEnabled && nativeView.isSaveFromParentEnabled()) {
nativeView.saveHierarchyState(viewStates);
}
return true;
};
owner.eachChildView(childCallback);
var bundle = new android.os.Bundle();
bundle.putSparseParcelableArray(VIEWS_STATES, viewStates);
return bundle;
};
PagerAdapterImpl.prototype.restoreState = function(state, loader) {
if (tab_view_common_1.traceEnabled()) {
tab_view_common_1.traceWrite("TabView.PagerAdapter.restoreState", tab_view_common_1.traceCategory);
}
var bundle = state;
bundle.setClassLoader(loader);
this[VIEWS_STATES] = bundle.getSparseParcelableArray(VIEWS_STATES);
};
return PagerAdapterImpl;
}(android.support.v4.view.PagerAdapter);
var PageChangedListenerImpl = function(_super) {
__extends(PageChangedListenerImpl, _super);
function PageChangedListenerImpl(owner) {
var _this = _super.call(this) || this;
_this._owner = owner;
return global.__native(_this);
}
PageChangedListenerImpl.prototype.onPageSelected = function(position) {
this._owner.selectedIndex = position;
};
return PageChangedListenerImpl;
}(android.support.v4.view.ViewPager.SimpleOnPageChangeListener);
PagerAdapter = PagerAdapterImpl;
PageChangedListener = PageChangedListenerImpl;
}
function createTabItemSpec(item) {
var result = new org.nativescript.widgets.TabItemSpec();
result.title = item.title;
if (item.iconSource) {
if (item.iconSource.indexOf(utils_1.RESOURCE_PREFIX) === 0) {
result.iconId = utils_1.ad.resources.getDrawableId(item.iconSource.substr(utils_1.RESOURCE_PREFIX.length));
} else {
var is = image_source_1.fromFileOrResource(item.iconSource);
if (is) {
result.iconDrawable = new android.graphics.drawable.BitmapDrawable(is.android);
}
}
}
return result;
}
var defaultAccentColor = undefined;
function getDefaultAccentColor(context) {
if (defaultAccentColor === undefined) {
defaultAccentColor = utils_1.ad.resources.getPalleteColor(ACCENT_COLOR, context) || 4281578981;
}
return defaultAccentColor;
}
var TabViewItem = function(_super) {
__extends(TabViewItem, _super);
function TabViewItem() {
return _super !== null && _super.apply(this, arguments) || this;
}
TabViewItem.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
if (this.nativeView) {
this._defaultTransformationMethod = this.nativeView.getTransformationMethod();
}
};
TabViewItem.prototype.resetNativeView = function() {
_super.prototype.resetNativeView.call(this);
if (this.nativeView) {
this.nativeView.setTransformationMethod(this._defaultTransformationMethod);
}
};
TabViewItem.prototype.createNativeView = function() {
return this.nativeView;
};
TabViewItem.prototype.setNativeView = function(textView) {
this.nativeView = textView;
if (textView) {
tab_view_common_1.initNativeView(this);
}
};
TabViewItem.prototype._update = function() {
var tv = this.nativeView;
if (tv) {
var tabLayout = tv.getParent();
tabLayout.updateItemAt(this.index, this.tabItemSpec);
}
};
TabViewItem.prototype[tab_view_common_1.fontSizeProperty.getDefault] = function() {
return {
nativeSize: this.nativeView.getTextSize()
};
};
TabViewItem.prototype[tab_view_common_1.fontSizeProperty.setNative] = function(value) {
if (typeof value === "number") {
this.nativeView.setTextSize(value);
} else {
this.nativeView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, value.nativeSize);
}
};
TabViewItem.prototype[tab_view_common_1.fontInternalProperty.getDefault] = function() {
return this.nativeView.getTypeface();
};
TabViewItem.prototype[tab_view_common_1.fontInternalProperty.setNative] = function(value) {
this.nativeView.setTypeface(value instanceof font_1.Font ? value.getAndroidTypeface() : value);
};
TabViewItem.prototype[text_base_1.textTransformProperty.getDefault] = function() {
return "default";
};
TabViewItem.prototype[text_base_1.textTransformProperty.setNative] = function(value) {
var tv = this.nativeView;
if (value === "default") {
tv.setTransformationMethod(this._defaultTransformationMethod);
tv.setText(this.title);
} else {
var result = text_base_1.getTransformedText(this.title, value);
tv.setText(result);
tv.setTransformationMethod(null);
}
};
return TabViewItem;
}(tab_view_common_1.TabViewItemBase);
exports.TabViewItem = TabViewItem;
function setElevation(grid, tabLayout) {
var compat = android.support.v4.view.ViewCompat;
if (compat.setElevation) {
var val = DEFAULT_ELEVATION * tab_view_common_1.layout.getDisplayDensity();
compat.setElevation(grid, val);
compat.setElevation(tabLayout, val);
}
}
var TabView = function(_super) {
__extends(TabView, _super);
function TabView() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._androidViewId = -1;
return _this;
}
TabView.prototype.onItemsChanged = function(oldItems, newItems) {
_super.prototype.onItemsChanged.call(this, oldItems, newItems);
if (oldItems) {
oldItems.forEach(function(item, i, arr) {
item.index = 0;
item.tabItemSpec = null;
item.setNativeView(null);
});
}
};
TabView.prototype.createNativeView = function() {
initializeNativeClasses();
if (tab_view_common_1.traceEnabled()) {
tab_view_common_1.traceWrite("TabView._createUI(" + this + ");", tab_view_common_1.traceCategory);
}
var context = this._context;
var nativeView = new org.nativescript.widgets.GridLayout(context);
nativeView.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.auto));
nativeView.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.star));
var tabLayout = new org.nativescript.widgets.TabLayout(context);
nativeView.addView(tabLayout);
nativeView.tabLayout = tabLayout;
setElevation(nativeView, tabLayout);
var accentColor = getDefaultAccentColor(context);
if (accentColor) {
tabLayout.setSelectedIndicatorColors([ accentColor ]);
}
var primaryColor = utils_1.ad.resources.getPalleteColor(PRIMARY_COLOR, context);
if (primaryColor) {
tabLayout.setBackgroundColor(primaryColor);
}
var viewPager = new android.support.v4.view.ViewPager(context);
var lp = new org.nativescript.widgets.CommonLayoutParams();
lp.row = 1;
viewPager.setLayoutParams(lp);
nativeView.addView(viewPager);
nativeView.viewPager = viewPager;
var listener = new PageChangedListener(this);
viewPager.addOnPageChangeListener(listener);
viewPager.listener = listener;
var adapter = new PagerAdapter(this, null);
viewPager.setAdapter(adapter);
viewPager.adapter = adapter;
return nativeView;
};
TabView.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
if (this._androidViewId < 0) {
this._androidViewId = android.view.View.generateViewId();
}
var nativeView = this.nativeView;
this._tabLayout = nativeView.tabLayout;
var viewPager = nativeView.viewPager;
viewPager.setId(this._androidViewId);
this._viewPager = viewPager;
viewPager.listener.owner = this;
this._pagerAdapter = viewPager.adapter;
this._pagerAdapter.owner = this;
};
TabView.prototype.disposeNativeView = function() {
this._pagerAdapter.notifyDataSetChanged();
this._pagerAdapter.owner = null;
this._pagerAdapter = null;
this._tabLayout = null;
this._viewPager.listener.owner = null;
this._viewPager = null;
_super.prototype.disposeNativeView.call(this);
};
TabView.prototype.setAdapterItems = function(items) {
this._pagerAdapter.items = items;
var length = items ? items.length : 0;
if (length === 0) {
this._tabLayout.setItems(null, null);
return;
}
var tabItems = new Array();
items.forEach(function(item, i, arr) {
var tabItemSpec = createTabItemSpec(item);
item.index = i;
item.tabItemSpec = tabItemSpec;
tabItems.push(tabItemSpec);
});
var tabLayout = this._tabLayout;
tabLayout.setItems(tabItems, this._viewPager);
items.forEach(function(item, i, arr) {
var tv = tabLayout.getTextViewForItemAt(i);
item.setNativeView(tv);
});
this._pagerAdapter.notifyDataSetChanged();
};
TabView.prototype[tab_view_common_1.androidOffscreenTabLimitProperty.getDefault] = function() {
return this._viewPager.getOffscreenPageLimit();
};
TabView.prototype[tab_view_common_1.androidOffscreenTabLimitProperty.setNative] = function(value) {
this._viewPager.setOffscreenPageLimit(value);
};
TabView.prototype[tab_view_common_1.selectedIndexProperty.getDefault] = function() {
return -1;
};
TabView.prototype[tab_view_common_1.selectedIndexProperty.setNative] = function(value) {
if (tab_view_common_1.traceEnabled()) {
tab_view_common_1.traceWrite("TabView this._viewPager.setCurrentItem(" + value + ", true);", tab_view_common_1.traceCategory);
}
this._viewPager.setCurrentItem(value, true);
};
TabView.prototype[tab_view_common_1.itemsProperty.getDefault] = function() {
return null;
};
TabView.prototype[tab_view_common_1.itemsProperty.setNative] = function(value) {
this.setAdapterItems(value);
tab_view_common_1.selectedIndexProperty.coerce(this);
};
TabView.prototype[tab_view_common_1.tabBackgroundColorProperty.getDefault] = function() {
return this._tabLayout.getBackground().getConstantState();
};
TabView.prototype[tab_view_common_1.tabBackgroundColorProperty.setNative] = function(value) {
if (value instanceof tab_view_common_1.Color) {
this._tabLayout.setBackgroundColor(value.android);
} else {
this._tabLayout.setBackground(value ? value.newDrawable() : null);
}
};
TabView.prototype[tab_view_common_1.tabTextColorProperty.getDefault] = function() {
return this._tabLayout.getTabTextColor();
};
TabView.prototype[tab_view_common_1.tabTextColorProperty.setNative] = function(value) {
var color = value instanceof tab_view_common_1.Color ? value.android : value;
this._tabLayout.setTabTextColor(color);
};
TabView.prototype[tab_view_common_1.selectedTabTextColorProperty.getDefault] = function() {
return this._tabLayout.getSelectedTabTextColor();
};
TabView.prototype[tab_view_common_1.selectedTabTextColorProperty.setNative] = function(value) {
var color = value instanceof tab_view_common_1.Color ? value.android : value;
this._tabLayout.setSelectedTabTextColor(color);
};
TabView.prototype[tab_view_common_1.androidSelectedTabHighlightColorProperty.getDefault] = function() {
return getDefaultAccentColor(this._context);
};
TabView.prototype[tab_view_common_1.androidSelectedTabHighlightColorProperty.setNative] = function(value) {
var tabLayout = this._tabLayout;
var color = value instanceof tab_view_common_1.Color ? value.android : value;
tabLayout.setSelectedIndicatorColors([ color ]);
};
return TabView;
}(tab_view_common_1.TabViewBase);
exports.TabView = TabView;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
exports.traceCategory = "TabView";
var TabViewItemBase = function(_super) {
__extends(TabViewItemBase, _super);
function TabViewItemBase() {
var _this = _super !== null && _super.apply(this, arguments) || this;
_this._title = "";
return _this;
}
Object.defineProperty(TabViewItemBase.prototype, "textTransform", {
get: function() {
return this.style.textTransform;
},
set: function(value) {
this.style.textTransform = value;
},
enumerable: true,
configurable: true
});
TabViewItemBase.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof view_1.View) {
this.view = value;
}
};
Object.defineProperty(TabViewItemBase.prototype, "title", {
get: function() {
return this._title;
},
set: function(value) {
if (this._title !== value) {
this._title = value;
this._update();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewItemBase.prototype, "view", {
get: function() {
return this._view;
},
set: function(value) {
if (this._view !== value) {
if (this._view) {
throw new Error("Changing the view of an already loaded TabViewItem is not currently supported.");
}
this._view = value;
this._addView(value);
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewItemBase.prototype, "iconSource", {
get: function() {
return this._iconSource;
},
set: function(value) {
if (this._iconSource !== value) {
this._iconSource = value;
this._update();
}
},
enumerable: true,
configurable: true
});
TabViewItemBase.prototype.eachChild = function(callback) {
var view = this._view;
if (view) {
callback(view);
}
};
return TabViewItemBase;
}(view_1.ViewBase);
exports.TabViewItemBase = TabViewItemBase;
var knownCollections;
(function(knownCollections) {
knownCollections.items = "items";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var TabViewBase = function(_super) {
__extends(TabViewBase, _super);
function TabViewBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
Object.defineProperty(TabViewBase.prototype, "androidSelectedTabHighlightColor", {
get: function() {
return this.style.androidSelectedTabHighlightColor;
},
set: function(value) {
this.style.androidSelectedTabHighlightColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewBase.prototype, "tabTextColor", {
get: function() {
return this.style.tabTextColor;
},
set: function(value) {
this.style.tabTextColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewBase.prototype, "tabBackgroundColor", {
get: function() {
return this.style.tabBackgroundColor;
},
set: function(value) {
this.style.tabBackgroundColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewBase.prototype, "selectedTabTextColor", {
get: function() {
return this.style.selectedTabTextColor;
},
set: function(value) {
this.style.selectedTabTextColor = value;
},
enumerable: true,
configurable: true
});
TabViewBase.prototype._addArrayFromBuilder = function(name, value) {
if (name === "items") {
this.items = value;
}
};
TabViewBase.prototype._addChildFromBuilder = function(name, value) {
if (name === "TabViewItem") {
if (!this.items) {
this.items = new Array();
}
this.items.push(value);
this._addView(value);
exports.selectedIndexProperty.coerce(this);
}
};
Object.defineProperty(TabViewBase.prototype, "_selectedView", {
get: function() {
var selectedIndex = this.selectedIndex;
return selectedIndex > -1 ? this.items[selectedIndex].view : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewBase.prototype, "_childrenCount", {
get: function() {
if (this.items) {
return this.items.length;
}
return 0;
},
enumerable: true,
configurable: true
});
TabViewBase.prototype.eachChild = function(callback) {
var items = this.items;
if (items) {
items.forEach(function(item, i) {
callback(item);
});
}
};
TabViewBase.prototype.eachChildView = function(callback) {
var items = this.items;
if (items) {
items.forEach(function(item, i) {
callback(item.view);
});
}
};
TabViewBase.prototype.onItemsChanged = function(oldItems, newItems) {
if (oldItems) {
for (var i = 0, count = oldItems.length; i < count; i++) {
this._removeView(oldItems[i]);
}
}
if (newItems) {
for (var i = 0, count = newItems.length; i < count; i++) {
var item = newItems[i];
if (!item) {
throw new Error("TabViewItem at index " + i + " is undefined.");
}
if (!item.view) {
throw new Error("TabViewItem at index " + i + " does not have a view.");
}
this._addView(item);
}
}
};
return TabViewBase;
}(view_1.View);
TabViewBase.selectedIndexChangedEvent = "selectedIndexChanged";
exports.TabViewBase = TabViewBase;
exports.selectedIndexProperty = new view_1.CoercibleProperty({
name: "selectedIndex",
defaultValue: -1,
affectsLayout: view_1.isIOS,
valueChanged: function(target, oldValue, newValue) {
target.notify({
eventName: TabViewBase.selectedIndexChangedEvent,
object: target,
oldIndex: oldValue,
newIndex: newValue
});
},
coerceValue: function(target, value) {
var items = target.items;
if (items) {
var max = items.length - 1;
if (value < 0) {
value = 0;
}
if (value > max) {
value = max;
}
} else {
value = -1;
}
return value;
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.selectedIndexProperty.register(TabViewBase);
exports.itemsProperty = new view_1.Property({
name: "items",
valueChanged: function(target, oldValue, newValue) {
target.onItemsChanged(oldValue, newValue);
}
});
exports.itemsProperty.register(TabViewBase);
exports.iosIconRenderingModeProperty = new view_1.Property({
name: "iosIconRenderingMode",
defaultValue: "automatic"
});
exports.iosIconRenderingModeProperty.register(TabViewBase);
exports.androidOffscreenTabLimitProperty = new view_1.Property({
name: "androidOffscreenTabLimit",
defaultValue: 1,
affectsLayout: view_1.isIOS,
valueConverter: function(v) {
return parseInt(v);
}
});
exports.androidOffscreenTabLimitProperty.register(TabViewBase);
exports.tabTextColorProperty = new view_1.CssProperty({
name: "tabTextColor",
cssName: "tab-text-color",
equalityComparer: view_1.Color.equals,
valueConverter: function(v) {
return new view_1.Color(v);
}
});
exports.tabTextColorProperty.register(view_1.Style);
exports.tabBackgroundColorProperty = new view_1.CssProperty({
name: "tabBackgroundColor",
cssName: "tab-background-color",
equalityComparer: view_1.Color.equals,
valueConverter: function(v) {
return new view_1.Color(v);
}
});
exports.tabBackgroundColorProperty.register(view_1.Style);
exports.selectedTabTextColorProperty = new view_1.CssProperty({
name: "selectedTabTextColor",
cssName: "selected-tab-text-color",
equalityComparer: view_1.Color.equals,
valueConverter: function(v) {
return new view_1.Color(v);
}
});
exports.selectedTabTextColorProperty.register(view_1.Style);
exports.androidSelectedTabHighlightColorProperty = new view_1.CssProperty({
name: "androidSelectedTabHighlightColor",
cssName: "android-selected-tab-highlight-color",
equalityComparer: view_1.Color.equals,
valueConverter: function(v) {
return new view_1.Color(v);
}
});
exports.androidSelectedTabHighlightColorProperty.register(view_1.Style);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var editable_text_base_1 = __webpack_require__(76);
__export(__webpack_require__(69));
var TextView = function(_super) {
__extends(TextView, _super);
function TextView() {
return _super !== null && _super.apply(this, arguments) || this;
}
TextView.prototype._configureEditText = function(editText) {
editText.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | android.text.InputType.TYPE_TEXT_FLAG_MULTI_LINE);
editText.setGravity(android.view.Gravity.TOP | android.view.Gravity.LEFT);
};
return TextView;
}(editable_text_base_1.EditableTextBase);
exports.TextView = TextView;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var time_picker_common_1 = __webpack_require__(150);
__export(__webpack_require__(150));
var TimeChangedListener;
function initializeTimeChangedListener() {
if (TimeChangedListener) {
return;
}
apiLevel = android.os.Build.VERSION.SDK_INT;
var TimeChangedListenerImpl = function(_super) {
__extends(TimeChangedListenerImpl, _super);
function TimeChangedListenerImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
TimeChangedListenerImpl.prototype.onTimeChanged = function(picker, hour, minute) {
var timePicker = this.owner;
if (timePicker.updatingNativeValue) {
return;
}
var validTime = time_picker_common_1.getValidTime(timePicker, hour, minute);
time_picker_common_1.timeProperty.nativeValueChange(timePicker, new Date(0, 0, 0, validTime.hour, validTime.minute));
};
return TimeChangedListenerImpl;
}(java.lang.Object);
TimeChangedListenerImpl = __decorate([ Interfaces([ android.widget.TimePicker.OnTimeChangedListener ]) ], TimeChangedListenerImpl);
TimeChangedListener = TimeChangedListenerImpl;
}
var apiLevel;
var TimePicker = function(_super) {
__extends(TimePicker, _super);
function TimePicker() {
return _super !== null && _super.apply(this, arguments) || this;
}
TimePicker.prototype.createNativeView = function() {
initializeTimeChangedListener();
var nativeView = new android.widget.TimePicker(this._context);
var listener = new TimeChangedListener(this);
nativeView.setOnTimeChangedListener(listener);
nativeView.listener = listener;
nativeView.calendar = java.util.Calendar.getInstance();
return nativeView;
};
TimePicker.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
var nativeView = this.nativeView;
nativeView.listener.owner = this;
var calendar = nativeView.calendar;
var hour = time_picker_common_1.hourProperty.isSet(this) ? this.hour : calendar.get(java.util.Calendar.HOUR_OF_DAY);
var minute = time_picker_common_1.minuteProperty.isSet(this) ? this.minute : calendar.get(java.util.Calendar.MINUTE);
var validTime = time_picker_common_1.getValidTime(this, hour, minute);
if (!time_picker_common_1.timeProperty.isSet(this)) {
this.time = new Date(0, 0, 0, validTime.hour, validTime.minute);
}
};
TimePicker.prototype[time_picker_common_1.minuteProperty.setNative] = function(value) {
this.updatingNativeValue = true;
try {
if (apiLevel >= 23) {
this.nativeView.setMinute(value);
} else {
this.nativeView.setCurrentMinute(new java.lang.Integer(value));
}
} finally {
this.updatingNativeValue = false;
}
};
TimePicker.prototype[time_picker_common_1.hourProperty.setNative] = function(value) {
this.updatingNativeValue = true;
try {
if (apiLevel >= 23) {
this.nativeView.setHour(value);
} else {
this.nativeView.setCurrentHour(new java.lang.Integer(value));
}
} finally {
this.updatingNativeValue = false;
}
};
return TimePicker;
}(time_picker_common_1.TimePickerBase);
exports.TimePicker = TimePicker;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
__export(__webpack_require__(12));
function getValidTime(picker, hour, minute) {
if (picker.minuteInterval > 1) {
var minuteFloor = minute - minute % picker.minuteInterval;
minute = minuteFloor + (minute === minuteFloor + 1 ? picker.minuteInterval : 0);
if (minute === 60) {
hour++;
minute = 0;
}
}
var time = {
hour: hour,
minute: minute
};
if (!isLessThanMaxTime(picker, hour, minute)) {
time = {
hour: picker.maxHour,
minute: picker.maxMinute
};
}
if (!isGreaterThanMinTime(picker, hour, minute)) {
time = {
hour: picker.minHour,
minute: picker.minMinute
};
}
return time;
}
exports.getValidTime = getValidTime;
function isValidTime(picker) {
return isGreaterThanMinTime(picker) && isLessThanMaxTime(picker);
}
function isHourValid(value) {
return typeof value === "number" && value >= 0 && value <= 23;
}
function isMinuteValid(value) {
return typeof value === "number" && value >= 0 && value <= 59;
}
function isMinuteIntervalValid(value) {
return typeof value === "number" && value >= 1 && value <= 30 && 60 % value === 0;
}
function getMinutes(hour) {
return hour * 60;
}
function isDefined(value) {
return value !== undefined;
}
exports.isDefined = isDefined;
function isGreaterThanMinTime(picker, hour, minute) {
if (picker.minHour === undefined || picker.minMinute === undefined) {
return true;
}
return getMinutes(hour !== undefined ? hour : picker.hour) + (minute !== undefined ? minute : picker.minute) >= getMinutes(picker.minHour) + picker.minMinute;
}
function isLessThanMaxTime(picker, hour, minute) {
if (!isDefined(picker.maxHour) || !isDefined(picker.maxMinute)) {
return true;
}
return getMinutes(isDefined(hour) ? hour : picker.hour) + (isDefined(minute) ? minute : picker.minute) <= getMinutes(picker.maxHour) + picker.maxMinute;
}
function toString(value) {
if (value instanceof Date) {
return value + "";
}
return value < 10 ? "0" + value : "" + value;
}
function getMinMaxTimeErrorMessage(picker) {
return "Min time: (" + toString(picker.minHour) + ":" + toString(picker.minMinute) + "), max time: (" + toString(picker.maxHour) + ":" + toString(picker.maxMinute) + ")";
}
function getErrorMessage(picker, propertyName, newValue) {
return propertyName + " property value (" + toString(newValue) + ":" + toString(picker.minute) + ") is not valid. " + getMinMaxTimeErrorMessage(picker) + ".";
}
var TimePickerBase = function(_super) {
__extends(TimePickerBase, _super);
function TimePickerBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
return TimePickerBase;
}(view_1.View);
exports.TimePickerBase = TimePickerBase;
exports.minHourProperty = new view_1.Property({
name: "minHour",
defaultValue: 0,
valueChanged: function(picker, oldValue, newValue) {
if (!isHourValid(newValue) || !isValidTime(picker)) {
throw new Error(getErrorMessage(picker, "minHour", newValue));
}
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.minHourProperty.register(TimePickerBase);
exports.maxHourProperty = new view_1.Property({
name: "maxHour",
defaultValue: 23,
valueChanged: function(picker, oldValue, newValue) {
if (!isHourValid(newValue) || !isValidTime(picker)) {
throw new Error(getErrorMessage(picker, "maxHour", newValue));
}
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.maxHourProperty.register(TimePickerBase);
exports.minMinuteProperty = new view_1.Property({
name: "minMinute",
defaultValue: 0,
valueChanged: function(picker, oldValue, newValue) {
if (!isMinuteValid(newValue) || !isValidTime(picker)) {
throw new Error(getErrorMessage(picker, "minMinute", newValue));
}
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.minMinuteProperty.register(TimePickerBase);
exports.maxMinuteProperty = new view_1.Property({
name: "maxMinute",
defaultValue: 59,
valueChanged: function(picker, oldValue, newValue) {
if (!isMinuteValid(newValue) || !isValidTime(picker)) {
throw new Error(getErrorMessage(picker, "maxMinute", newValue));
}
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.maxMinuteProperty.register(TimePickerBase);
exports.minuteIntervalProperty = new view_1.Property({
name: "minuteInterval",
defaultValue: 1,
valueChanged: function(picker, oldValue, newValue) {
if (!isMinuteIntervalValid(newValue)) {
throw new Error(getErrorMessage(picker, "minuteInterval", newValue));
}
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.minuteIntervalProperty.register(TimePickerBase);
function dateComparer(x, y) {
return x <= y && x >= y ? true : false;
}
exports.minuteProperty = new view_1.Property({
name: "minute",
defaultValue: 0,
valueChanged: function(picker, oldValue, newValue) {
if (!isMinuteValid(newValue) || !isValidTime(picker)) {
throw new Error(getErrorMessage(picker, "minute", newValue));
}
picker.time = new Date(0, 0, 0, picker.hour, picker.minute);
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.minuteProperty.register(TimePickerBase);
exports.hourProperty = new view_1.Property({
name: "hour",
defaultValue: 0,
valueChanged: function(picker, oldValue, newValue) {
if (!isHourValid(newValue) || !isValidTime(picker)) {
throw new Error(getErrorMessage(picker, "Hour", newValue));
}
picker.time = new Date(0, 0, 0, picker.hour, picker.minute);
},
valueConverter: function(v) {
return parseInt(v);
}
});
exports.hourProperty.register(TimePickerBase);
exports.timeProperty = new view_1.Property({
name: "time",
equalityComparer: dateComparer,
valueChanged: function(picker, oldValue, newValue) {
if (!isValidTime(picker)) {
throw new Error(getErrorMessage(picker, "time", newValue));
}
picker.hour = newValue.getHours();
picker.minute = newValue.getMinutes();
}
});
exports.timeProperty.register(TimePickerBase);
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var web_view_common_1 = __webpack_require__(152);
__export(__webpack_require__(152));
var WebViewClient;
function initializeWebViewClient() {
if (WebViewClient) {
return;
}
var WebViewClientImpl = function(_super) {
__extends(WebViewClientImpl, _super);
function WebViewClientImpl(owner) {
var _this = _super.call(this) || this;
_this.owner = owner;
return global.__native(_this);
}
WebViewClientImpl.prototype.shouldOverrideUrlLoading = function(view, url) {
if (web_view_common_1.traceEnabled()) {
web_view_common_1.traceWrite("WebViewClientClass.shouldOverrideUrlLoading(" + url + ")", web_view_common_1.traceCategories.Debug);
}
return false;
};
WebViewClientImpl.prototype.onPageStarted = function(view, url, favicon) {
_super.prototype.onPageStarted.call(this, view, url, favicon);
var owner = this.owner;
if (owner) {
if (web_view_common_1.traceEnabled()) {
web_view_common_1.traceWrite("WebViewClientClass.onPageStarted(" + url + ", " + favicon + ")", web_view_common_1.traceCategories.Debug);
}
owner._onLoadStarted(url, undefined);
}
};
WebViewClientImpl.prototype.onPageFinished = function(view, url) {
_super.prototype.onPageFinished.call(this, view, url);
var owner = this.owner;
if (owner) {
if (web_view_common_1.traceEnabled()) {
web_view_common_1.traceWrite("WebViewClientClass.onPageFinished(" + url + ")", web_view_common_1.traceCategories.Debug);
}
owner._onLoadFinished(url, undefined);
}
};
WebViewClientImpl.prototype.onReceivedError = function() {
var view = arguments[0];
if (arguments.length === 4) {
var errorCode = arguments[1];
var description = arguments[2];
var failingUrl = arguments[3];
_super.prototype.onReceivedError.call(this, view, errorCode, description, failingUrl);
var owner = this.owner;
if (owner) {
if (web_view_common_1.traceEnabled()) {
web_view_common_1.traceWrite("WebViewClientClass.onReceivedError(" + errorCode + ", " + description + ", " + failingUrl + ")", web_view_common_1.traceCategories.Debug);
}
owner._onLoadFinished(failingUrl, description + "(" + errorCode + ")");
}
} else {
var request = arguments[1];
var error = arguments[2];
_super.prototype.onReceivedError.call(this, view, request, error);
var owner = this.owner;
if (owner) {
if (web_view_common_1.traceEnabled()) {
web_view_common_1.traceWrite("WebViewClientClass.onReceivedError(" + error.getErrorCode() + ", " + error.getDescription() + ", " + (error.getUrl && error.getUrl()) + ")", web_view_common_1.traceCategories.Debug);
}
owner._onLoadFinished(error.getUrl && error.getUrl(), error.getDescription() + "(" + error.getErrorCode() + ")");
}
}
};
return WebViewClientImpl;
}(android.webkit.WebViewClient);
WebViewClient = WebViewClientImpl;
}
var WebView = function(_super) {
__extends(WebView, _super);
function WebView() {
return _super !== null && _super.apply(this, arguments) || this;
}
WebView.prototype.createNativeView = function() {
initializeWebViewClient();
var nativeView = new android.webkit.WebView(this._context);
nativeView.getSettings().setJavaScriptEnabled(true);
nativeView.getSettings().setBuiltInZoomControls(true);
var client = new WebViewClient(this);
nativeView.setWebViewClient(client);
nativeView.client = client;
return nativeView;
};
WebView.prototype.initNativeView = function() {
_super.prototype.initNativeView.call(this);
this.nativeView.client.owner = this;
};
WebView.prototype.resetNativeView = function() {
var nativeView = this.nativeView;
if (nativeView) {
nativeView.destroy();
}
nativeView.client.owner = null;
_super.prototype.resetNativeView.call(this);
};
WebView.prototype._loadUrl = function(src) {
var nativeView = this.nativeView;
if (!nativeView) {
return;
}
nativeView.loadUrl(src);
};
WebView.prototype._loadData = function(src) {
var nativeView = this.nativeView;
if (!nativeView) {
return;
}
var baseUrl = "file:///" + web_view_common_1.knownFolders.currentApp().path + "/";
nativeView.loadDataWithBaseURL(baseUrl, src, "text/html", "utf-8", null);
};
Object.defineProperty(WebView.prototype, "canGoBack", {
get: function() {
return this.nativeView.canGoBack();
},
enumerable: true,
configurable: true
});
WebView.prototype.stopLoading = function() {
var nativeView = this.nativeView;
if (nativeView) {
nativeView.stopLoading();
}
};
Object.defineProperty(WebView.prototype, "canGoForward", {
get: function() {
var nativeView = this.nativeView;
if (nativeView) {
return nativeView.canGoForward();
}
return false;
},
enumerable: true,
configurable: true
});
WebView.prototype.goBack = function() {
var nativeView = this.nativeView;
if (nativeView) {
return nativeView.goBack();
}
};
WebView.prototype.goForward = function() {
var nativeView = this.nativeView;
if (nativeView) {
return nativeView.goForward();
}
};
WebView.prototype.reload = function() {
var nativeView = this.nativeView;
if (nativeView) {
return nativeView.reload();
}
};
return WebView;
}(web_view_common_1.WebViewBase);
exports.WebView = WebView;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", {
value: true
});
var view_1 = __webpack_require__(12);
var file_system_1 = __webpack_require__(19);
exports.File = file_system_1.File;
exports.knownFolders = file_system_1.knownFolders;
exports.path = file_system_1.path;
__export(__webpack_require__(12));
exports.srcProperty = new view_1.Property({
name: "src"
});
var WebViewBase = function(_super) {
__extends(WebViewBase, _super);
function WebViewBase() {
return _super !== null && _super.apply(this, arguments) || this;
}
WebViewBase.prototype._onLoadFinished = function(url, error) {
var args = {
eventName: WebViewBase.loadFinishedEvent,
object: this,
url: url,
navigationType: undefined,
error: error
};
this.notify(args);
};
WebViewBase.prototype._onLoadStarted = function(url, navigationType) {
var args = {
eventName: WebViewBase.loadStartedEvent,
object: this,
url: url,
navigationType: navigationType,
error: undefined
};
this.notify(args);
};
Object.defineProperty(WebViewBase.prototype, "canGoBack", {
get: function() {
throw new Error("This member is abstract.");
},
enumerable: true,
configurable: true
});
Object.defineProperty(WebViewBase.prototype, "canGoForward", {
get: function() {
throw new Error("This member is abstract.");
},
enumerable: true,
configurable: true
});
WebViewBase.prototype[exports.srcProperty.getDefault] = function() {
return "";
};
WebViewBase.prototype[exports.srcProperty.setNative] = function(src) {
this.stopLoading();
if (src.indexOf("~/") === 0) {
src = "file:///" + file_system_1.knownFolders.currentApp().path + "/" + src.substr(2);
} else if (src.indexOf("/") === 0) {
src = "file://" + src;
}
if (src.toLowerCase().indexOf("http://") === 0 || src.toLowerCase().indexOf("https://") === 0 || src.toLowerCase().indexOf("file:///") === 0) {
this._loadUrl(src);
} else {
this._loadData(src);
}
};
Object.defineProperty(WebViewBase.prototype, "url", {
get: function() {
throw new Error("Property url of WebView is deprecated. Use src instead");
},
set: function(value) {
throw new Error("Property url of WebView is deprecated. Use src instead");
},
enumerable: true,
configurable: true
});
return WebViewBase;
}(view_1.View);
WebViewBase.loadStartedEvent = "loadStarted";
WebViewBase.loadFinishedEvent = "loadFinished";
exports.WebViewBase = WebViewBase;
exports.srcProperty.register(WebViewBase);
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
exports.merge = function(sourceExports, destExports) {
for (var key in sourceExports) {
destExports[key] = sourceExports[key];
}
};
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var epsilon = 1e-5;
function areClose(value1, value2) {
return Math.abs(value1 - value2) < epsilon;
}
exports.areClose = areClose;
function greaterThanOrClose(value1, value2) {
return value1 > value2 || areClose(value1, value2);
}
exports.greaterThanOrClose = greaterThanOrClose;
function greaterThan(value1, value2) {
return value1 > value2 && !areClose(value1, value2);
}
exports.greaterThan = greaterThan;
function lessThan(value1, value2) {
return value1 < value2 && !areClose(value1, value2);
}
exports.lessThan = lessThan;
function isZero(value) {
return Math.abs(value) < epsilon;
}
exports.isZero = isZero;
function greaterThanZero(value) {
return value > 0;
}
exports.greaterThanZero = greaterThanZero;
function notNegative(value) {
return value >= 0;
}
exports.notNegative = notNegative;
}, function(module, exports, __webpack_require__) {
global.__requireOverride = function() {
var map = {
application: function() {
return __webpack_require__(3);
},
"application-settings": function() {
return __webpack_require__(86);
},
"application-settings/": function() {
return __webpack_require__(86);
},
"application-settings/application-settings": function() {
return __webpack_require__(86);
},
"application-settings/application-settings-common": function() {
return __webpack_require__(87);
},
"application-settings/application-settings-common.js": function() {
return __webpack_require__(87);
},
"application-settings/application-settings.js": function() {
return __webpack_require__(86);
},
"application/": function() {
return __webpack_require__(3);
},
"application/application": function() {
return __webpack_require__(3);
},
"application/application-common": function() {
return __webpack_require__(4);
},
"application/application-common.js": function() {
return __webpack_require__(4);
},
"application/application.js": function() {
return __webpack_require__(3);
},
"bundle-entry-points": function() {
return __webpack_require__(156);
},
"bundle-entry-points.js": function() {
return __webpack_require__(156);
},
color: function() {
return __webpack_require__(24);
},
"color/": function() {
return __webpack_require__(24);
},
"color/color": function() {
return __webpack_require__(24);
},
"color/color-common": function() {
return __webpack_require__(25);
},
"color/color-common.js": function() {
return __webpack_require__(25);
},
"color/color.js": function() {
return __webpack_require__(24);
},
"color/known-colors": function() {
return __webpack_require__(26);
},
"color/known-colors.js": function() {
return __webpack_require__(26);
},
connectivity: function() {
return __webpack_require__(88);
},
"connectivity/": function() {
return __webpack_require__(88);
},
"connectivity/connectivity": function() {
return __webpack_require__(88);
},
"connectivity/connectivity.js": function() {
return __webpack_require__(88);
},
console: function() {
return __webpack_require__(85);
},
"console/": function() {
return __webpack_require__(85);
},
"console/console": function() {
return __webpack_require__(85);
},
"console/console.js": function() {
return __webpack_require__(85);
},
css: function() {
return __webpack_require__(44);
},
"css-value": function() {
return __webpack_require__(18);
},
"css-value/": function() {
return __webpack_require__(18);
},
"css-value/index": function() {
return __webpack_require__(18);
},
"css-value/index.js": function() {
return __webpack_require__(18);
},
"css/": function() {
return __webpack_require__(44);
},
"css/index": function() {
return __webpack_require__(44);
},
"css/index.js": function() {
return __webpack_require__(44);
},
"css/lib/parse/index": function() {
return __webpack_require__(45);
},
"css/lib/parse/index.js": function() {
return __webpack_require__(45);
},
"data/observable": function() {
return __webpack_require__(32);
},
"data/observable-array": function() {
return __webpack_require__(73);
},
"data/observable-array/": function() {
return __webpack_require__(73);
},
"data/observable-array/observable-array": function() {
return __webpack_require__(73);
},
"data/observable-array/observable-array.js": function() {
return __webpack_require__(73);
},
"data/observable/": function() {
return __webpack_require__(32);
},
"data/observable/observable": function() {
return __webpack_require__(32);
},
"data/observable/observable.js": function() {
return __webpack_require__(32);
},
"data/virtual-array": function() {
return __webpack_require__(89);
},
"data/virtual-array/": function() {
return __webpack_require__(89);
},
"data/virtual-array/virtual-array": function() {
return __webpack_require__(89);
},
"data/virtual-array/virtual-array.js": function() {
return __webpack_require__(89);
},
debugger: function() {
return __webpack_require__(82);
},
"debugger/": function() {
return __webpack_require__(82);
},
"debugger/debugger": function() {
return __webpack_require__(82);
},
"debugger/debugger.js": function() {
return __webpack_require__(82);
},
fetch: function() {
return __webpack_require__(84);
},
"fetch/": function() {
return __webpack_require__(84);
},
"fetch/fetch": function() {
return __webpack_require__(84);
},
"fetch/fetch.js": function() {
return __webpack_require__(84);
},
"file-system": function() {
return __webpack_require__(19);
},
"file-system/": function() {
return __webpack_require__(19);
},
"file-system/file-name-resolver": function() {
return __webpack_require__(56);
},
"file-system/file-name-resolver/": function() {
return __webpack_require__(56);
},
"file-system/file-name-resolver/file-name-resolver": function() {
return __webpack_require__(56);
},
"file-system/file-name-resolver/file-name-resolver.js": function() {
return __webpack_require__(56);
},
"file-system/file-system": function() {
return __webpack_require__(19);
},
"file-system/file-system-access": function() {
return __webpack_require__(20);
},
"file-system/file-system-access.js": function() {
return __webpack_require__(20);
},
"file-system/file-system.js": function() {
return __webpack_require__(19);
},
"fps-meter": function() {
return __webpack_require__(90);
},
"fps-meter/": function() {
return __webpack_require__(90);
},
"fps-meter/fps-meter": function() {
return __webpack_require__(90);
},
"fps-meter/fps-meter.js": function() {
return __webpack_require__(90);
},
"fps-meter/fps-native": function() {
return __webpack_require__(91);
},
"fps-meter/fps-native.js": function() {
return __webpack_require__(91);
},
globals: function() {
return __webpack_require__(5);
},
"globals/": function() {
return __webpack_require__(5);
},
"globals/decorators": function() {
return __webpack_require__(6);
},
"globals/decorators.js": function() {
return __webpack_require__(6);
},
"globals/globals": function() {
return __webpack_require__(5);
},
"globals/globals.js": function() {
return __webpack_require__(5);
},
http: function() {
return __webpack_require__(80);
},
"http/": function() {
return __webpack_require__(80);
},
"http/http": function() {
return __webpack_require__(80);
},
"http/http-request": function() {
return __webpack_require__(81);
},
"http/http-request/": function() {
return __webpack_require__(81);
},
"http/http-request/http-request": function() {
return __webpack_require__(81);
},
"http/http-request/http-request.js": function() {
return __webpack_require__(81);
},
"http/http.js": function() {
return __webpack_require__(80);
},
"image-asset": function() {
return __webpack_require__(92);
},
"image-asset/": function() {
return __webpack_require__(92);
},
"image-asset/image-asset": function() {
return __webpack_require__(92);
},
"image-asset/image-asset-common": function() {
return __webpack_require__(93);
},
"image-asset/image-asset-common.js": function() {
return __webpack_require__(93);
},
"image-asset/image-asset.js": function() {
return __webpack_require__(92);
},
"image-source": function() {
return __webpack_require__(83);
},
"image-source/": function() {
return __webpack_require__(83);
},
"image-source/image-source": function() {
return __webpack_require__(83);
},
"image-source/image-source.js": function() {
return __webpack_require__(83);
},
"js-libs/easysax": function() {
return __webpack_require__(59);
},
"js-libs/easysax/": function() {
return __webpack_require__(59);
},
"js-libs/easysax/easysax": function() {
return __webpack_require__(59);
},
"js-libs/easysax/easysax.js": function() {
return __webpack_require__(59);
},
"js-libs/esprima": function() {
return __webpack_require__(41);
},
"js-libs/esprima/": function() {
return __webpack_require__(41);
},
"js-libs/esprima/esprima": function() {
return __webpack_require__(41);
},
"js-libs/esprima/esprima.js": function() {
return __webpack_require__(41);
},
"js-libs/polymer-expressions": function() {
return __webpack_require__(40);
},
"js-libs/polymer-expressions/": function() {
return __webpack_require__(40);
},
"js-libs/polymer-expressions/path-parser": function() {
return __webpack_require__(42);
},
"js-libs/polymer-expressions/path-parser.js": function() {
return __webpack_require__(42);
},
"js-libs/polymer-expressions/polymer-expressions": function() {
return __webpack_require__(40);
},
"js-libs/polymer-expressions/polymer-expressions.js": function() {
return __webpack_require__(40);
},
platform: function() {
return __webpack_require__(22);
},
"platform/": function() {
return __webpack_require__(22);
},
"platform/platform": function() {
return __webpack_require__(22);
},
"platform/platform.js": function() {
return __webpack_require__(22);
},
profiling: function() {
return __webpack_require__(157);
},
"profiling/": function() {
return __webpack_require__(157);
},
"profiling/profiling": function() {
return __webpack_require__(157);
},
"profiling/profiling.js": function() {
return __webpack_require__(157);
},
text: function() {
return __webpack_require__(21);
},
"text/": function() {
return __webpack_require__(21);
},
"text/formatted-string": function() {
return __webpack_require__(71);
},
"text/formatted-string.js": function() {
return __webpack_require__(71);
},
"text/span": function() {
return __webpack_require__(72);
},
"text/span.js": function() {
return __webpack_require__(72);
},
"text/text": function() {
return __webpack_require__(21);
},
"text/text.js": function() {
return __webpack_require__(21);
},
timer: function() {
return __webpack_require__(7);
},
"timer/": function() {
return __webpack_require__(7);
},
"timer/timer": function() {
return __webpack_require__(7);
},
"timer/timer.js": function() {
return __webpack_require__(7);
},
"tns-core-modules/application": function() {
return __webpack_require__(3);
},
"tns-core-modules/application-settings": function() {
return __webpack_require__(86);
},
"tns-core-modules/application-settings/": function() {
return __webpack_require__(86);
},
"tns-core-modules/application-settings/application-settings": function() {
return __webpack_require__(86);
},
"tns-core-modules/application-settings/application-settings-common": function() {
return __webpack_require__(87);
},
"tns-core-modules/application-settings/application-settings-common.js": function() {
return __webpack_require__(87);
},
"tns-core-modules/application-settings/application-settings.js": function() {
return __webpack_require__(86);
},
"tns-core-modules/application/": function() {
return __webpack_require__(3);
},
"tns-core-modules/application/application": function() {
return __webpack_require__(3);
},
"tns-core-modules/application/application-common": function() {
return __webpack_require__(4);
},
"tns-core-modules/application/application-common.js": function() {
return __webpack_require__(4);
},
"tns-core-modules/application/application.js": function() {
return __webpack_require__(3);
},
"tns-core-modules/bundle-entry-points": function() {
return __webpack_require__(156);
},
"tns-core-modules/bundle-entry-points.js": function() {
return __webpack_require__(156);
},
"tns-core-modules/color": function() {
return __webpack_require__(24);
},
"tns-core-modules/color/": function() {
return __webpack_require__(24);
},
"tns-core-modules/color/color": function() {
return __webpack_require__(24);
},
"tns-core-modules/color/color-common": function() {
return __webpack_require__(25);
},
"tns-core-modules/color/color-common.js": function() {
return __webpack_require__(25);
},
"tns-core-modules/color/color.js": function() {
return __webpack_require__(24);
},
"tns-core-modules/color/known-colors": function() {
return __webpack_require__(26);
},
"tns-core-modules/color/known-colors.js": function() {
return __webpack_require__(26);
},
"tns-core-modules/connectivity": function() {
return __webpack_require__(88);
},
"tns-core-modules/connectivity/": function() {
return __webpack_require__(88);
},
"tns-core-modules/connectivity/connectivity": function() {
return __webpack_require__(88);
},
"tns-core-modules/connectivity/connectivity.js": function() {
return __webpack_require__(88);
},
"tns-core-modules/console": function() {
return __webpack_require__(85);
},
"tns-core-modules/console/": function() {
return __webpack_require__(85);
},
"tns-core-modules/console/console": function() {
return __webpack_require__(85);
},
"tns-core-modules/console/console.js": function() {
return __webpack_require__(85);
},
"tns-core-modules/css": function() {
return __webpack_require__(44);
},
"tns-core-modules/css-value": function() {
return __webpack_require__(18);
},
"tns-core-modules/css-value/": function() {
return __webpack_require__(18);
},
"tns-core-modules/css-value/index": function() {
return __webpack_require__(18);
},
"tns-core-modules/css-value/index.js": function() {
return __webpack_require__(18);
},
"tns-core-modules/css/": function() {
return __webpack_require__(44);
},
"tns-core-modules/css/index": function() {
return __webpack_require__(44);
},
"tns-core-modules/css/index.js": function() {
return __webpack_require__(44);
},
"tns-core-modules/css/lib/parse/index": function() {
return __webpack_require__(45);
},
"tns-core-modules/css/lib/parse/index.js": function() {
return __webpack_require__(45);
},
"tns-core-modules/data/observable": function() {
return __webpack_require__(32);
},
"tns-core-modules/data/observable-array": function() {
return __webpack_require__(73);
},
"tns-core-modules/data/observable-array/": function() {
return __webpack_require__(73);
},
"tns-core-modules/data/observable-array/observable-array": function() {
return __webpack_require__(73);
},
"tns-core-modules/data/observable-array/observable-array.js": function() {
return __webpack_require__(73);
},
"tns-core-modules/data/observable/": function() {
return __webpack_require__(32);
},
"tns-core-modules/data/observable/observable": function() {
return __webpack_require__(32);
},
"tns-core-modules/data/observable/observable.js": function() {
return __webpack_require__(32);
},
"tns-core-modules/data/virtual-array": function() {
return __webpack_require__(89);
},
"tns-core-modules/data/virtual-array/": function() {
return __webpack_require__(89);
},
"tns-core-modules/data/virtual-array/virtual-array": function() {
return __webpack_require__(89);
},
"tns-core-modules/data/virtual-array/virtual-array.js": function() {
return __webpack_require__(89);
},
"tns-core-modules/debugger": function() {
return __webpack_require__(82);
},
"tns-core-modules/debugger/": function() {
return __webpack_require__(82);
},
"tns-core-modules/debugger/debugger": function() {
return __webpack_require__(82);
},
"tns-core-modules/debugger/debugger.js": function() {
return __webpack_require__(82);
},
"tns-core-modules/fetch": function() {
return __webpack_require__(84);
},
"tns-core-modules/fetch/": function() {
return __webpack_require__(84);
},
"tns-core-modules/fetch/fetch": function() {
return __webpack_require__(84);
},
"tns-core-modules/fetch/fetch.js": function() {
return __webpack_require__(84);
},
"tns-core-modules/file-system": function() {
return __webpack_require__(19);
},
"tns-core-modules/file-system/": function() {
return __webpack_require__(19);
},
"tns-core-modules/file-system/file-name-resolver": function() {
return __webpack_require__(56);
},
"tns-core-modules/file-system/file-name-resolver/": function() {
return __webpack_require__(56);
},
"tns-core-modules/file-system/file-name-resolver/file-name-resolver": function() {
return __webpack_require__(56);
},
"tns-core-modules/file-system/file-name-resolver/file-name-resolver.js": function() {
return __webpack_require__(56);
},
"tns-core-modules/file-system/file-system": function() {
return __webpack_require__(19);
},
"tns-core-modules/file-system/file-system-access": function() {
return __webpack_require__(20);
},
"tns-core-modules/file-system/file-system-access.js": function() {
return __webpack_require__(20);
},
"tns-core-modules/file-system/file-system.js": function() {
return __webpack_require__(19);
},
"tns-core-modules/fps-meter": function() {
return __webpack_require__(90);
},
"tns-core-modules/fps-meter/": function() {
return __webpack_require__(90);
},
"tns-core-modules/fps-meter/fps-meter": function() {
return __webpack_require__(90);
},
"tns-core-modules/fps-meter/fps-meter.js": function() {
return __webpack_require__(90);
},
"tns-core-modules/fps-meter/fps-native": function() {
return __webpack_require__(91);
},
"tns-core-modules/fps-meter/fps-native.js": function() {
return __webpack_require__(91);
},
"tns-core-modules/globals": function() {
return __webpack_require__(5);
},
"tns-core-modules/globals/": function() {
return __webpack_require__(5);
},
"tns-core-modules/globals/decorators": function() {
return __webpack_require__(6);
},
"tns-core-modules/globals/decorators.js": function() {
return __webpack_require__(6);
},
"tns-core-modules/globals/globals": function() {
return __webpack_require__(5);
},
"tns-core-modules/globals/globals.js": function() {
return __webpack_require__(5);
},
"tns-core-modules/http": function() {
return __webpack_require__(80);
},
"tns-core-modules/http/": function() {
return __webpack_require__(80);
},
"tns-core-modules/http/http": function() {
return __webpack_require__(80);
},
"tns-core-modules/http/http-request": function() {
return __webpack_require__(81);
},
"tns-core-modules/http/http-request/": function() {
return __webpack_require__(81);
},
"tns-core-modules/http/http-request/http-request": function() {
return __webpack_require__(81);
},
"tns-core-modules/http/http-request/http-request.js": function() {
return __webpack_require__(81);
},
"tns-core-modules/http/http.js": function() {
return __webpack_require__(80);
},
"tns-core-modules/image-asset": function() {
return __webpack_require__(92);
},
"tns-core-modules/image-asset/": function() {
return __webpack_require__(92);
},
"tns-core-modules/image-asset/image-asset": function() {
return __webpack_require__(92);
},
"tns-core-modules/image-asset/image-asset-common": function() {
return __webpack_require__(93);
},
"tns-core-modules/image-asset/image-asset-common.js": function() {
return __webpack_require__(93);
},
"tns-core-modules/image-asset/image-asset.js": function() {
return __webpack_require__(92);
},
"tns-core-modules/image-source": function() {
return __webpack_require__(83);
},
"tns-core-modules/image-source/": function() {
return __webpack_require__(83);
},
"tns-core-modules/image-source/image-source": function() {
return __webpack_require__(83);
},
"tns-core-modules/image-source/image-source.js": function() {
return __webpack_require__(83);
},
"tns-core-modules/js-libs/easysax": function() {
return __webpack_require__(59);
},
"tns-core-modules/js-libs/easysax/": function() {
return __webpack_require__(59);
},
"tns-core-modules/js-libs/easysax/easysax": function() {
return __webpack_require__(59);
},
"tns-core-modules/js-libs/easysax/easysax.js": function() {
return __webpack_require__(59);
},
"tns-core-modules/js-libs/esprima": function() {
return __webpack_require__(41);
},
"tns-core-modules/js-libs/esprima/": function() {
return __webpack_require__(41);
},
"tns-core-modules/js-libs/esprima/esprima": function() {
return __webpack_require__(41);
},
"tns-core-modules/js-libs/esprima/esprima.js": function() {
return __webpack_require__(41);
},
"tns-core-modules/js-libs/polymer-expressions": function() {
return __webpack_require__(40);
},
"tns-core-modules/js-libs/polymer-expressions/": function() {
return __webpack_require__(40);
},
"tns-core-modules/js-libs/polymer-expressions/path-parser": function() {
return __webpack_require__(42);
},
"tns-core-modules/js-libs/polymer-expressions/path-parser.js": function() {
return __webpack_require__(42);
},
"tns-core-modules/js-libs/polymer-expressions/polymer-expressions": function() {
return __webpack_require__(40);
},
"tns-core-modules/js-libs/polymer-expressions/polymer-expressions.js": function() {
return __webpack_require__(40);
},
"tns-core-modules/platform": function() {
return __webpack_require__(22);
},
"tns-core-modules/platform/": function() {
return __webpack_require__(22);
},
"tns-core-modules/platform/platform": function() {
return __webpack_require__(22);
},
"tns-core-modules/platform/platform.js": function() {
return __webpack_require__(22);
},
"tns-core-modules/profiling": function() {
return __webpack_require__(157);
},
"tns-core-modules/profiling/": function() {
return __webpack_require__(157);
},
"tns-core-modules/profiling/profiling": function() {
return __webpack_require__(157);
},
"tns-core-modules/profiling/profiling.js": function() {
return __webpack_require__(157);
},
"tns-core-modules/text": function() {
return __webpack_require__(21);
},
"tns-core-modules/text/": function() {
return __webpack_require__(21);
},
"tns-core-modules/text/formatted-string": function() {
return __webpack_require__(71);
},
"tns-core-modules/text/formatted-string.js": function() {
return __webpack_require__(71);
},
"tns-core-modules/text/span": function() {
return __webpack_require__(72);
},
"tns-core-modules/text/span.js": function() {
return __webpack_require__(72);
},
"tns-core-modules/text/text": function() {
return __webpack_require__(21);
},
"tns-core-modules/text/text.js": function() {
return __webpack_require__(21);
},
"tns-core-modules/timer": function() {
return __webpack_require__(7);
},
"tns-core-modules/timer/": function() {
return __webpack_require__(7);
},
"tns-core-modules/timer/timer": function() {
return __webpack_require__(7);
},
"tns-core-modules/timer/timer.js": function() {
return __webpack_require__(7);
},
"tns-core-modules/trace": function() {
return __webpack_require__(15);
},
"tns-core-modules/trace/": function() {
return __webpack_require__(15);
},
"tns-core-modules/trace/trace": function() {
return __webpack_require__(15);
},
"tns-core-modules/trace/trace.js": function() {
return __webpack_require__(15);
},
"tns-core-modules/ui/action-bar": function() {
return __webpack_require__(94);
},
"tns-core-modules/ui/action-bar/": function() {
return __webpack_require__(94);
},
"tns-core-modules/ui/action-bar/action-bar": function() {
return __webpack_require__(94);
},
"tns-core-modules/ui/action-bar/action-bar-common": function() {
return __webpack_require__(95);
},
"tns-core-modules/ui/action-bar/action-bar-common.js": function() {
return __webpack_require__(95);
},
"tns-core-modules/ui/action-bar/action-bar.js": function() {
return __webpack_require__(94);
},
"tns-core-modules/ui/activity-indicator": function() {
return __webpack_require__(96);
},
"tns-core-modules/ui/activity-indicator/": function() {
return __webpack_require__(96);
},
"tns-core-modules/ui/activity-indicator/activity-indicator": function() {
return __webpack_require__(96);
},
"tns-core-modules/ui/activity-indicator/activity-indicator-common": function() {
return __webpack_require__(97);
},
"tns-core-modules/ui/activity-indicator/activity-indicator-common.js": function() {
return __webpack_require__(97);
},
"tns-core-modules/ui/activity-indicator/activity-indicator.js": function() {
return __webpack_require__(96);
},
"tns-core-modules/ui/animation": function() {
return __webpack_require__(49);
},
"tns-core-modules/ui/animation/": function() {
return __webpack_require__(49);
},
"tns-core-modules/ui/animation/animation": function() {
return __webpack_require__(49);
},
"tns-core-modules/ui/animation/animation-common": function() {
return __webpack_require__(50);
},
"tns-core-modules/ui/animation/animation-common.js": function() {
return __webpack_require__(50);
},
"tns-core-modules/ui/animation/animation.js": function() {
return __webpack_require__(49);
},
"tns-core-modules/ui/animation/keyframe-animation": function() {
return __webpack_require__(48);
},
"tns-core-modules/ui/animation/keyframe-animation.js": function() {
return __webpack_require__(48);
},
"tns-core-modules/ui/border": function() {
return __webpack_require__(98);
},
"tns-core-modules/ui/border/": function() {
return __webpack_require__(98);
},
"tns-core-modules/ui/border/border": function() {
return __webpack_require__(98);
},
"tns-core-modules/ui/border/border.js": function() {
return __webpack_require__(98);
},
"tns-core-modules/ui/builder": function() {
return __webpack_require__(57);
},
"tns-core-modules/ui/builder/": function() {
return __webpack_require__(57);
},
"tns-core-modules/ui/builder/binding-builder": function() {
return __webpack_require__(39);
},
"tns-core-modules/ui/builder/binding-builder.js": function() {
return __webpack_require__(39);
},
"tns-core-modules/ui/builder/builder": function() {
return __webpack_require__(57);
},
"tns-core-modules/ui/builder/builder.js": function() {
return __webpack_require__(57);
},
"tns-core-modules/ui/builder/component-builder": function() {
return __webpack_require__(60);
},
"tns-core-modules/ui/builder/component-builder/": function() {
return __webpack_require__(60);
},
"tns-core-modules/ui/builder/component-builder/component-builder": function() {
return __webpack_require__(60);
},
"tns-core-modules/ui/builder/component-builder/component-builder.js": function() {
return __webpack_require__(60);
},
"tns-core-modules/ui/button": function() {
return __webpack_require__(67);
},
"tns-core-modules/ui/button/": function() {
return __webpack_require__(67);
},
"tns-core-modules/ui/button/button": function() {
return __webpack_require__(67);
},
"tns-core-modules/ui/button/button-common": function() {
return __webpack_require__(68);
},
"tns-core-modules/ui/button/button-common.js": function() {
return __webpack_require__(68);
},
"tns-core-modules/ui/button/button.js": function() {
return __webpack_require__(67);
},
"tns-core-modules/ui/content-view": function() {
return __webpack_require__(99);
},
"tns-core-modules/ui/content-view/": function() {
return __webpack_require__(99);
},
"tns-core-modules/ui/content-view/content-view": function() {
return __webpack_require__(99);
},
"tns-core-modules/ui/content-view/content-view.js": function() {
return __webpack_require__(99);
},
"tns-core-modules/ui/core/bindable": function() {
return __webpack_require__(37);
},
"tns-core-modules/ui/core/bindable/": function() {
return __webpack_require__(37);
},
"tns-core-modules/ui/core/bindable/bindable": function() {
return __webpack_require__(37);
},
"tns-core-modules/ui/core/bindable/bindable.js": function() {
return __webpack_require__(37);
},
"tns-core-modules/ui/core/control-state-change": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "tns-core-modules/ui/core/control-state-change"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"tns-core-modules/ui/core/control-state-change/": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "tns-core-modules/ui/core/control-state-change"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"tns-core-modules/ui/core/dependency-observable": function() {
return __webpack_require__(100);
},
"tns-core-modules/ui/core/dependency-observable/": function() {
return __webpack_require__(100);
},
"tns-core-modules/ui/core/dependency-observable/dependency-observable": function() {
return __webpack_require__(100);
},
"tns-core-modules/ui/core/dependency-observable/dependency-observable.js": function() {
return __webpack_require__(100);
},
"tns-core-modules/ui/core/properties": function() {
return __webpack_require__(31);
},
"tns-core-modules/ui/core/properties/": function() {
return __webpack_require__(31);
},
"tns-core-modules/ui/core/properties/properties": function() {
return __webpack_require__(31);
},
"tns-core-modules/ui/core/properties/properties.js": function() {
return __webpack_require__(31);
},
"tns-core-modules/ui/core/view": function() {
return __webpack_require__(12);
},
"tns-core-modules/ui/core/view-base": function() {
return __webpack_require__(36);
},
"tns-core-modules/ui/core/view-base/": function() {
return __webpack_require__(36);
},
"tns-core-modules/ui/core/view-base/view-base": function() {
return __webpack_require__(36);
},
"tns-core-modules/ui/core/view-base/view-base.js": function() {
return __webpack_require__(36);
},
"tns-core-modules/ui/core/view/": function() {
return __webpack_require__(12);
},
"tns-core-modules/ui/core/view/view": function() {
return __webpack_require__(12);
},
"tns-core-modules/ui/core/view/view-common": function() {
return __webpack_require__(27);
},
"tns-core-modules/ui/core/view/view-common.js": function() {
return __webpack_require__(27);
},
"tns-core-modules/ui/core/view/view.js": function() {
return __webpack_require__(12);
},
"tns-core-modules/ui/core/weak-event-listener": function() {
return __webpack_require__(38);
},
"tns-core-modules/ui/core/weak-event-listener/": function() {
return __webpack_require__(38);
},
"tns-core-modules/ui/core/weak-event-listener/weak-event-listener": function() {
return __webpack_require__(38);
},
"tns-core-modules/ui/core/weak-event-listener/weak-event-listener.js": function() {
return __webpack_require__(38);
},
"tns-core-modules/ui/date-picker": function() {
return __webpack_require__(101);
},
"tns-core-modules/ui/date-picker/": function() {
return __webpack_require__(101);
},
"tns-core-modules/ui/date-picker/date-picker": function() {
return __webpack_require__(101);
},
"tns-core-modules/ui/date-picker/date-picker-common": function() {
return __webpack_require__(102);
},
"tns-core-modules/ui/date-picker/date-picker-common.js": function() {
return __webpack_require__(102);
},
"tns-core-modules/ui/date-picker/date-picker.js": function() {
return __webpack_require__(101);
},
"tns-core-modules/ui/dialogs": function() {
return __webpack_require__(8);
},
"tns-core-modules/ui/dialogs/": function() {
return __webpack_require__(8);
},
"tns-core-modules/ui/dialogs/dialogs": function() {
return __webpack_require__(8);
},
"tns-core-modules/ui/dialogs/dialogs-common": function() {
return __webpack_require__(9);
},
"tns-core-modules/ui/dialogs/dialogs-common.js": function() {
return __webpack_require__(9);
},
"tns-core-modules/ui/dialogs/dialogs.js": function() {
return __webpack_require__(8);
},
"tns-core-modules/ui/editable-text-base": function() {
return __webpack_require__(76);
},
"tns-core-modules/ui/editable-text-base/": function() {
return __webpack_require__(76);
},
"tns-core-modules/ui/editable-text-base/editable-text-base": function() {
return __webpack_require__(76);
},
"tns-core-modules/ui/editable-text-base/editable-text-base-common": function() {
return __webpack_require__(77);
},
"tns-core-modules/ui/editable-text-base/editable-text-base-common.js": function() {
return __webpack_require__(77);
},
"tns-core-modules/ui/editable-text-base/editable-text-base.js": function() {
return __webpack_require__(76);
},
"tns-core-modules/ui/enums": function() {
return __webpack_require__(103);
},
"tns-core-modules/ui/enums/": function() {
return __webpack_require__(103);
},
"tns-core-modules/ui/enums/enums": function() {
return __webpack_require__(103);
},
"tns-core-modules/ui/enums/enums.js": function() {
return __webpack_require__(103);
},
"tns-core-modules/ui/frame": function() {
return __webpack_require__(10);
},
"tns-core-modules/ui/frame/": function() {
return __webpack_require__(10);
},
"tns-core-modules/ui/frame/activity": function() {
return __webpack_require__(158);
},
"tns-core-modules/ui/frame/activity.js": function() {
return __webpack_require__(158);
},
"tns-core-modules/ui/frame/fragment": function() {
return __webpack_require__(66);
},
"tns-core-modules/ui/frame/fragment.js": function() {
return __webpack_require__(66);
},
"tns-core-modules/ui/frame/frame": function() {
return __webpack_require__(10);
},
"tns-core-modules/ui/frame/frame-common": function() {
return __webpack_require__(11);
},
"tns-core-modules/ui/frame/frame-common.js": function() {
return __webpack_require__(11);
},
"tns-core-modules/ui/frame/frame.js": function() {
return __webpack_require__(10);
},
"tns-core-modules/ui/gestures": function() {
return __webpack_require__(54);
},
"tns-core-modules/ui/gestures/": function() {
return __webpack_require__(54);
},
"tns-core-modules/ui/gestures/gestures": function() {
return __webpack_require__(54);
},
"tns-core-modules/ui/gestures/gestures-common": function() {
return __webpack_require__(55);
},
"tns-core-modules/ui/gestures/gestures-common.js": function() {
return __webpack_require__(55);
},
"tns-core-modules/ui/gestures/gestures.js": function() {
return __webpack_require__(54);
},
"tns-core-modules/ui/html-view": function() {
return __webpack_require__(104);
},
"tns-core-modules/ui/html-view/": function() {
return __webpack_require__(104);
},
"tns-core-modules/ui/html-view/html-view": function() {
return __webpack_require__(104);
},
"tns-core-modules/ui/html-view/html-view-common": function() {
return __webpack_require__(105);
},
"tns-core-modules/ui/html-view/html-view-common.js": function() {
return __webpack_require__(105);
},
"tns-core-modules/ui/html-view/html-view.js": function() {
return __webpack_require__(104);
},
"tns-core-modules/ui/image": function() {
return __webpack_require__(106);
},
"tns-core-modules/ui/image-cache": function() {
return __webpack_require__(108);
},
"tns-core-modules/ui/image-cache/": function() {
return __webpack_require__(108);
},
"tns-core-modules/ui/image-cache/image-cache": function() {
return __webpack_require__(108);
},
"tns-core-modules/ui/image-cache/image-cache-common": function() {
return __webpack_require__(109);
},
"tns-core-modules/ui/image-cache/image-cache-common.js": function() {
return __webpack_require__(109);
},
"tns-core-modules/ui/image-cache/image-cache.js": function() {
return __webpack_require__(108);
},
"tns-core-modules/ui/image/": function() {
return __webpack_require__(106);
},
"tns-core-modules/ui/image/image": function() {
return __webpack_require__(106);
},
"tns-core-modules/ui/image/image-common": function() {
return __webpack_require__(107);
},
"tns-core-modules/ui/image/image-common.js": function() {
return __webpack_require__(107);
},
"tns-core-modules/ui/image/image.js": function() {
return __webpack_require__(106);
},
"tns-core-modules/ui/label": function() {
return __webpack_require__(78);
},
"tns-core-modules/ui/label/": function() {
return __webpack_require__(78);
},
"tns-core-modules/ui/label/label": function() {
return __webpack_require__(78);
},
"tns-core-modules/ui/label/label-common": function() {
return __webpack_require__(159);
},
"tns-core-modules/ui/label/label-common.js": function() {
return __webpack_require__(159);
},
"tns-core-modules/ui/label/label.js": function() {
return __webpack_require__(78);
},
"tns-core-modules/ui/layouts/absolute-layout": function() {
return __webpack_require__(113);
},
"tns-core-modules/ui/layouts/absolute-layout/": function() {
return __webpack_require__(113);
},
"tns-core-modules/ui/layouts/absolute-layout/absolute-layout": function() {
return __webpack_require__(113);
},
"tns-core-modules/ui/layouts/absolute-layout/absolute-layout-common": function() {
return __webpack_require__(114);
},
"tns-core-modules/ui/layouts/absolute-layout/absolute-layout-common.js": function() {
return __webpack_require__(114);
},
"tns-core-modules/ui/layouts/absolute-layout/absolute-layout.js": function() {
return __webpack_require__(113);
},
"tns-core-modules/ui/layouts/dock-layout": function() {
return __webpack_require__(115);
},
"tns-core-modules/ui/layouts/dock-layout/": function() {
return __webpack_require__(115);
},
"tns-core-modules/ui/layouts/dock-layout/dock-layout": function() {
return __webpack_require__(115);
},
"tns-core-modules/ui/layouts/dock-layout/dock-layout-common": function() {
return __webpack_require__(116);
},
"tns-core-modules/ui/layouts/dock-layout/dock-layout-common.js": function() {
return __webpack_require__(116);
},
"tns-core-modules/ui/layouts/dock-layout/dock-layout.js": function() {
return __webpack_require__(115);
},
"tns-core-modules/ui/layouts/flexbox-layout": function() {
return __webpack_require__(117);
},
"tns-core-modules/ui/layouts/flexbox-layout/": function() {
return __webpack_require__(117);
},
"tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout": function() {
return __webpack_require__(117);
},
"tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout-common": function() {
return __webpack_require__(118);
},
"tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout-common.js": function() {
return __webpack_require__(118);
},
"tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout.js": function() {
return __webpack_require__(117);
},
"tns-core-modules/ui/layouts/grid-layout": function() {
return __webpack_require__(119);
},
"tns-core-modules/ui/layouts/grid-layout/": function() {
return __webpack_require__(119);
},
"tns-core-modules/ui/layouts/grid-layout/grid-layout": function() {
return __webpack_require__(119);
},
"tns-core-modules/ui/layouts/grid-layout/grid-layout-common": function() {
return __webpack_require__(120);
},
"tns-core-modules/ui/layouts/grid-layout/grid-layout-common.js": function() {
return __webpack_require__(120);
},
"tns-core-modules/ui/layouts/grid-layout/grid-layout.js": function() {
return __webpack_require__(119);
},
"tns-core-modules/ui/layouts/layout": function() {
return __webpack_require__(112);
},
"tns-core-modules/ui/layouts/layout-base": function() {
return __webpack_require__(110);
},
"tns-core-modules/ui/layouts/layout-base-common": function() {
return __webpack_require__(111);
},
"tns-core-modules/ui/layouts/layout-base-common.js": function() {
return __webpack_require__(111);
},
"tns-core-modules/ui/layouts/layout-base.js": function() {
return __webpack_require__(110);
},
"tns-core-modules/ui/layouts/layout.js": function() {
return __webpack_require__(112);
},
"tns-core-modules/ui/layouts/stack-layout": function() {
return __webpack_require__(121);
},
"tns-core-modules/ui/layouts/stack-layout/": function() {
return __webpack_require__(121);
},
"tns-core-modules/ui/layouts/stack-layout/stack-layout": function() {
return __webpack_require__(121);
},
"tns-core-modules/ui/layouts/stack-layout/stack-layout-common": function() {
return __webpack_require__(122);
},
"tns-core-modules/ui/layouts/stack-layout/stack-layout-common.js": function() {
return __webpack_require__(122);
},
"tns-core-modules/ui/layouts/stack-layout/stack-layout.js": function() {
return __webpack_require__(121);
},
"tns-core-modules/ui/layouts/wrap-layout": function() {
return __webpack_require__(123);
},
"tns-core-modules/ui/layouts/wrap-layout/": function() {
return __webpack_require__(123);
},
"tns-core-modules/ui/layouts/wrap-layout/wrap-layout": function() {
return __webpack_require__(123);
},
"tns-core-modules/ui/layouts/wrap-layout/wrap-layout-common": function() {
return __webpack_require__(124);
},
"tns-core-modules/ui/layouts/wrap-layout/wrap-layout-common.js": function() {
return __webpack_require__(124);
},
"tns-core-modules/ui/layouts/wrap-layout/wrap-layout.js": function() {
return __webpack_require__(123);
},
"tns-core-modules/ui/list-picker": function() {
return __webpack_require__(125);
},
"tns-core-modules/ui/list-picker/": function() {
return __webpack_require__(125);
},
"tns-core-modules/ui/list-picker/list-picker": function() {
return __webpack_require__(125);
},
"tns-core-modules/ui/list-picker/list-picker-common": function() {
return __webpack_require__(126);
},
"tns-core-modules/ui/list-picker/list-picker-common.js": function() {
return __webpack_require__(126);
},
"tns-core-modules/ui/list-picker/list-picker.js": function() {
return __webpack_require__(125);
},
"tns-core-modules/ui/list-view": function() {
return __webpack_require__(127);
},
"tns-core-modules/ui/list-view/": function() {
return __webpack_require__(127);
},
"tns-core-modules/ui/list-view/list-view": function() {
return __webpack_require__(127);
},
"tns-core-modules/ui/list-view/list-view-common": function() {
return __webpack_require__(128);
},
"tns-core-modules/ui/list-view/list-view-common.js": function() {
return __webpack_require__(128);
},
"tns-core-modules/ui/list-view/list-view.js": function() {
return __webpack_require__(127);
},
"tns-core-modules/ui/page": function() {
return __webpack_require__(130);
},
"tns-core-modules/ui/page/": function() {
return __webpack_require__(130);
},
"tns-core-modules/ui/page/constants": function() {
return __webpack_require__(61);
},
"tns-core-modules/ui/page/constants.js": function() {
return __webpack_require__(61);
},
"tns-core-modules/ui/page/page": function() {
return __webpack_require__(130);
},
"tns-core-modules/ui/page/page-common": function() {
return __webpack_require__(131);
},
"tns-core-modules/ui/page/page-common.js": function() {
return __webpack_require__(131);
},
"tns-core-modules/ui/page/page.js": function() {
return __webpack_require__(130);
},
"tns-core-modules/ui/placeholder": function() {
return __webpack_require__(132);
},
"tns-core-modules/ui/placeholder/": function() {
return __webpack_require__(132);
},
"tns-core-modules/ui/placeholder/placeholder": function() {
return __webpack_require__(132);
},
"tns-core-modules/ui/placeholder/placeholder.js": function() {
return __webpack_require__(132);
},
"tns-core-modules/ui/progress": function() {
return __webpack_require__(133);
},
"tns-core-modules/ui/progress/": function() {
return __webpack_require__(133);
},
"tns-core-modules/ui/progress/progress": function() {
return __webpack_require__(133);
},
"tns-core-modules/ui/progress/progress-common": function() {
return __webpack_require__(134);
},
"tns-core-modules/ui/progress/progress-common.js": function() {
return __webpack_require__(134);
},
"tns-core-modules/ui/progress/progress.js": function() {
return __webpack_require__(133);
},
"tns-core-modules/ui/proxy-view-container": function() {
return __webpack_require__(129);
},
"tns-core-modules/ui/proxy-view-container/": function() {
return __webpack_require__(129);
},
"tns-core-modules/ui/proxy-view-container/proxy-view-container": function() {
return __webpack_require__(129);
},
"tns-core-modules/ui/proxy-view-container/proxy-view-container.js": function() {
return __webpack_require__(129);
},
"tns-core-modules/ui/repeater": function() {
return __webpack_require__(135);
},
"tns-core-modules/ui/repeater/": function() {
return __webpack_require__(135);
},
"tns-core-modules/ui/repeater/repeater": function() {
return __webpack_require__(135);
},
"tns-core-modules/ui/repeater/repeater.js": function() {
return __webpack_require__(135);
},
"tns-core-modules/ui/scroll-view": function() {
return __webpack_require__(136);
},
"tns-core-modules/ui/scroll-view/": function() {
return __webpack_require__(136);
},
"tns-core-modules/ui/scroll-view/scroll-view": function() {
return __webpack_require__(136);
},
"tns-core-modules/ui/scroll-view/scroll-view-common": function() {
return __webpack_require__(137);
},
"tns-core-modules/ui/scroll-view/scroll-view-common.js": function() {
return __webpack_require__(137);
},
"tns-core-modules/ui/scroll-view/scroll-view.js": function() {
return __webpack_require__(136);
},
"tns-core-modules/ui/search-bar": function() {
return __webpack_require__(138);
},
"tns-core-modules/ui/search-bar/": function() {
return __webpack_require__(138);
},
"tns-core-modules/ui/search-bar/search-bar": function() {
return __webpack_require__(138);
},
"tns-core-modules/ui/search-bar/search-bar-common": function() {
return __webpack_require__(139);
},
"tns-core-modules/ui/search-bar/search-bar-common.js": function() {
return __webpack_require__(139);
},
"tns-core-modules/ui/search-bar/search-bar.js": function() {
return __webpack_require__(138);
},
"tns-core-modules/ui/segmented-bar": function() {
return __webpack_require__(140);
},
"tns-core-modules/ui/segmented-bar/": function() {
return __webpack_require__(140);
},
"tns-core-modules/ui/segmented-bar/segmented-bar": function() {
return __webpack_require__(140);
},
"tns-core-modules/ui/segmented-bar/segmented-bar-common": function() {
return __webpack_require__(141);
},
"tns-core-modules/ui/segmented-bar/segmented-bar-common.js": function() {
return __webpack_require__(141);
},
"tns-core-modules/ui/segmented-bar/segmented-bar.js": function() {
return __webpack_require__(140);
},
"tns-core-modules/ui/slider": function() {
return __webpack_require__(142);
},
"tns-core-modules/ui/slider/": function() {
return __webpack_require__(142);
},
"tns-core-modules/ui/slider/slider": function() {
return __webpack_require__(142);
},
"tns-core-modules/ui/slider/slider-common": function() {
return __webpack_require__(143);
},
"tns-core-modules/ui/slider/slider-common.js": function() {
return __webpack_require__(143);
},
"tns-core-modules/ui/slider/slider.js": function() {
return __webpack_require__(142);
},
"tns-core-modules/ui/styling": function() {
return __webpack_require__(33);
},
"tns-core-modules/ui/styling/": function() {
return __webpack_require__(33);
},
"tns-core-modules/ui/styling/background": function() {
return __webpack_require__(13);
},
"tns-core-modules/ui/styling/background-common": function() {
return __webpack_require__(23);
},
"tns-core-modules/ui/styling/background-common.js": function() {
return __webpack_require__(23);
},
"tns-core-modules/ui/styling/background.js": function() {
return __webpack_require__(13);
},
"tns-core-modules/ui/styling/converters": function() {
return __webpack_require__(53);
},
"tns-core-modules/ui/styling/converters.js": function() {
return __webpack_require__(53);
},
"tns-core-modules/ui/styling/css-animation-parser": function() {
return __webpack_require__(52);
},
"tns-core-modules/ui/styling/css-animation-parser.js": function() {
return __webpack_require__(52);
},
"tns-core-modules/ui/styling/css-selector": function() {
return __webpack_require__(46);
},
"tns-core-modules/ui/styling/css-selector-parser": function() {
return __webpack_require__(47);
},
"tns-core-modules/ui/styling/css-selector-parser.js": function() {
return __webpack_require__(47);
},
"tns-core-modules/ui/styling/css-selector/": function() {
return __webpack_require__(46);
},
"tns-core-modules/ui/styling/css-selector/css-selector": function() {
return __webpack_require__(46);
},
"tns-core-modules/ui/styling/css-selector/css-selector.js": function() {
return __webpack_require__(46);
},
"tns-core-modules/ui/styling/font": function() {
return __webpack_require__(29);
},
"tns-core-modules/ui/styling/font-common": function() {
return __webpack_require__(30);
},
"tns-core-modules/ui/styling/font-common.js": function() {
return __webpack_require__(30);
},
"tns-core-modules/ui/styling/font.js": function() {
return __webpack_require__(29);
},
"tns-core-modules/ui/styling/style": function() {
return __webpack_require__(33);
},
"tns-core-modules/ui/styling/style-properties": function() {
return __webpack_require__(28);
},
"tns-core-modules/ui/styling/style-properties.js": function() {
return __webpack_require__(28);
},
"tns-core-modules/ui/styling/style-scope": function() {
return __webpack_require__(43);
},
"tns-core-modules/ui/styling/style-scope.js": function() {
return __webpack_require__(43);
},
"tns-core-modules/ui/styling/style/": function() {
return __webpack_require__(33);
},
"tns-core-modules/ui/styling/style/style": function() {
return __webpack_require__(33);
},
"tns-core-modules/ui/styling/style/style.js": function() {
return __webpack_require__(33);
},
"tns-core-modules/ui/switch": function() {
return __webpack_require__(144);
},
"tns-core-modules/ui/switch/": function() {
return __webpack_require__(144);
},
"tns-core-modules/ui/switch/switch": function() {
return __webpack_require__(144);
},
"tns-core-modules/ui/switch/switch-common": function() {
return __webpack_require__(145);
},
"tns-core-modules/ui/switch/switch-common.js": function() {
return __webpack_require__(145);
},
"tns-core-modules/ui/switch/switch.js": function() {
return __webpack_require__(144);
},
"tns-core-modules/ui/tab-view": function() {
return __webpack_require__(146);
},
"tns-core-modules/ui/tab-view/": function() {
return __webpack_require__(146);
},
"tns-core-modules/ui/tab-view/tab-view": function() {
return __webpack_require__(146);
},
"tns-core-modules/ui/tab-view/tab-view-common": function() {
return __webpack_require__(147);
},
"tns-core-modules/ui/tab-view/tab-view-common.js": function() {
return __webpack_require__(147);
},
"tns-core-modules/ui/tab-view/tab-view.js": function() {
return __webpack_require__(146);
},
"tns-core-modules/ui/text-base": function() {
return __webpack_require__(69);
},
"tns-core-modules/ui/text-base/": function() {
return __webpack_require__(69);
},
"tns-core-modules/ui/text-base/text-base": function() {
return __webpack_require__(69);
},
"tns-core-modules/ui/text-base/text-base-common": function() {
return __webpack_require__(70);
},
"tns-core-modules/ui/text-base/text-base-common.js": function() {
return __webpack_require__(70);
},
"tns-core-modules/ui/text-base/text-base.js": function() {
return __webpack_require__(69);
},
"tns-core-modules/ui/text-field": function() {
return __webpack_require__(74);
},
"tns-core-modules/ui/text-field/": function() {
return __webpack_require__(74);
},
"tns-core-modules/ui/text-field/text-field": function() {
return __webpack_require__(74);
},
"tns-core-modules/ui/text-field/text-field-common": function() {
return __webpack_require__(75);
},
"tns-core-modules/ui/text-field/text-field-common.js": function() {
return __webpack_require__(75);
},
"tns-core-modules/ui/text-field/text-field.js": function() {
return __webpack_require__(74);
},
"tns-core-modules/ui/text-view": function() {
return __webpack_require__(148);
},
"tns-core-modules/ui/text-view/": function() {
return __webpack_require__(148);
},
"tns-core-modules/ui/text-view/text-view": function() {
return __webpack_require__(148);
},
"tns-core-modules/ui/text-view/text-view-common": function() {
return __webpack_require__(160);
},
"tns-core-modules/ui/text-view/text-view-common.js": function() {
return __webpack_require__(160);
},
"tns-core-modules/ui/text-view/text-view.js": function() {
return __webpack_require__(148);
},
"tns-core-modules/ui/time-picker": function() {
return __webpack_require__(149);
},
"tns-core-modules/ui/time-picker/": function() {
return __webpack_require__(149);
},
"tns-core-modules/ui/time-picker/time-picker": function() {
return __webpack_require__(149);
},
"tns-core-modules/ui/time-picker/time-picker-common": function() {
return __webpack_require__(150);
},
"tns-core-modules/ui/time-picker/time-picker-common.js": function() {
return __webpack_require__(150);
},
"tns-core-modules/ui/time-picker/time-picker.js": function() {
return __webpack_require__(149);
},
"tns-core-modules/ui/transition": function() {
return __webpack_require__(62);
},
"tns-core-modules/ui/transition/": function() {
return __webpack_require__(62);
},
"tns-core-modules/ui/transition/fade-transition": function() {
return __webpack_require__(64);
},
"tns-core-modules/ui/transition/fade-transition.js": function() {
return __webpack_require__(64);
},
"tns-core-modules/ui/transition/flip-transition": function() {
return __webpack_require__(65);
},
"tns-core-modules/ui/transition/flip-transition.js": function() {
return __webpack_require__(65);
},
"tns-core-modules/ui/transition/slide-transition": function() {
return __webpack_require__(63);
},
"tns-core-modules/ui/transition/slide-transition.js": function() {
return __webpack_require__(63);
},
"tns-core-modules/ui/transition/transition": function() {
return __webpack_require__(62);
},
"tns-core-modules/ui/transition/transition.js": function() {
return __webpack_require__(62);
},
"tns-core-modules/ui/web-view": function() {
return __webpack_require__(151);
},
"tns-core-modules/ui/web-view/": function() {
return __webpack_require__(151);
},
"tns-core-modules/ui/web-view/web-view": function() {
return __webpack_require__(151);
},
"tns-core-modules/ui/web-view/web-view-common": function() {
return __webpack_require__(152);
},
"tns-core-modules/ui/web-view/web-view-common.js": function() {
return __webpack_require__(152);
},
"tns-core-modules/ui/web-view/web-view.js": function() {
return __webpack_require__(151);
},
"tns-core-modules/utils/debug": function() {
return __webpack_require__(34);
},
"tns-core-modules/utils/debug-common": function() {
return __webpack_require__(35);
},
"tns-core-modules/utils/debug-common.js": function() {
return __webpack_require__(35);
},
"tns-core-modules/utils/debug.js": function() {
return __webpack_require__(34);
},
"tns-core-modules/utils/lazy": function() {
return __webpack_require__(51);
},
"tns-core-modules/utils/lazy.js": function() {
return __webpack_require__(51);
},
"tns-core-modules/utils/module-merge": function() {
return __webpack_require__(153);
},
"tns-core-modules/utils/module-merge.js": function() {
return __webpack_require__(153);
},
"tns-core-modules/utils/number-utils": function() {
return __webpack_require__(154);
},
"tns-core-modules/utils/number-utils.js": function() {
return __webpack_require__(154);
},
"tns-core-modules/utils/types": function() {
return __webpack_require__(17);
},
"tns-core-modules/utils/types.js": function() {
return __webpack_require__(17);
},
"tns-core-modules/utils/utils": function() {
return __webpack_require__(14);
},
"tns-core-modules/utils/utils-common": function() {
return __webpack_require__(16);
},
"tns-core-modules/utils/utils-common.js": function() {
return __webpack_require__(16);
},
"tns-core-modules/utils/utils.js": function() {
return __webpack_require__(14);
},
"tns-core-modules/xhr": function() {
return __webpack_require__(79);
},
"tns-core-modules/xhr/": function() {
return __webpack_require__(79);
},
"tns-core-modules/xhr/xhr": function() {
return __webpack_require__(79);
},
"tns-core-modules/xhr/xhr.js": function() {
return __webpack_require__(79);
},
"tns-core-modules/xml": function() {
return __webpack_require__(58);
},
"tns-core-modules/xml/": function() {
return __webpack_require__(58);
},
"tns-core-modules/xml/xml": function() {
return __webpack_require__(58);
},
"tns-core-modules/xml/xml.js": function() {
return __webpack_require__(58);
},
trace: function() {
return __webpack_require__(15);
},
"trace/": function() {
return __webpack_require__(15);
},
"trace/trace": function() {
return __webpack_require__(15);
},
"trace/trace.js": function() {
return __webpack_require__(15);
},
"ui/action-bar": function() {
return __webpack_require__(94);
},
"ui/action-bar/": function() {
return __webpack_require__(94);
},
"ui/action-bar/action-bar": function() {
return __webpack_require__(94);
},
"ui/action-bar/action-bar-common": function() {
return __webpack_require__(95);
},
"ui/action-bar/action-bar-common.js": function() {
return __webpack_require__(95);
},
"ui/action-bar/action-bar.js": function() {
return __webpack_require__(94);
},
"ui/activity-indicator": function() {
return __webpack_require__(96);
},
"ui/activity-indicator/": function() {
return __webpack_require__(96);
},
"ui/activity-indicator/activity-indicator": function() {
return __webpack_require__(96);
},
"ui/activity-indicator/activity-indicator-common": function() {
return __webpack_require__(97);
},
"ui/activity-indicator/activity-indicator-common.js": function() {
return __webpack_require__(97);
},
"ui/activity-indicator/activity-indicator.js": function() {
return __webpack_require__(96);
},
"ui/animation": function() {
return __webpack_require__(49);
},
"ui/animation/": function() {
return __webpack_require__(49);
},
"ui/animation/animation": function() {
return __webpack_require__(49);
},
"ui/animation/animation-common": function() {
return __webpack_require__(50);
},
"ui/animation/animation-common.js": function() {
return __webpack_require__(50);
},
"ui/animation/animation.js": function() {
return __webpack_require__(49);
},
"ui/animation/keyframe-animation": function() {
return __webpack_require__(48);
},
"ui/animation/keyframe-animation.js": function() {
return __webpack_require__(48);
},
"ui/border": function() {
return __webpack_require__(98);
},
"ui/border/": function() {
return __webpack_require__(98);
},
"ui/border/border": function() {
return __webpack_require__(98);
},
"ui/border/border.js": function() {
return __webpack_require__(98);
},
"ui/builder": function() {
return __webpack_require__(57);
},
"ui/builder/": function() {
return __webpack_require__(57);
},
"ui/builder/binding-builder": function() {
return __webpack_require__(39);
},
"ui/builder/binding-builder.js": function() {
return __webpack_require__(39);
},
"ui/builder/builder": function() {
return __webpack_require__(57);
},
"ui/builder/builder.js": function() {
return __webpack_require__(57);
},
"ui/builder/component-builder": function() {
return __webpack_require__(60);
},
"ui/builder/component-builder/": function() {
return __webpack_require__(60);
},
"ui/builder/component-builder/component-builder": function() {
return __webpack_require__(60);
},
"ui/builder/component-builder/component-builder.js": function() {
return __webpack_require__(60);
},
"ui/button": function() {
return __webpack_require__(67);
},
"ui/button/": function() {
return __webpack_require__(67);
},
"ui/button/button": function() {
return __webpack_require__(67);
},
"ui/button/button-common": function() {
return __webpack_require__(68);
},
"ui/button/button-common.js": function() {
return __webpack_require__(68);
},
"ui/button/button.js": function() {
return __webpack_require__(67);
},
"ui/content-view": function() {
return __webpack_require__(99);
},
"ui/content-view/": function() {
return __webpack_require__(99);
},
"ui/content-view/content-view": function() {
return __webpack_require__(99);
},
"ui/content-view/content-view.js": function() {
return __webpack_require__(99);
},
"ui/core/bindable": function() {
return __webpack_require__(37);
},
"ui/core/bindable/": function() {
return __webpack_require__(37);
},
"ui/core/bindable/bindable": function() {
return __webpack_require__(37);
},
"ui/core/bindable/bindable.js": function() {
return __webpack_require__(37);
},
"ui/core/control-state-change": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "tns-core-modules/ui/core/control-state-change"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"ui/core/control-state-change/": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "tns-core-modules/ui/core/control-state-change"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"ui/core/dependency-observable": function() {
return __webpack_require__(100);
},
"ui/core/dependency-observable/": function() {
return __webpack_require__(100);
},
"ui/core/dependency-observable/dependency-observable": function() {
return __webpack_require__(100);
},
"ui/core/dependency-observable/dependency-observable.js": function() {
return __webpack_require__(100);
},
"ui/core/properties": function() {
return __webpack_require__(31);
},
"ui/core/properties/": function() {
return __webpack_require__(31);
},
"ui/core/properties/properties": function() {
return __webpack_require__(31);
},
"ui/core/properties/properties.js": function() {
return __webpack_require__(31);
},
"ui/core/view": function() {
return __webpack_require__(12);
},
"ui/core/view-base": function() {
return __webpack_require__(36);
},
"ui/core/view-base/": function() {
return __webpack_require__(36);
},
"ui/core/view-base/view-base": function() {
return __webpack_require__(36);
},
"ui/core/view-base/view-base.js": function() {
return __webpack_require__(36);
},
"ui/core/view/": function() {
return __webpack_require__(12);
},
"ui/core/view/view": function() {
return __webpack_require__(12);
},
"ui/core/view/view-common": function() {
return __webpack_require__(27);
},
"ui/core/view/view-common.js": function() {
return __webpack_require__(27);
},
"ui/core/view/view.js": function() {
return __webpack_require__(12);
},
"ui/core/weak-event-listener": function() {
return __webpack_require__(38);
},
"ui/core/weak-event-listener/": function() {
return __webpack_require__(38);
},
"ui/core/weak-event-listener/weak-event-listener": function() {
return __webpack_require__(38);
},
"ui/core/weak-event-listener/weak-event-listener.js": function() {
return __webpack_require__(38);
},
"ui/date-picker": function() {
return __webpack_require__(101);
},
"ui/date-picker/": function() {
return __webpack_require__(101);
},
"ui/date-picker/date-picker": function() {
return __webpack_require__(101);
},
"ui/date-picker/date-picker-common": function() {
return __webpack_require__(102);
},
"ui/date-picker/date-picker-common.js": function() {
return __webpack_require__(102);
},
"ui/date-picker/date-picker.js": function() {
return __webpack_require__(101);
},
"ui/dialogs": function() {
return __webpack_require__(8);
},
"ui/dialogs/": function() {
return __webpack_require__(8);
},
"ui/dialogs/dialogs": function() {
return __webpack_require__(8);
},
"ui/dialogs/dialogs-common": function() {
return __webpack_require__(9);
},
"ui/dialogs/dialogs-common.js": function() {
return __webpack_require__(9);
},
"ui/dialogs/dialogs.js": function() {
return __webpack_require__(8);
},
"ui/editable-text-base": function() {
return __webpack_require__(76);
},
"ui/editable-text-base/": function() {
return __webpack_require__(76);
},
"ui/editable-text-base/editable-text-base": function() {
return __webpack_require__(76);
},
"ui/editable-text-base/editable-text-base-common": function() {
return __webpack_require__(77);
},
"ui/editable-text-base/editable-text-base-common.js": function() {
return __webpack_require__(77);
},
"ui/editable-text-base/editable-text-base.js": function() {
return __webpack_require__(76);
},
"ui/enums": function() {
return __webpack_require__(103);
},
"ui/enums/": function() {
return __webpack_require__(103);
},
"ui/enums/enums": function() {
return __webpack_require__(103);
},
"ui/enums/enums.js": function() {
return __webpack_require__(103);
},
"ui/frame": function() {
return __webpack_require__(10);
},
"ui/frame/": function() {
return __webpack_require__(10);
},
"ui/frame/activity": function() {
return __webpack_require__(158);
},
"ui/frame/activity.js": function() {
return __webpack_require__(158);
},
"ui/frame/fragment": function() {
return __webpack_require__(66);
},
"ui/frame/fragment.js": function() {
return __webpack_require__(66);
},
"ui/frame/frame": function() {
return __webpack_require__(10);
},
"ui/frame/frame-common": function() {
return __webpack_require__(11);
},
"ui/frame/frame-common.js": function() {
return __webpack_require__(11);
},
"ui/frame/frame.js": function() {
return __webpack_require__(10);
},
"ui/gestures": function() {
return __webpack_require__(54);
},
"ui/gestures/": function() {
return __webpack_require__(54);
},
"ui/gestures/gestures": function() {
return __webpack_require__(54);
},
"ui/gestures/gestures-common": function() {
return __webpack_require__(55);
},
"ui/gestures/gestures-common.js": function() {
return __webpack_require__(55);
},
"ui/gestures/gestures.js": function() {
return __webpack_require__(54);
},
"ui/html-view": function() {
return __webpack_require__(104);
},
"ui/html-view/": function() {
return __webpack_require__(104);
},
"ui/html-view/html-view": function() {
return __webpack_require__(104);
},
"ui/html-view/html-view-common": function() {
return __webpack_require__(105);
},
"ui/html-view/html-view-common.js": function() {
return __webpack_require__(105);
},
"ui/html-view/html-view.js": function() {
return __webpack_require__(104);
},
"ui/image": function() {
return __webpack_require__(106);
},
"ui/image-cache": function() {
return __webpack_require__(108);
},
"ui/image-cache/": function() {
return __webpack_require__(108);
},
"ui/image-cache/image-cache": function() {
return __webpack_require__(108);
},
"ui/image-cache/image-cache-common": function() {
return __webpack_require__(109);
},
"ui/image-cache/image-cache-common.js": function() {
return __webpack_require__(109);
},
"ui/image-cache/image-cache.js": function() {
return __webpack_require__(108);
},
"ui/image/": function() {
return __webpack_require__(106);
},
"ui/image/image": function() {
return __webpack_require__(106);
},
"ui/image/image-common": function() {
return __webpack_require__(107);
},
"ui/image/image-common.js": function() {
return __webpack_require__(107);
},
"ui/image/image.js": function() {
return __webpack_require__(106);
},
"ui/label": function() {
return __webpack_require__(78);
},
"ui/label/": function() {
return __webpack_require__(78);
},
"ui/label/label": function() {
return __webpack_require__(78);
},
"ui/label/label-common": function() {
return __webpack_require__(159);
},
"ui/label/label-common.js": function() {
return __webpack_require__(159);
},
"ui/label/label.js": function() {
return __webpack_require__(78);
},
"ui/layouts/absolute-layout": function() {
return __webpack_require__(113);
},
"ui/layouts/absolute-layout/": function() {
return __webpack_require__(113);
},
"ui/layouts/absolute-layout/absolute-layout": function() {
return __webpack_require__(113);
},
"ui/layouts/absolute-layout/absolute-layout-common": function() {
return __webpack_require__(114);
},
"ui/layouts/absolute-layout/absolute-layout-common.js": function() {
return __webpack_require__(114);
},
"ui/layouts/absolute-layout/absolute-layout.js": function() {
return __webpack_require__(113);
},
"ui/layouts/dock-layout": function() {
return __webpack_require__(115);
},
"ui/layouts/dock-layout/": function() {
return __webpack_require__(115);
},
"ui/layouts/dock-layout/dock-layout": function() {
return __webpack_require__(115);
},
"ui/layouts/dock-layout/dock-layout-common": function() {
return __webpack_require__(116);
},
"ui/layouts/dock-layout/dock-layout-common.js": function() {
return __webpack_require__(116);
},
"ui/layouts/dock-layout/dock-layout.js": function() {
return __webpack_require__(115);
},
"ui/layouts/flexbox-layout": function() {
return __webpack_require__(117);
},
"ui/layouts/flexbox-layout/": function() {
return __webpack_require__(117);
},
"ui/layouts/flexbox-layout/flexbox-layout": function() {
return __webpack_require__(117);
},
"ui/layouts/flexbox-layout/flexbox-layout-common": function() {
return __webpack_require__(118);
},
"ui/layouts/flexbox-layout/flexbox-layout-common.js": function() {
return __webpack_require__(118);
},
"ui/layouts/flexbox-layout/flexbox-layout.js": function() {
return __webpack_require__(117);
},
"ui/layouts/grid-layout": function() {
return __webpack_require__(119);
},
"ui/layouts/grid-layout/": function() {
return __webpack_require__(119);
},
"ui/layouts/grid-layout/grid-layout": function() {
return __webpack_require__(119);
},
"ui/layouts/grid-layout/grid-layout-common": function() {
return __webpack_require__(120);
},
"ui/layouts/grid-layout/grid-layout-common.js": function() {
return __webpack_require__(120);
},
"ui/layouts/grid-layout/grid-layout.js": function() {
return __webpack_require__(119);
},
"ui/layouts/layout": function() {
return __webpack_require__(112);
},
"ui/layouts/layout-base": function() {
return __webpack_require__(110);
},
"ui/layouts/layout-base-common": function() {
return __webpack_require__(111);
},
"ui/layouts/layout-base-common.js": function() {
return __webpack_require__(111);
},
"ui/layouts/layout-base.js": function() {
return __webpack_require__(110);
},
"ui/layouts/layout.js": function() {
return __webpack_require__(112);
},
"ui/layouts/stack-layout": function() {
return __webpack_require__(121);
},
"ui/layouts/stack-layout/": function() {
return __webpack_require__(121);
},
"ui/layouts/stack-layout/stack-layout": function() {
return __webpack_require__(121);
},
"ui/layouts/stack-layout/stack-layout-common": function() {
return __webpack_require__(122);
},
"ui/layouts/stack-layout/stack-layout-common.js": function() {
return __webpack_require__(122);
},
"ui/layouts/stack-layout/stack-layout.js": function() {
return __webpack_require__(121);
},
"ui/layouts/wrap-layout": function() {
return __webpack_require__(123);
},
"ui/layouts/wrap-layout/": function() {
return __webpack_require__(123);
},
"ui/layouts/wrap-layout/wrap-layout": function() {
return __webpack_require__(123);
},
"ui/layouts/wrap-layout/wrap-layout-common": function() {
return __webpack_require__(124);
},
"ui/layouts/wrap-layout/wrap-layout-common.js": function() {
return __webpack_require__(124);
},
"ui/layouts/wrap-layout/wrap-layout.js": function() {
return __webpack_require__(123);
},
"ui/list-picker": function() {
return __webpack_require__(125);
},
"ui/list-picker/": function() {
return __webpack_require__(125);
},
"ui/list-picker/list-picker": function() {
return __webpack_require__(125);
},
"ui/list-picker/list-picker-common": function() {
return __webpack_require__(126);
},
"ui/list-picker/list-picker-common.js": function() {
return __webpack_require__(126);
},
"ui/list-picker/list-picker.js": function() {
return __webpack_require__(125);
},
"ui/list-view": function() {
return __webpack_require__(127);
},
"ui/list-view/": function() {
return __webpack_require__(127);
},
"ui/list-view/list-view": function() {
return __webpack_require__(127);
},
"ui/list-view/list-view-common": function() {
return __webpack_require__(128);
},
"ui/list-view/list-view-common.js": function() {
return __webpack_require__(128);
},
"ui/list-view/list-view.js": function() {
return __webpack_require__(127);
},
"ui/page": function() {
return __webpack_require__(130);
},
"ui/page/": function() {
return __webpack_require__(130);
},
"ui/page/constants": function() {
return __webpack_require__(61);
},
"ui/page/constants.js": function() {
return __webpack_require__(61);
},
"ui/page/page": function() {
return __webpack_require__(130);
},
"ui/page/page-common": function() {
return __webpack_require__(131);
},
"ui/page/page-common.js": function() {
return __webpack_require__(131);
},
"ui/page/page.js": function() {
return __webpack_require__(130);
},
"ui/placeholder": function() {
return __webpack_require__(132);
},
"ui/placeholder/": function() {
return __webpack_require__(132);
},
"ui/placeholder/placeholder": function() {
return __webpack_require__(132);
},
"ui/placeholder/placeholder.js": function() {
return __webpack_require__(132);
},
"ui/progress": function() {
return __webpack_require__(133);
},
"ui/progress/": function() {
return __webpack_require__(133);
},
"ui/progress/progress": function() {
return __webpack_require__(133);
},
"ui/progress/progress-common": function() {
return __webpack_require__(134);
},
"ui/progress/progress-common.js": function() {
return __webpack_require__(134);
},
"ui/progress/progress.js": function() {
return __webpack_require__(133);
},
"ui/proxy-view-container": function() {
return __webpack_require__(129);
},
"ui/proxy-view-container/": function() {
return __webpack_require__(129);
},
"ui/proxy-view-container/proxy-view-container": function() {
return __webpack_require__(129);
},
"ui/proxy-view-container/proxy-view-container.js": function() {
return __webpack_require__(129);
},
"ui/repeater": function() {
return __webpack_require__(135);
},
"ui/repeater/": function() {
return __webpack_require__(135);
},
"ui/repeater/repeater": function() {
return __webpack_require__(135);
},
"ui/repeater/repeater.js": function() {
return __webpack_require__(135);
},
"ui/scroll-view": function() {
return __webpack_require__(136);
},
"ui/scroll-view/": function() {
return __webpack_require__(136);
},
"ui/scroll-view/scroll-view": function() {
return __webpack_require__(136);
},
"ui/scroll-view/scroll-view-common": function() {
return __webpack_require__(137);
},
"ui/scroll-view/scroll-view-common.js": function() {
return __webpack_require__(137);
},
"ui/scroll-view/scroll-view.js": function() {
return __webpack_require__(136);
},
"ui/search-bar": function() {
return __webpack_require__(138);
},
"ui/search-bar/": function() {
return __webpack_require__(138);
},
"ui/search-bar/search-bar": function() {
return __webpack_require__(138);
},
"ui/search-bar/search-bar-common": function() {
return __webpack_require__(139);
},
"ui/search-bar/search-bar-common.js": function() {
return __webpack_require__(139);
},
"ui/search-bar/search-bar.js": function() {
return __webpack_require__(138);
},
"ui/segmented-bar": function() {
return __webpack_require__(140);
},
"ui/segmented-bar/": function() {
return __webpack_require__(140);
},
"ui/segmented-bar/segmented-bar": function() {
return __webpack_require__(140);
},
"ui/segmented-bar/segmented-bar-common": function() {
return __webpack_require__(141);
},
"ui/segmented-bar/segmented-bar-common.js": function() {
return __webpack_require__(141);
},
"ui/segmented-bar/segmented-bar.js": function() {
return __webpack_require__(140);
},
"ui/slider": function() {
return __webpack_require__(142);
},
"ui/slider/": function() {
return __webpack_require__(142);
},
"ui/slider/slider": function() {
return __webpack_require__(142);
},
"ui/slider/slider-common": function() {
return __webpack_require__(143);
},
"ui/slider/slider-common.js": function() {
return __webpack_require__(143);
},
"ui/slider/slider.js": function() {
return __webpack_require__(142);
},
"ui/styling": function() {
return __webpack_require__(33);
},
"ui/styling/": function() {
return __webpack_require__(33);
},
"ui/styling/background": function() {
return __webpack_require__(13);
},
"ui/styling/background-common": function() {
return __webpack_require__(23);
},
"ui/styling/background-common.js": function() {
return __webpack_require__(23);
},
"ui/styling/background.js": function() {
return __webpack_require__(13);
},
"ui/styling/converters": function() {
return __webpack_require__(53);
},
"ui/styling/converters.js": function() {
return __webpack_require__(53);
},
"ui/styling/css-animation-parser": function() {
return __webpack_require__(52);
},
"ui/styling/css-animation-parser.js": function() {
return __webpack_require__(52);
},
"ui/styling/css-selector": function() {
return __webpack_require__(46);
},
"ui/styling/css-selector-parser": function() {
return __webpack_require__(47);
},
"ui/styling/css-selector-parser.js": function() {
return __webpack_require__(47);
},
"ui/styling/css-selector/": function() {
return __webpack_require__(46);
},
"ui/styling/css-selector/css-selector": function() {
return __webpack_require__(46);
},
"ui/styling/css-selector/css-selector.js": function() {
return __webpack_require__(46);
},
"ui/styling/font": function() {
return __webpack_require__(29);
},
"ui/styling/font-common": function() {
return __webpack_require__(30);
},
"ui/styling/font-common.js": function() {
return __webpack_require__(30);
},
"ui/styling/font.js": function() {
return __webpack_require__(29);
},
"ui/styling/style": function() {
return __webpack_require__(33);
},
"ui/styling/style-properties": function() {
return __webpack_require__(28);
},
"ui/styling/style-properties.js": function() {
return __webpack_require__(28);
},
"ui/styling/style-scope": function() {
return __webpack_require__(43);
},
"ui/styling/style-scope.js": function() {
return __webpack_require__(43);
},
"ui/styling/style/": function() {
return __webpack_require__(33);
},
"ui/styling/style/style": function() {
return __webpack_require__(33);
},
"ui/styling/style/style.js": function() {
return __webpack_require__(33);
},
"ui/switch": function() {
return __webpack_require__(144);
},
"ui/switch/": function() {
return __webpack_require__(144);
},
"ui/switch/switch": function() {
return __webpack_require__(144);
},
"ui/switch/switch-common": function() {
return __webpack_require__(145);
},
"ui/switch/switch-common.js": function() {
return __webpack_require__(145);
},
"ui/switch/switch.js": function() {
return __webpack_require__(144);
},
"ui/tab-view": function() {
return __webpack_require__(146);
},
"ui/tab-view/": function() {
return __webpack_require__(146);
},
"ui/tab-view/tab-view": function() {
return __webpack_require__(146);
},
"ui/tab-view/tab-view-common": function() {
return __webpack_require__(147);
},
"ui/tab-view/tab-view-common.js": function() {
return __webpack_require__(147);
},
"ui/tab-view/tab-view.js": function() {
return __webpack_require__(146);
},
"ui/text-base": function() {
return __webpack_require__(69);
},
"ui/text-base/": function() {
return __webpack_require__(69);
},
"ui/text-base/text-base": function() {
return __webpack_require__(69);
},
"ui/text-base/text-base-common": function() {
return __webpack_require__(70);
},
"ui/text-base/text-base-common.js": function() {
return __webpack_require__(70);
},
"ui/text-base/text-base.js": function() {
return __webpack_require__(69);
},
"ui/text-field": function() {
return __webpack_require__(74);
},
"ui/text-field/": function() {
return __webpack_require__(74);
},
"ui/text-field/text-field": function() {
return __webpack_require__(74);
},
"ui/text-field/text-field-common": function() {
return __webpack_require__(75);
},
"ui/text-field/text-field-common.js": function() {
return __webpack_require__(75);
},
"ui/text-field/text-field.js": function() {
return __webpack_require__(74);
},
"ui/text-view": function() {
return __webpack_require__(148);
},
"ui/text-view/": function() {
return __webpack_require__(148);
},
"ui/text-view/text-view": function() {
return __webpack_require__(148);
},
"ui/text-view/text-view-common": function() {
return __webpack_require__(160);
},
"ui/text-view/text-view-common.js": function() {
return __webpack_require__(160);
},
"ui/text-view/text-view.js": function() {
return __webpack_require__(148);
},
"ui/time-picker": function() {
return __webpack_require__(149);
},
"ui/time-picker/": function() {
return __webpack_require__(149);
},
"ui/time-picker/time-picker": function() {
return __webpack_require__(149);
},
"ui/time-picker/time-picker-common": function() {
return __webpack_require__(150);
},
"ui/time-picker/time-picker-common.js": function() {
return __webpack_require__(150);
},
"ui/time-picker/time-picker.js": function() {
return __webpack_require__(149);
},
"ui/transition": function() {
return __webpack_require__(62);
},
"ui/transition/": function() {
return __webpack_require__(62);
},
"ui/transition/fade-transition": function() {
return __webpack_require__(64);
},
"ui/transition/fade-transition.js": function() {
return __webpack_require__(64);
},
"ui/transition/flip-transition": function() {
return __webpack_require__(65);
},
"ui/transition/flip-transition.js": function() {
return __webpack_require__(65);
},
"ui/transition/slide-transition": function() {
return __webpack_require__(63);
},
"ui/transition/slide-transition.js": function() {
return __webpack_require__(63);
},
"ui/transition/transition": function() {
return __webpack_require__(62);
},
"ui/transition/transition.js": function() {
return __webpack_require__(62);
},
"ui/web-view": function() {
return __webpack_require__(151);
},
"ui/web-view/": function() {
return __webpack_require__(151);
},
"ui/web-view/web-view": function() {
return __webpack_require__(151);
},
"ui/web-view/web-view-common": function() {
return __webpack_require__(152);
},
"ui/web-view/web-view-common.js": function() {
return __webpack_require__(152);
},
"ui/web-view/web-view.js": function() {
return __webpack_require__(151);
},
"utils/debug": function() {
return __webpack_require__(34);
},
"utils/debug-common": function() {
return __webpack_require__(35);
},
"utils/debug-common.js": function() {
return __webpack_require__(35);
},
"utils/debug.js": function() {
return __webpack_require__(34);
},
"utils/lazy": function() {
return __webpack_require__(51);
},
"utils/lazy.js": function() {
return __webpack_require__(51);
},
"utils/module-merge": function() {
return __webpack_require__(153);
},
"utils/module-merge.js": function() {
return __webpack_require__(153);
},
"utils/number-utils": function() {
return __webpack_require__(154);
},
"utils/number-utils.js": function() {
return __webpack_require__(154);
},
"utils/types": function() {
return __webpack_require__(17);
},
"utils/types.js": function() {
return __webpack_require__(17);
},
"utils/utils": function() {
return __webpack_require__(14);
},
"utils/utils-common": function() {
return __webpack_require__(16);
},
"utils/utils-common.js": function() {
return __webpack_require__(16);
},
"utils/utils.js": function() {
return __webpack_require__(14);
},
xhr: function() {
return __webpack_require__(79);
},
"xhr/": function() {
return __webpack_require__(79);
},
"xhr/xhr": function() {
return __webpack_require__(79);
},
"xhr/xhr.js": function() {
return __webpack_require__(79);
},
xml: function() {
return __webpack_require__(58);
},
"xml/": function() {
return __webpack_require__(58);
},
"xml/xml": function() {
return __webpack_require__(58);
},
"xml/xml.js": function() {
return __webpack_require__(58);
}
};
function __join() {
var parts = [];
for (var i = 0, l = arguments.length; i < l; i++) {
parts = parts.concat(arguments[i].split("/"));
}
var newParts = [];
for (i = 0, l = parts.length; i < l; i++) {
var part = parts[i];
if (!part || part === ".") continue;
if (part === "..") newParts.pop(); else newParts.push(part);
}
if (parts[0] === "") newParts.unshift("");
return newParts.join("/") || (newParts.length ? "/" : ".");
}
function __require(moduleId) {
var moduleEntry = map[moduleId];
if (!moduleEntry) {
return;
}
return moduleEntry();
}
function __trace(message) {
android.util.Log.v("TNS.Native", "" + message);
}
return function(moduleId, dirname) {
while (global.__pendingSnapshotCalls && __pendingSnapshotCalls.length) {
var call = __pendingSnapshotCalls.shift();
call();
}
var resolvedModuleId = moduleId.replace(/^\.\/tns_modules\//, "");
if (resolvedModuleId[0] === ".") {
if (resolvedModuleId === "./_embedded_script_.js") {
return {};
}
resolvedModuleId = __join(dirname, resolvedModuleId);
}
if (resolvedModuleId[0] === "/") {
resolvedModuleId = resolvedModuleId.replace(/^\/.*\/files\/app\/tns_modules\//, "");
}
var module = __require(resolvedModuleId);
if (module) {
return module;
}
};
}();
}, function(module, exports, __webpack_require__) {
if (global.TNS_WEBPACK) {
__webpack_require__(5);
global.registerModule("text/formatted-string", function() {
return __webpack_require__(71);
});
global.registerModule("text/span", function() {
return __webpack_require__(72);
});
global.registerModule("ui/action-bar", function() {
return __webpack_require__(94);
});
global.registerModule("ui/activity-indicator", function() {
return __webpack_require__(96);
});
global.registerModule("ui/border", function() {
return __webpack_require__(98);
});
global.registerModule("ui/button", function() {
return __webpack_require__(67);
});
global.registerModule("ui/content-view", function() {
return __webpack_require__(99);
});
global.registerModule("ui/date-picker", function() {
return __webpack_require__(101);
});
global.registerModule("ui/html-view", function() {
return __webpack_require__(104);
});
global.registerModule("ui/image", function() {
return __webpack_require__(106);
});
global.registerModule("ui/label", function() {
return __webpack_require__(78);
});
global.registerModule("ui/layouts/absolute-layout", function() {
return __webpack_require__(113);
});
global.registerModule("ui/layouts/dock-layout", function() {
return __webpack_require__(115);
});
global.registerModule("ui/layouts/grid-layout", function() {
return __webpack_require__(119);
});
global.registerModule("ui/layouts/stack-layout", function() {
return __webpack_require__(121);
});
global.registerModule("ui/layouts/flexbox-layout", function() {
return __webpack_require__(117);
});
global.registerModule("ui/list-picker", function() {
return __webpack_require__(125);
});
global.registerModule("ui/page", function() {
return __webpack_require__(130);
});
global.registerModule("ui/placeholder", function() {
return __webpack_require__(132);
});
global.registerModule("ui/progress", function() {
return __webpack_require__(133);
});
global.registerModule("ui/proxy-view-container", function() {
return __webpack_require__(129);
});
global.registerModule("ui/repeater", function() {
return __webpack_require__(135);
});
global.registerModule("ui/scroll-view", function() {
return __webpack_require__(136);
});
global.registerModule("ui/search-bar", function() {
return __webpack_require__(138);
});
global.registerModule("ui/segmented-bar", function() {
return __webpack_require__(140);
});
global.registerModule("ui/slider", function() {
return __webpack_require__(142);
});
global.registerModule("ui/switch", function() {
return __webpack_require__(144);
});
global.registerModule("ui/tab-view", function() {
return __webpack_require__(146);
});
global.registerModule("ui/web-view", function() {
return __webpack_require__(151);
});
global.registerModule("ui/text-field", function() {
return __webpack_require__(74);
});
global.registerModule("ui/text-view", function() {
return __webpack_require__(148);
});
global.registerModule("ui/time-picker", function() {
return __webpack_require__(149);
});
global.registerModule("ui/list-view", function() {
return __webpack_require__(127);
});
}
}, function(module, exports) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var timers = {};
var anyGlobal = global;
var profileNames = [];
var ENABLED = false;
var nativeTimeFunc;
function enable() {
ENABLED = true;
if (!nativeTimeFunc) {
if (anyGlobal.android) {
var nanoTime_1 = java.lang.System.nanoTime;
nativeTimeFunc = function() {
return nanoTime_1() / 1e6;
};
} else {
nativeTimeFunc = function() {
return CACurrentMediaTime() * 1e3;
};
}
}
}
exports.enable = enable;
function disable() {
ENABLED = false;
}
exports.disable = disable;
function time() {
if (!ENABLED) {
throw new Error("Profiling is not enabled");
}
return nativeTimeFunc();
}
exports.time = time;
function start(name) {
if (!ENABLED) {
return;
}
var info = timers[name];
if (info) {
if (info.isRunning) {
throw new Error("Timer already running: " + name);
}
info.currentStart = time();
info.isRunning = true;
} else {
info = {
totalTime: 0,
count: 0,
currentStart: time(),
isRunning: true
};
timers[name] = info;
}
}
exports.start = start;
function pause(name) {
if (!ENABLED) {
return;
}
var info = pauseInternal(name);
return info;
}
exports.pause = pause;
function stop(name) {
if (!ENABLED) {
return;
}
var info = pauseInternal(name);
console.log("---- [" + name + "] STOP total: " + info.totalTime + " count:" + info.count);
timers[name] = undefined;
return info;
}
exports.stop = stop;
function isRunning(name) {
var info = timers[name];
return !!(info && info.isRunning);
}
exports.isRunning = isRunning;
function pauseInternal(name) {
var info = timers[name];
if (!info) {
throw new Error("No timer started: " + name);
}
if (info.isRunning) {
info.lastTime = time() - info.currentStart;
info.totalTime += info.lastTime;
info.count++;
info.currentStart = 0;
info.isRunning = false;
}
return info;
}
function profile(name) {
return function(target, key, descriptor) {
if (!ENABLED) {
return;
}
if (descriptor === undefined) {
descriptor = Object.getOwnPropertyDescriptor(target, key);
}
var originalMethod = descriptor.value;
if (!name) {
var className = "";
if (target && target.constructor && target.constructor.name) {
className = target.constructor.name + ".";
}
name = className + key;
}
profileNames.push(name);
descriptor.value = function() {
start(name);
try {
return originalMethod.apply(this, arguments);
} finally {
pause(name);
}
};
return descriptor;
};
}
exports.profile = profile;
function dumpProfiles() {
profileNames.forEach(function(name) {
var info = timers[name];
if (info) {
console.log("---- [" + name + "] STOP total: " + info.totalTime + " count:" + info.count);
} else {
console.log("---- [" + name + "] Never called");
}
});
}
exports.dumpProfiles = dumpProfiles;
function resetProfiles() {
profileNames.forEach(function(name) {
var info = timers[name];
if (info) {
if (!info.isRunning) {
timers[name] = undefined;
} else {
console.log("---- timer with name [" + name + "] is currently running and won't be reset");
}
}
});
}
exports.resetProfiles = resetProfiles;
function startCPUProfile(name) {
if (!ENABLED) {
return;
}
if (anyGlobal.android) {
__startCPUProfiler(name);
}
}
exports.startCPUProfile = startCPUProfile;
function stopCPUProfile(name) {
if (!ENABLED) {
return;
}
if (anyGlobal.android) {
__stopCPUProfiler(name);
}
}
exports.stopCPUProfile = stopCPUProfile;
}, function(module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", {
value: true
});
var frame_1 = __webpack_require__(10);
var appModule = __webpack_require__(3);
var NativeScriptActivity = function(_super) {
__extends(NativeScriptActivity, _super);
function NativeScriptActivity() {
var _this = _super.call(this) || this;
return global.__native(_this);
}
NativeScriptActivity.prototype.onCreate = function(savedInstanceState) {
appModule.android.init(this.getApplication());
this.isNativeScriptActivity = true;
if (!this._callbacks) {
frame_1.setActivityCallbacks(this);
}
this._callbacks.onCreate(this, savedInstanceState, _super.prototype.onCreate);
};
NativeScriptActivity.prototype.onSaveInstanceState = function(outState) {
this._callbacks.onSaveInstanceState(this, outState, _super.prototype.onSaveInstanceState);
};
NativeScriptActivity.prototype.onStart = function() {
this._callbacks.onStart(this, _super.prototype.onStart);
};
NativeScriptActivity.prototype.onStop = function() {
this._callbacks.onStop(this, _super.prototype.onStop);
};
NativeScriptActivity.prototype.onDestroy = function() {
this._callbacks.onDestroy(this, _super.prototype.onDestroy);
};
NativeScriptActivity.prototype.onBackPressed = function() {
this._callbacks.onBackPressed(this, _super.prototype.onBackPressed);
};
NativeScriptActivity.prototype.onRequestPermissionsResult = function(requestCode, permissions, grantResults) {
this._callbacks.onRequestPermissionsResult(this, requestCode, permissions, grantResults, undefined);
};
NativeScriptActivity.prototype.onActivityResult = function(requestCode, resultCode, data) {
this._callbacks.onActivityResult(this, requestCode, resultCode, data, _super.prototype.onActivityResult);
};
return NativeScriptActivity;
}(android.app.Activity);
NativeScriptActivity = __decorate([ JavaProxy("com.tns.NativeScriptActivity") ], NativeScriptActivity);
}, function(module, exports) {}, function(module, exports) {} ]);
